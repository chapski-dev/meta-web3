/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Staking {
  export type StakerStruct = {
    stakerAddress: PromiseOrValue<string>;
    balance: PromiseOrValue<BigNumberish>;
    rewards: PromiseOrValue<BigNumberish>;
    rewardPerTokenPaid: PromiseOrValue<BigNumberish>;
    startBlock: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
  };

  export type StakerStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    stakerAddress: string;
    balance: BigNumber;
    rewards: BigNumber;
    rewardPerTokenPaid: BigNumber;
    startBlock: BigNumber;
    startTime: BigNumber;
  };
}

export interface StakingInterface extends utils.Interface {
  functions: {
    "BLOCKS_IN_YEAR()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "emergencyWithdrawal(address,bool)": FunctionFragment;
    "getStakeConditionsInfo()": FunctionFragment;
    "getStakeInfo()": FunctionFragment;
    "getTokenBalance(address)": FunctionFragment;
    "getUserInfo(address)": FunctionFragment;
    "harvest()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "setActive(bool)": FunctionFragment;
    "setRewardPerBlock(uint256)": FunctionFragment;
    "stakeTokens(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateStake(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawTokens(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BLOCKS_IN_YEAR"
      | "earned"
      | "emergencyWithdrawal"
      | "getStakeConditionsInfo"
      | "getStakeInfo"
      | "getTokenBalance"
      | "getUserInfo"
      | "harvest"
      | "owner"
      | "renounceOwnership"
      | "rewardPerToken"
      | "setActive"
      | "setRewardPerBlock"
      | "stakeTokens"
      | "transferOwnership"
      | "updateStake"
      | "withdraw"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BLOCKS_IN_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawal",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeConditionsInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActive",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStake",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCKS_IN_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeConditionsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "ActiveSet(bool,address)": EventFragment;
    "EmergencyWithdrawals(address,bool,address)": EventFragment;
    "Harvested(uint256,address)": EventFragment;
    "MaxStakePerStakerSet(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardPerBlockSet(uint256,address)": EventFragment;
    "RewardsDeposited(address,uint256,address)": EventFragment;
    "StakeCreated(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "StakeUpdated(uint256,uint256,uint256,uint256,uint256,uint256,address)": EventFragment;
    "TokenWithdrawed(uint256,address)": EventFragment;
    "TokensStaked(uint256,address)": EventFragment;
    "Withdrawed(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActiveSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawals"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxStakePerStakerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPerBlockSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdrawed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawed"): EventFragment;
}

export interface ActiveSetEventObject {
  value: boolean;
  operator: string;
}
export type ActiveSetEvent = TypedEvent<
  [boolean, string],
  ActiveSetEventObject
>;

export type ActiveSetEventFilter = TypedEventFilter<ActiveSetEvent>;

export interface EmergencyWithdrawalsEventObject {
  stakerAddress: string;
  payHarvest: boolean;
  operator: string;
}
export type EmergencyWithdrawalsEvent = TypedEvent<
  [string, boolean, string],
  EmergencyWithdrawalsEventObject
>;

export type EmergencyWithdrawalsEventFilter =
  TypedEventFilter<EmergencyWithdrawalsEvent>;

export interface HarvestedEventObject {
  amount: BigNumber;
  operator: string;
}
export type HarvestedEvent = TypedEvent<
  [BigNumber, string],
  HarvestedEventObject
>;

export type HarvestedEventFilter = TypedEventFilter<HarvestedEvent>;

export interface MaxStakePerStakerSetEventObject {
  newMaxStakePerStaker: BigNumber;
  operator: string;
}
export type MaxStakePerStakerSetEvent = TypedEvent<
  [BigNumber, string],
  MaxStakePerStakerSetEventObject
>;

export type MaxStakePerStakerSetEventFilter =
  TypedEventFilter<MaxStakePerStakerSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardPerBlockSetEventObject {
  newRewardPerBlock: BigNumber;
  operator: string;
}
export type RewardPerBlockSetEvent = TypedEvent<
  [BigNumber, string],
  RewardPerBlockSetEventObject
>;

export type RewardPerBlockSetEventFilter =
  TypedEventFilter<RewardPerBlockSetEvent>;

export interface RewardsDepositedEventObject {
  tokenAddress: string;
  amount: BigNumber;
  operator: string;
}
export type RewardsDepositedEvent = TypedEvent<
  [string, BigNumber, string],
  RewardsDepositedEventObject
>;

export type RewardsDepositedEventFilter =
  TypedEventFilter<RewardsDepositedEvent>;

export interface StakeCreatedEventObject {
  rewardToken: string;
  stackingToken: string;
  startsAt: BigNumber;
  lpLockTime: BigNumber;
  lpTotalLimit: BigNumber;
  stakersLimit: BigNumber;
  maxStakePerStaker: BigNumber;
  rewardsPerBlock: BigNumber;
  durationInBlocks: BigNumber;
}
export type StakeCreatedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  StakeCreatedEventObject
>;

export type StakeCreatedEventFilter = TypedEventFilter<StakeCreatedEvent>;

export interface StakeUpdatedEventObject {
  startsAt: BigNumber;
  blocksDuration: BigNumber;
  lpLockTime: BigNumber;
  stakersLimit: BigNumber;
  maxStakePerStaker: BigNumber;
  newRewardPerBlock: BigNumber;
  operator: string;
}
export type StakeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string],
  StakeUpdatedEventObject
>;

export type StakeUpdatedEventFilter = TypedEventFilter<StakeUpdatedEvent>;

export interface TokenWithdrawedEventObject {
  amount: BigNumber;
  operator: string;
}
export type TokenWithdrawedEvent = TypedEvent<
  [BigNumber, string],
  TokenWithdrawedEventObject
>;

export type TokenWithdrawedEventFilter = TypedEventFilter<TokenWithdrawedEvent>;

export interface TokensStakedEventObject {
  amount: BigNumber;
  operator: string;
}
export type TokensStakedEvent = TypedEvent<
  [BigNumber, string],
  TokensStakedEventObject
>;

export type TokensStakedEventFilter = TypedEventFilter<TokensStakedEvent>;

export interface WithdrawedEventObject {
  amount: BigNumber;
  operator: string;
}
export type WithdrawedEvent = TypedEvent<
  [BigNumber, string],
  WithdrawedEventObject
>;

export type WithdrawedEventFilter = TypedEventFilter<WithdrawedEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BLOCKS_IN_YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    earned(
      stakerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emergencyWithdrawal(
      stakerAddress: PromiseOrValue<string>,
      payHarvest: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStakeConditionsInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getStakeInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    getTokenBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Staking.StakerStructOutput]>;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    setActive(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardPerBlock(
      _newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStake(
      newStartsAt: PromiseOrValue<BigNumberish>,
      newBlocksDuration: PromiseOrValue<BigNumberish>,
      newLpLockTime: PromiseOrValue<BigNumberish>,
      newStakersLimit: PromiseOrValue<BigNumberish>,
      newMaxStakePerStaker: PromiseOrValue<BigNumberish>,
      newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BLOCKS_IN_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  earned(
    stakerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emergencyWithdrawal(
    stakerAddress: PromiseOrValue<string>,
    payHarvest: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStakeConditionsInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  getStakeInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ]
  >;

  getTokenBalance(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserInfo(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Staking.StakerStructOutput>;

  harvest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  setActive(
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardPerBlock(
    _newRewardPerBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeTokens(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStake(
    newStartsAt: PromiseOrValue<BigNumberish>,
    newBlocksDuration: PromiseOrValue<BigNumberish>,
    newLpLockTime: PromiseOrValue<BigNumberish>,
    newStakersLimit: PromiseOrValue<BigNumberish>,
    newMaxStakePerStaker: PromiseOrValue<BigNumberish>,
    newRewardPerBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BLOCKS_IN_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    earned(
      stakerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdrawal(
      stakerAddress: PromiseOrValue<string>,
      payHarvest: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getStakeConditionsInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getStakeInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    getTokenBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Staking.StakerStructOutput>;

    harvest(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    setActive(
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardPerBlock(
      _newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStake(
      newStartsAt: PromiseOrValue<BigNumberish>,
      newBlocksDuration: PromiseOrValue<BigNumberish>,
      newLpLockTime: PromiseOrValue<BigNumberish>,
      newStakersLimit: PromiseOrValue<BigNumberish>,
      newMaxStakePerStaker: PromiseOrValue<BigNumberish>,
      newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActiveSet(bool,address)"(
      value?: PromiseOrValue<boolean> | null,
      operator?: null
    ): ActiveSetEventFilter;
    ActiveSet(
      value?: PromiseOrValue<boolean> | null,
      operator?: null
    ): ActiveSetEventFilter;

    "EmergencyWithdrawals(address,bool,address)"(
      stakerAddress?: PromiseOrValue<string> | null,
      payHarvest?: null,
      operator?: PromiseOrValue<string> | null
    ): EmergencyWithdrawalsEventFilter;
    EmergencyWithdrawals(
      stakerAddress?: PromiseOrValue<string> | null,
      payHarvest?: null,
      operator?: PromiseOrValue<string> | null
    ): EmergencyWithdrawalsEventFilter;

    "Harvested(uint256,address)"(
      amount?: null,
      operator?: PromiseOrValue<string> | null
    ): HarvestedEventFilter;
    Harvested(
      amount?: null,
      operator?: PromiseOrValue<string> | null
    ): HarvestedEventFilter;

    "MaxStakePerStakerSet(uint256,address)"(
      newMaxStakePerStaker?: null,
      operator?: PromiseOrValue<string> | null
    ): MaxStakePerStakerSetEventFilter;
    MaxStakePerStakerSet(
      newMaxStakePerStaker?: null,
      operator?: PromiseOrValue<string> | null
    ): MaxStakePerStakerSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RewardPerBlockSet(uint256,address)"(
      newRewardPerBlock?: PromiseOrValue<BigNumberish> | null,
      operator?: PromiseOrValue<string> | null
    ): RewardPerBlockSetEventFilter;
    RewardPerBlockSet(
      newRewardPerBlock?: PromiseOrValue<BigNumberish> | null,
      operator?: PromiseOrValue<string> | null
    ): RewardPerBlockSetEventFilter;

    "RewardsDeposited(address,uint256,address)"(
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: null,
      operator?: PromiseOrValue<string> | null
    ): RewardsDepositedEventFilter;
    RewardsDeposited(
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: null,
      operator?: PromiseOrValue<string> | null
    ): RewardsDepositedEventFilter;

    "StakeCreated(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      rewardToken?: null,
      stackingToken?: null,
      startsAt?: null,
      lpLockTime?: null,
      lpTotalLimit?: null,
      stakersLimit?: null,
      maxStakePerStaker?: null,
      rewardsPerBlock?: null,
      durationInBlocks?: null
    ): StakeCreatedEventFilter;
    StakeCreated(
      rewardToken?: null,
      stackingToken?: null,
      startsAt?: null,
      lpLockTime?: null,
      lpTotalLimit?: null,
      stakersLimit?: null,
      maxStakePerStaker?: null,
      rewardsPerBlock?: null,
      durationInBlocks?: null
    ): StakeCreatedEventFilter;

    "StakeUpdated(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      startsAt?: null,
      blocksDuration?: null,
      lpLockTime?: null,
      stakersLimit?: null,
      maxStakePerStaker?: null,
      newRewardPerBlock?: PromiseOrValue<BigNumberish> | null,
      operator?: PromiseOrValue<string> | null
    ): StakeUpdatedEventFilter;
    StakeUpdated(
      startsAt?: null,
      blocksDuration?: null,
      lpLockTime?: null,
      stakersLimit?: null,
      maxStakePerStaker?: null,
      newRewardPerBlock?: PromiseOrValue<BigNumberish> | null,
      operator?: PromiseOrValue<string> | null
    ): StakeUpdatedEventFilter;

    "TokenWithdrawed(uint256,address)"(
      amount?: null,
      operator?: PromiseOrValue<string> | null
    ): TokenWithdrawedEventFilter;
    TokenWithdrawed(
      amount?: null,
      operator?: PromiseOrValue<string> | null
    ): TokenWithdrawedEventFilter;

    "TokensStaked(uint256,address)"(
      amount?: null,
      operator?: PromiseOrValue<string> | null
    ): TokensStakedEventFilter;
    TokensStaked(
      amount?: null,
      operator?: PromiseOrValue<string> | null
    ): TokensStakedEventFilter;

    "Withdrawed(uint256,address)"(
      amount?: null,
      operator?: PromiseOrValue<string> | null
    ): WithdrawedEventFilter;
    Withdrawed(
      amount?: null,
      operator?: PromiseOrValue<string> | null
    ): WithdrawedEventFilter;
  };

  estimateGas: {
    BLOCKS_IN_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    earned(
      stakerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdrawal(
      stakerAddress: PromiseOrValue<string>,
      payHarvest: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStakeConditionsInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    setActive(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardPerBlock(
      _newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStake(
      newStartsAt: PromiseOrValue<BigNumberish>,
      newBlocksDuration: PromiseOrValue<BigNumberish>,
      newLpLockTime: PromiseOrValue<BigNumberish>,
      newStakersLimit: PromiseOrValue<BigNumberish>,
      newMaxStakePerStaker: PromiseOrValue<BigNumberish>,
      newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BLOCKS_IN_YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      stakerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawal(
      stakerAddress: PromiseOrValue<string>,
      payHarvest: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStakeConditionsInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setActive(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPerBlock(
      _newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStake(
      newStartsAt: PromiseOrValue<BigNumberish>,
      newBlocksDuration: PromiseOrValue<BigNumberish>,
      newLpLockTime: PromiseOrValue<BigNumberish>,
      newStakersLimit: PromiseOrValue<BigNumberish>,
      newMaxStakePerStaker: PromiseOrValue<BigNumberish>,
      newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
