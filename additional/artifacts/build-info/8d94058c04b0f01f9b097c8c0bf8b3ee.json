{"id":"8d94058c04b0f01f9b097c8c0bf8b3ee","_format":"hh-sol-build-info-1","solcVersion":"0.6.6","solcLongVersion":"0.6.6+commit.6c089d02","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"@openzeppelin/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"contracts/periphery/test/Staking.sol":{"content":"// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.6.6;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\ncontract Staking is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant BLOCKS_IN_YEAR = 2102400; // if one block per 15 seconds\n    mapping(address => Staker) private _stakers;\n\n    address private _rewardToken;\n    address private _stakingToken;\n    uint256 private _startsAt;\n    uint256 private _durationInBlocks;\n    uint256 private _finishBlock;\n    uint256 private _lpLockTime;\n    uint256 private _numberOfStakers;\n    uint256 private _lpTotalAmount;\n    uint256 private _lpTotalLimit;\n    uint256 private _stakersLimit;\n    uint256 private _maxStakePerStaker;\n    uint256 private _rewardsPerBlock;\n    uint256 private _rewardPerTokenStored;\n    uint256 private _lastUpdateBlock;\n    bool private _isActive;\n\n    struct Staker {\n        address stakerAddress;\n        uint256 balance;\n        uint256 rewards;\n        uint256 rewardPerTokenPaid;\n        uint256 startBlock;\n        uint256 startTime;\n    }\n\n    function getUserInfo(address userAddress) external view returns (Staker memory) {\n        return _stakers[userAddress];\n    }\n\n    function getStakeInfo()\n        external\n        view\n        returns (uint256, uint256, address, address, uint256, uint256, uint256, uint256, bool)\n    {\n        return (\n            _startsAt,\n            _finishBlock,\n            _rewardToken,\n            _stakingToken,\n            _lpTotalAmount,\n            _numberOfStakers,\n            _rewardsPerBlock,\n            _lastUpdateBlock,\n            _isActive\n        );\n    }\n\n    function getStakeConditionsInfo() external view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        return (\n            _lpLockTime,\n            _lpTotalLimit,\n            _stakersLimit,\n            _maxStakePerStaker,\n            _rewardPerTokenStored,\n            _durationInBlocks\n        );\n    }\n\n    function getTokenBalance(address token) public view returns (uint256) {\n        if (token == address(0)) {\n            return address(this).balance;\n        } else {\n            return IERC20(token).balanceOf(address(this));\n        }\n    }\n\n    function earned(address stakerAddress) public view returns (uint256) {\n        Staker memory staker = _stakers[stakerAddress];\n        uint256 rewardPerBlockNow = rewardPerToken();\n        return\n            rewardPerBlockNow != 0\n                ? ((staker.balance * (rewardPerBlockNow - staker.rewardPerTokenPaid)) / 1 ether) + staker.rewards\n                : 0 + staker.rewards;\n    }\n\n    event ActiveSet(bool indexed value, address operator);\n    event EmergencyWithdrawals(address indexed stakerAddress, bool payHarvest, address indexed operator);\n    event RewardsDeposited(address indexed tokenAddress, uint256 amount, address indexed operator);\n    event RewardPerBlockSet(uint256 indexed newRewardPerBlock, address indexed operator);\n    event StakeCreated(\n        address rewardToken,\n        address stackingToken,\n        uint256 startsAt,\n        uint256 lpLockTime,\n        uint256 lpTotalLimit,\n        uint256 stakersLimit,\n        uint256 maxStakePerStaker,\n        uint256 rewardsPerBlock,\n        uint256 durationInBlocks\n    );\n    event StakeUpdated(\n        uint256 startsAt,\n        uint256 blocksDuration,\n        uint256 lpLockTime,\n        uint256 stakersLimit,\n        uint256 maxStakePerStaker,\n        uint256 indexed newRewardPerBlock,\n        address indexed operator\n    );\n    event MaxStakePerStakerSet(uint256 newMaxStakePerStaker, address indexed operator);\n    event Withdrawed(uint256 amount, address indexed operator);\n    event TokensStaked(uint256 amount, address indexed operator);\n    event Harvested(uint256 amount, address indexed operator);\n    event TokenWithdrawed(uint256 amount, address indexed operator);\n\n    constructor(\n        address rewardToken,\n        address stackingToken,\n        uint256 startsAt,\n        uint256 durationInBlocks,\n        uint256 lpLockTime,\n        uint256 stakersLimit,\n        uint256 maxStakePerStaker,\n        uint256 lpTotalLimit,\n        uint256 rewardsPerBlock\n    ) public {\n        _rewardToken = rewardToken;\n        _stakingToken = stackingToken;\n        _startsAt = startsAt;\n        _finishBlock = block.number + durationInBlocks;\n        _lpLockTime = lpLockTime;\n        _lpTotalLimit = lpTotalLimit;\n        _stakersLimit = stakersLimit;\n        _maxStakePerStaker = maxStakePerStaker;\n        _rewardsPerBlock = rewardsPerBlock;\n        _durationInBlocks = durationInBlocks;\n        _isActive = true;\n        emit StakeCreated(\n            rewardToken,\n            stackingToken,\n            startsAt,\n            lpLockTime,\n            lpTotalLimit,\n            stakersLimit,\n            maxStakePerStaker,\n            rewardsPerBlock,\n            durationInBlocks\n        );\n    }\n\n    receive() external payable {}\n\n    function emergencyWithdrawal(\n        address stakerAddress,\n        bool payHarvest\n    ) external onlyOwner nonReentrant updateReward(stakerAddress) {\n        Staker storage staker = _stakers[stakerAddress];\n        if (payHarvest) {\n            _withdrawHarvest(staker);\n        }\n        _withdrawLP(staker, staker.balance);\n        emit EmergencyWithdrawals(stakerAddress, payHarvest, _msgSender());\n    }\n\n    /*\n    withdraw only reward\n  */\n    function harvest() external nonReentrant updateReward(_msgSender()) {\n        _withdrawHarvest(_stakers[_msgSender()]);\n    }\n\n    function stakeTokens(uint256 amount) external payable nonReentrant updateReward(_msgSender()) {\n        Staker storage staker = _stakers[_msgSender()];\n        _stake(staker, amount);\n    }\n\n    function setActive(bool value) external onlyOwner {\n        _isActive = value;\n        emit ActiveSet(value, _msgSender());\n    }\n\n    function setRewardPerBlock(uint256 _newRewardPerBlock) public onlyOwner {\n        _rewardsPerBlock = _newRewardPerBlock;\n        emit RewardPerBlockSet(_newRewardPerBlock, _msgSender());\n    }\n\n    function updateStake(\n        uint256 newStartsAt,\n        uint256 newBlocksDuration,\n        uint256 newLpLockTime,\n        uint256 newStakersLimit,\n        uint256 newMaxStakePerStaker,\n        uint256 newRewardPerBlock\n    ) external onlyOwner {\n        if (block.timestamp < _startsAt) {\n            _lpLockTime = newLpLockTime;\n            _startsAt = newStartsAt;\n        }\n        if (block.timestamp < _startsAt || _lpLockTime > newLpLockTime) {\n            _lpLockTime = newLpLockTime;\n        }\n        _finishBlock = block.number + newBlocksDuration;\n        _durationInBlocks = newBlocksDuration;\n        _stakersLimit = newStakersLimit;\n        _maxStakePerStaker = newMaxStakePerStaker;\n        _rewardsPerBlock = newRewardPerBlock;\n        emit StakeUpdated(\n            _startsAt,\n            newBlocksDuration,\n            _lpLockTime,\n            newStakersLimit,\n            newMaxStakePerStaker,\n            newRewardPerBlock,\n            _msgSender()\n        );\n    }\n\n    /**\n     * Dev: withdraw both lp and reward tokens\n     **/\n    function withdraw(uint256 amount) external nonReentrant updateReward(_msgSender()) {\n        Staker storage staker = _stakers[_msgSender()];\n        // _withdrawHarvest(staker);\n        _withdrawLP(staker, amount);\n    }\n\n    /**\n     * Dev: owner or Creator can withdrawal Rewards tokens.\n     **/\n    function withdrawTokens(address token, uint256 amount) external nonReentrant onlyOwner {\n        if (block.number < _finishBlock + BLOCKS_IN_YEAR)\n            require(token != _stakingToken, \"Staking: can not withdraw stacking tokens before lock time\");\n        sendTokens(_msgSender(), token, amount);\n        emit TokenWithdrawed(amount, _msgSender());\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        uint256 lastUpdateBlock = _lastUpdateBlock;\n        uint256 finishBlock = _finishBlock;\n        if (_lpTotalAmount == 0) return 0; // TODO: check with rewardPerTokenStored not 0\n        uint256 lastBlock = block.number > finishBlock ? finishBlock : block.number;\n        uint256 rewardedBlocks = lastUpdateBlock < lastBlock ? lastBlock - lastUpdateBlock : 0;\n        return (_rewardPerTokenStored + ((_rewardsPerBlock * rewardedBlocks * 1 ether) / _lpTotalAmount));\n    }\n\n    function _stake(Staker storage staker, uint256 amount) internal {\n        require(amount > 0, \"Staking: Amount must be greater than zero\");\n        require(_isActive, \"Staking: This stake is inactive or not exist\");\n        require(block.timestamp >= _startsAt, \"Staking: This staking has not started yet\");\n        require(block.number <= _finishBlock, \"Staking: This staking is currently closed\");\n        if (_stakersLimit != 0) require(_numberOfStakers < _stakersLimit, \"Staking: This stake is already full\");\n        if (_lpTotalLimit != 0)\n            require(_lpTotalAmount + amount <= _lpTotalLimit, \"Staking: This stake is already full\");\n        if (_maxStakePerStaker != 0)\n            require(staker.balance + amount <= _maxStakePerStaker, \"Staking: Your total stake size is too big\");\n        _lpTotalAmount += amount;\n        staker.balance += amount;\n        if (_stakingToken == address(0)) {\n            require(msg.value >= amount, \"Staking: Wrong amount\");\n            if (msg.value > amount) sendTokens(_msgSender(), _stakingToken, msg.value - amount);\n        } else {\n            IERC20(_stakingToken).safeTransferFrom(_msgSender(), address(this), amount);\n        }\n        if (staker.startBlock == 0) {\n            _numberOfStakers += 1;\n            staker.startBlock = block.number;\n            staker.startTime = block.timestamp;\n            staker.stakerAddress = _msgSender();\n        }\n        emit TokensStaked(amount, staker.stakerAddress);\n    }\n\n    function _withdrawLP(Staker storage staker, uint256 amount) internal {\n        require(amount <= staker.balance, \"Exceeds balance\");\n        // uint256 amount = staker.balance;\n        require(amount > 0, \"Balance must be greater than zero\");\n        if (_msgSender() != owner()) {\n            require(\n                block.timestamp >= staker.startTime + _lpLockTime || block.number > _finishBlock,\n                \"Staking: Too early for withdraw\"\n            );\n        }\n        _lpTotalAmount -= amount;\n        if (amount == staker.balance) {\n            _numberOfStakers -= 1;\n            staker.startBlock = 0;\n            staker.startTime = 0;\n            staker.balance = 0;\n        } else {\n            staker.balance -= amount;\n        }\n\n        sendTokens(staker.stakerAddress, _stakingToken, amount);\n        emit Withdrawed(amount, staker.stakerAddress);\n    }\n\n    function _withdrawHarvest(Staker storage staker) internal {\n        require(staker.startBlock != 0, \"Staking: You are not a staker\");\n        uint256 reward = staker.rewards;\n        if (reward > 0) {\n            staker.rewards = 0;\n            staker.startBlock = block.number;\n            sendTokens(staker.stakerAddress, _rewardToken, reward);\n        }\n        emit Harvested(reward, staker.stakerAddress);\n    }\n\n    modifier updateReward(address stakerAddress) {\n        Staker storage staker = _stakers[stakerAddress];\n        _rewardPerTokenStored = rewardPerToken();\n        _lastUpdateBlock = block.number < _finishBlock ? block.number : _finishBlock;\n        staker.rewards = earned(stakerAddress);\n        staker.rewardPerTokenPaid = _rewardPerTokenStored;\n        _;\n    }\n\n    /**\n     * @dev Function is used to transfer native tokens from contract.\n     *\n     * @param to is address of recipient.\n     * @param amount of native tokens to transfer.\n     **/\n    function sendTokens(address to, address token, uint256 amount) private returns (bool) {\n        require(getTokenBalance(token) >= amount, \"Staking: not enough tokens\");\n        if (token == address(0)) {\n            (bool sent, ) = payable(to).call{value: amount}(\"\");\n            require(sent, \"GameStake: failed to send Tokens\");\n            return true;\n        } else {\n            IERC20(token).safeTransfer(_msgSender(), amount);\n            return true;\n        }\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":2000},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Ownable":[109]},"id":110,"nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nodeType":"ImportDirective","scope":110,"sourceUnit":1075,"src":"66:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":4,"name":"Context","nodeType":"UserDefinedTypeName","referencedDeclaration":1074,"src":"621:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$1074","typeString":"contract Context"}},"id":5,"nodeType":"InheritanceSpecifier","src":"621:7:0"}],"contractDependencies":[1074],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"97:494:0","text":"@dev Contract module which provides a basic access control mechanism, where\nthere is an account (an owner) that can be granted exclusive access to\nspecific functions.\n * By default, the owner account will be the one that deploys the contract. This\ncan later be changed with {transferOwnership}.\n * This module is used through inheritance. It will make available the modifier\n`onlyOwner`, which can be applied to your functions to restrict their use to\nthe owner."},"fullyImplemented":true,"id":109,"linearizedBaseContracts":[109,1074],"name":"Ownable","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nodeType":"VariableDeclaration","overrides":null,"scope":109,"src":"635:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"private"},{"anonymous":false,"documentation":null,"id":13,"name":"OwnershipTransferred","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nodeType":"VariableDeclaration","overrides":null,"scope":13,"src":"691:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"691:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":13,"src":"722:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"722:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"690:57:0"},"src":"664:84:0"},{"body":{"id":34,"nodeType":"Block","src":"874:135:0","statements":[{"assignments":[18],"declarations":[{"constant":false,"id":18,"mutability":"mutable","name":"msgSender","nodeType":"VariableDeclaration","overrides":null,"scope":34,"src":"884:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":17,"name":"address","nodeType":"ElementaryTypeName","src":"884:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":21,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":19,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"904:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"904:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"884:32:0"},{"expression":{"argumentTypes":null,"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":22,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"926:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":23,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"935:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"926:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":25,"nodeType":"ExpressionStatement","src":"926:18:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":29,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"988:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":28,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"980:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":27,"name":"address","nodeType":"ElementaryTypeName","src":"980:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":30,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"980:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":31,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"992:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"}],"id":26,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"959:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":32,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"959:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":33,"nodeType":"EmitStatement","src":"954:48:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"754:91:0","text":"@dev Initializes the contract setting the deployer as the initial owner."},"id":35,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"862:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"874:0:0"},"scope":109,"src":"850:159:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":43,"nodeType":"Block","src":"1140:30:0","statements":[{"expression":{"argumentTypes":null,"id":41,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1157:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":40,"id":42,"nodeType":"Return","src":"1150:13:0"}]},"documentation":{"id":36,"nodeType":"StructuredDocumentation","src":"1015:65:0","text":"@dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":44,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"1099:2:0"},"returnParameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":39,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":44,"src":"1131:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":38,"name":"address","nodeType":"ElementaryTypeName","src":"1131:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1130:9:0"},"scope":109,"src":"1085:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":57,"nodeType":"Block","src":"1279:96:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":48,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"1297:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1297:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":50,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"1308:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1308:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1297:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":53,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1322:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":47,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1289:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1289:68:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1367:1:0"}]},"documentation":{"id":45,"nodeType":"StructuredDocumentation","src":"1176:77:0","text":"@dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nodeType":"ModifierDefinition","overrides":null,"parameters":{"id":46,"nodeType":"ParameterList","parameters":[],"src":"1276:2:0"},"src":"1258:117:0","virtual":false,"visibility":"internal"},{"body":{"id":79,"nodeType":"Block","src":"1771:91:0","statements":[{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":65,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1807:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":68,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1823:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":67,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1815:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":66,"name":"address","nodeType":"ElementaryTypeName","src":"1815:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":69,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1815:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":64,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1786:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1786:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":71,"nodeType":"EmitStatement","src":"1781:45:0"},{"expression":{"argumentTypes":null,"id":77,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":72,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1836:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":75,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1853:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":74,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1845:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":73,"name":"address","nodeType":"ElementaryTypeName","src":"1845:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":76,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1845:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1836:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":78,"nodeType":"ExpressionStatement","src":"1836:19:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1381:331:0","text":"@dev Leaves the contract without owner. It will not be possible to call\n`onlyOwner` functions anymore. Can only be called by the current owner.\n     * NOTE: Renouncing ownership will leave the contract without an owner,\nthereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":80,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":62,"modifierName":{"argumentTypes":null,"id":61,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1761:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"1761:9:0"}],"name":"renounceOwnership","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1743:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[],"src":"1771:0:0"},"scope":109,"src":"1717:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":107,"nodeType":"Block","src":"2081:170:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":89,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"2099:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":92,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2119:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":91,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2111:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":90,"name":"address","nodeType":"ElementaryTypeName","src":"2111:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2111:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2099:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2123:40:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":88,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2091:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2091:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":97,"nodeType":"ExpressionStatement","src":"2091:73:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2200:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":100,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"2208:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":98,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2179:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2179:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":102,"nodeType":"EmitStatement","src":"2174:43:0"},{"expression":{"argumentTypes":null,"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":103,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2227:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":104,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"2236:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2227:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":106,"nodeType":"ExpressionStatement","src":"2227:17:0"}]},"documentation":{"id":81,"nodeType":"StructuredDocumentation","src":"1868:138:0","text":"@dev Transfers ownership of the contract to a new account (`newOwner`).\nCan only be called by the current owner."},"functionSelector":"f2fde38b","id":108,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":86,"modifierName":{"argumentTypes":null,"id":85,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"2071:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"2071:9:0"}],"name":"transferOwnership","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":108,"src":"2038:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":82,"name":"address","nodeType":"ElementaryTypeName","src":"2038:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"2037:18:0"},"returnParameters":{"id":87,"nodeType":"ParameterList","parameters":[],"src":"2081:0:0"},"scope":109,"src":"2011:240:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":110,"src":"592:1661:0"}],"src":"33:2221:0"},"id":0},"@openzeppelin/contracts/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/math/SafeMath.sol","exportedSymbols":{"SafeMath":[464]},"id":465,"nodeType":"SourceUnit","nodes":[{"id":111,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":112,"nodeType":"StructuredDocumentation","src":"66:563:1","text":"@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":464,"linearizedBaseContracts":[464],"name":"SafeMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":142,"nodeType":"Block","src":"865:98:1","statements":[{"assignments":[125],"declarations":[{"constant":false,"id":125,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":142,"src":"875:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":124,"name":"uint256","nodeType":"ElementaryTypeName","src":"875:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":129,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":126,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"887:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":127,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"891:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"887:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"875:17:1"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":130,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"906:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":131,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"910:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"906:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":137,"nodeType":"IfStatement","src":"902:28:1","trueBody":{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"66616c7365","id":133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"921:5:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"argumentTypes":null,"hexValue":"30","id":134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"928:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":135,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"920:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":123,"id":136,"nodeType":"Return","src":"913:17:1"}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"74727565","id":138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"948:4:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"argumentTypes":null,"id":139,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"954:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":140,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"947:9:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":123,"id":141,"nodeType":"Return","src":"940:16:1"}]},"documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"653:131:1","text":"@dev Returns the addition of two unsigned integers, with an overflow flag.\n     * _Available since v3.4._"},"id":143,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":115,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":143,"src":"805:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":114,"name":"uint256","nodeType":"ElementaryTypeName","src":"805:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":117,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":143,"src":"816:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":116,"name":"uint256","nodeType":"ElementaryTypeName","src":"816:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"804:22:1"},"returnParameters":{"id":123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":143,"src":"850:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":119,"name":"bool","nodeType":"ElementaryTypeName","src":"850:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":122,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":143,"src":"856:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":121,"name":"uint256","nodeType":"ElementaryTypeName","src":"856:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"849:15:1"},"scope":464,"src":"789:174:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":169,"nodeType":"Block","src":"1185:75:1","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":155,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"1199:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"id":156,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1203:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1199:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":162,"nodeType":"IfStatement","src":"1195:28:1","trueBody":{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"66616c7365","id":158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1214:5:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"argumentTypes":null,"hexValue":"30","id":159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1221:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":160,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1213:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":154,"id":161,"nodeType":"Return","src":"1206:17:1"}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"74727565","id":163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1241:4:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":164,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1247:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":165,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"1251:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1247:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":167,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1240:13:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":154,"id":168,"nodeType":"Return","src":"1233:20:1"}]},"documentation":{"id":144,"nodeType":"StructuredDocumentation","src":"969:135:1","text":"@dev Returns the substraction of two unsigned integers, with an overflow flag.\n     * _Available since v3.4._"},"id":170,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":146,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":170,"src":"1125:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":145,"name":"uint256","nodeType":"ElementaryTypeName","src":"1125:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":148,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":170,"src":"1136:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":147,"name":"uint256","nodeType":"ElementaryTypeName","src":"1136:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1124:22:1"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":170,"src":"1170:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":150,"name":"bool","nodeType":"ElementaryTypeName","src":"1170:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":170,"src":"1176:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":152,"name":"uint256","nodeType":"ElementaryTypeName","src":"1176:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1169:15:1"},"scope":464,"src":"1109:151:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":210,"nodeType":"Block","src":"1484:359:1","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":182,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"1716:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1716:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":189,"nodeType":"IfStatement","src":"1712:28:1","trueBody":{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"74727565","id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1732:4:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"argumentTypes":null,"hexValue":"30","id":186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1738:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":187,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1731:9:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":181,"id":188,"nodeType":"Return","src":"1724:16:1"}},{"assignments":[191],"declarations":[{"constant":false,"id":191,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":210,"src":"1750:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":190,"name":"uint256","nodeType":"ElementaryTypeName","src":"1750:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":195,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":192,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"1762:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"id":193,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"1766:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1762:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1750:17:1"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":196,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"1781:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":197,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"1785:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":199,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"1790:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":205,"nodeType":"IfStatement","src":"1777:33:1","trueBody":{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"66616c7365","id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1801:5:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"argumentTypes":null,"hexValue":"30","id":202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":203,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1800:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":181,"id":204,"nodeType":"Return","src":"1793:17:1"}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"74727565","id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1828:4:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"argumentTypes":null,"id":207,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"1834:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":208,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1827:9:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":181,"id":209,"nodeType":"Return","src":"1820:16:1"}]},"documentation":{"id":171,"nodeType":"StructuredDocumentation","src":"1266:137:1","text":"@dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     * _Available since v3.4._"},"id":211,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":211,"src":"1424:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":172,"name":"uint256","nodeType":"ElementaryTypeName","src":"1424:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":175,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":211,"src":"1435:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1435:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1423:22:1"},"returnParameters":{"id":181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":211,"src":"1469:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":177,"name":"bool","nodeType":"ElementaryTypeName","src":"1469:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":180,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":211,"src":"1475:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":179,"name":"uint256","nodeType":"ElementaryTypeName","src":"1475:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1468:15:1"},"scope":464,"src":"1408:435:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":237,"nodeType":"Block","src":"2068:76:1","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":223,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"2082:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2087:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2082:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":230,"nodeType":"IfStatement","src":"2078:29:1","trueBody":{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"66616c7365","id":226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2098:5:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"argumentTypes":null,"hexValue":"30","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2105:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":228,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2097:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":222,"id":229,"nodeType":"Return","src":"2090:17:1"}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"74727565","id":231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2125:4:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":232,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"2131:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":233,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"2135:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2131:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":235,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2124:13:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":222,"id":236,"nodeType":"Return","src":"2117:20:1"}]},"documentation":{"id":212,"nodeType":"StructuredDocumentation","src":"1849:138:1","text":"@dev Returns the division of two unsigned integers, with a division by zero flag.\n     * _Available since v3.4._"},"id":238,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":214,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":238,"src":"2008:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":213,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":216,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":238,"src":"2019:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":215,"name":"uint256","nodeType":"ElementaryTypeName","src":"2019:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2007:22:1"},"returnParameters":{"id":222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":238,"src":"2053:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":218,"name":"bool","nodeType":"ElementaryTypeName","src":"2053:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":221,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":238,"src":"2059:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":220,"name":"uint256","nodeType":"ElementaryTypeName","src":"2059:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2052:15:1"},"scope":464,"src":"1992:152:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":264,"nodeType":"Block","src":"2379:76:1","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":250,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"2393:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2398:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2393:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":257,"nodeType":"IfStatement","src":"2389:29:1","trueBody":{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"66616c7365","id":253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2409:5:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"argumentTypes":null,"hexValue":"30","id":254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2416:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":255,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2408:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":249,"id":256,"nodeType":"Return","src":"2401:17:1"}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"74727565","id":258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2436:4:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":259,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"2442:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"argumentTypes":null,"id":260,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"2446:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2442:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":262,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2435:13:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":249,"id":263,"nodeType":"Return","src":"2428:20:1"}]},"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"2150:148:1","text":"@dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     * _Available since v3.4._"},"id":265,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":265,"src":"2319:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":240,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":265,"src":"2330:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":242,"name":"uint256","nodeType":"ElementaryTypeName","src":"2330:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2318:22:1"},"returnParameters":{"id":249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":246,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":265,"src":"2364:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":245,"name":"bool","nodeType":"ElementaryTypeName","src":"2364:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":248,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":265,"src":"2370:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":247,"name":"uint256","nodeType":"ElementaryTypeName","src":"2370:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2363:15:1"},"scope":464,"src":"2303:152:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"2757:108:1","statements":[{"assignments":[276],"declarations":[{"constant":false,"id":276,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":290,"src":"2767:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":275,"name":"uint256","nodeType":"ElementaryTypeName","src":"2767:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":280,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":277,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":268,"src":"2779:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":278,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"2783:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2779:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2767:17:1"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":282,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"2802:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":283,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":268,"src":"2807:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2802:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206164646974696f6e206f766572666c6f77","id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2810:29:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""},"value":"SafeMath: addition overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"id":281,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2794:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2794:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"ExpressionStatement","src":"2794:46:1"},{"expression":{"argumentTypes":null,"id":288,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"2857:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":274,"id":289,"nodeType":"Return","src":"2850:8:1"}]},"documentation":{"id":266,"nodeType":"StructuredDocumentation","src":"2461:224:1","text":"@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n     * - Addition cannot overflow."},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":268,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":291,"src":"2703:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":267,"name":"uint256","nodeType":"ElementaryTypeName","src":"2703:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":270,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":291,"src":"2714:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":269,"name":"uint256","nodeType":"ElementaryTypeName","src":"2714:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2702:22:1"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":273,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":291,"src":"2748:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":272,"name":"uint256","nodeType":"ElementaryTypeName","src":"2748:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2747:9:1"},"scope":464,"src":"2690:175:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":312,"nodeType":"Block","src":"3203:88:1","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":302,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"3221:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":303,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"3226:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3221:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","id":305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3229:32:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""},"value":"SafeMath: subtraction overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"id":301,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3213:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3213:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":307,"nodeType":"ExpressionStatement","src":"3213:49:1"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":308,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"3279:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":309,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"3283:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3279:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":300,"id":311,"nodeType":"Return","src":"3272:12:1"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"2871:260:1","text":"@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n     * - Subtraction cannot overflow."},"id":313,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":313,"src":"3149:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":293,"name":"uint256","nodeType":"ElementaryTypeName","src":"3149:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":296,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":313,"src":"3160:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"3160:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3148:22:1"},"returnParameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":313,"src":"3194:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":298,"name":"uint256","nodeType":"ElementaryTypeName","src":"3194:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3193:9:1"},"scope":464,"src":"3136:155:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":346,"nodeType":"Block","src":"3605:148:1","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":323,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"3619:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3624:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3619:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":328,"nodeType":"IfStatement","src":"3615:20:1","trueBody":{"expression":{"argumentTypes":null,"hexValue":"30","id":326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3634:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":322,"id":327,"nodeType":"Return","src":"3627:8:1"}},{"assignments":[330],"declarations":[{"constant":false,"id":330,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":346,"src":"3645:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":329,"name":"uint256","nodeType":"ElementaryTypeName","src":"3645:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":334,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":331,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"3657:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"id":332,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"3661:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3657:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3645:17:1"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":336,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"3680:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":337,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"3684:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3680:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":339,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"3689:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3680:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","id":341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3692:35:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""},"value":"SafeMath: multiplication overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"id":335,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3672:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3672:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":343,"nodeType":"ExpressionStatement","src":"3672:56:1"},{"expression":{"argumentTypes":null,"id":344,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"3745:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":322,"id":345,"nodeType":"Return","src":"3738:8:1"}]},"documentation":{"id":314,"nodeType":"StructuredDocumentation","src":"3297:236:1","text":"@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n     * - Multiplication cannot overflow."},"id":347,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":347,"src":"3551:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":315,"name":"uint256","nodeType":"ElementaryTypeName","src":"3551:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":318,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":347,"src":"3562:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":317,"name":"uint256","nodeType":"ElementaryTypeName","src":"3562:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3550:22:1"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":347,"src":"3596:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":320,"name":"uint256","nodeType":"ElementaryTypeName","src":"3596:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3595:9:1"},"scope":464,"src":"3538:215:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":368,"nodeType":"Block","src":"4284:83:1","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":358,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"4302:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4302:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206469766973696f6e206279207a65726f","id":361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4309:28:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""},"value":"SafeMath: division by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"id":357,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4294:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4294:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":363,"nodeType":"ExpressionStatement","src":"4294:44:1"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":364,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"4355:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":365,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"4359:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4355:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":356,"id":367,"nodeType":"Return","src":"4348:12:1"}]},"documentation":{"id":348,"nodeType":"StructuredDocumentation","src":"3759:453:1","text":"@dev Returns the integer division of two unsigned integers, reverting on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero."},"id":369,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":369,"src":"4230:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":349,"name":"uint256","nodeType":"ElementaryTypeName","src":"4230:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":352,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":369,"src":"4241:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":351,"name":"uint256","nodeType":"ElementaryTypeName","src":"4241:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4229:22:1"},"returnParameters":{"id":356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":355,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":369,"src":"4275:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":354,"name":"uint256","nodeType":"ElementaryTypeName","src":"4275:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4274:9:1"},"scope":464,"src":"4217:150:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":390,"nodeType":"Block","src":"4887:81:1","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":380,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":374,"src":"4905:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4909:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4905:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"536166654d6174683a206d6f64756c6f206279207a65726f","id":383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:26:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""},"value":"SafeMath: modulo by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"id":379,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4897:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4897:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":385,"nodeType":"ExpressionStatement","src":"4897:42:1"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":386,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4956:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"argumentTypes":null,"id":387,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":374,"src":"4960:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4956:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":378,"id":389,"nodeType":"Return","src":"4949:12:1"}]},"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"4373:442:1","text":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nreverting when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero."},"id":391,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":391,"src":"4833:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint256","nodeType":"ElementaryTypeName","src":"4833:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":391,"src":"4844:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":373,"name":"uint256","nodeType":"ElementaryTypeName","src":"4844:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4832:22:1"},"returnParameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":391,"src":"4878:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":376,"name":"uint256","nodeType":"ElementaryTypeName","src":"4878:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4877:9:1"},"scope":464,"src":"4820:148:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":414,"nodeType":"Block","src":"5527:68:1","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":404,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":396,"src":"5545:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":405,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"5550:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5545:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":407,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":398,"src":"5553:12:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":403,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5537:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5537:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":409,"nodeType":"ExpressionStatement","src":"5537:29:1"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":410,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"5583:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":411,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":396,"src":"5587:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5583:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":402,"id":413,"nodeType":"Return","src":"5576:12:1"}]},"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"4974:453:1","text":"@dev Returns the subtraction of two unsigned integers, reverting with custom message on\noverflow (when the result is negative).\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\nmessage unnecessarily. For custom revert reasons use {trySub}.\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n     * - Subtraction cannot overflow."},"id":415,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":415,"src":"5445:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":393,"name":"uint256","nodeType":"ElementaryTypeName","src":"5445:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":415,"src":"5456:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":395,"name":"uint256","nodeType":"ElementaryTypeName","src":"5456:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":398,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","overrides":null,"scope":415,"src":"5467:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":397,"name":"string","nodeType":"ElementaryTypeName","src":"5467:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"5444:50:1"},"returnParameters":{"id":402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":401,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":415,"src":"5518:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":400,"name":"uint256","nodeType":"ElementaryTypeName","src":"5518:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5517:9:1"},"scope":464,"src":"5432:163:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":438,"nodeType":"Block","src":"6347:67:1","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":428,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"6365:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6369:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6365:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":431,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"6372:12:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":427,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6357:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6357:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":433,"nodeType":"ExpressionStatement","src":"6357:28:1"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":434,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6402:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":435,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"6406:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6402:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":426,"id":437,"nodeType":"Return","src":"6395:12:1"}]},"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"5601:646:1","text":"@dev Returns the integer division of two unsigned integers, reverting with custom message on\ndivision by zero. The result is rounded towards zero.\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\nmessage unnecessarily. For custom revert reasons use {tryDiv}.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero."},"id":439,"implemented":true,"kind":"function","modifiers":[],"name":"div","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":418,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":439,"src":"6265:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":417,"name":"uint256","nodeType":"ElementaryTypeName","src":"6265:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":439,"src":"6276:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":419,"name":"uint256","nodeType":"ElementaryTypeName","src":"6276:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":422,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","overrides":null,"scope":439,"src":"6287:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":421,"name":"string","nodeType":"ElementaryTypeName","src":"6287:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"6264:50:1"},"returnParameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":439,"src":"6338:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":424,"name":"uint256","nodeType":"ElementaryTypeName","src":"6338:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6337:9:1"},"scope":464,"src":"6252:162:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":462,"nodeType":"Block","src":"7155:67:1","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":452,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"7173:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7177:1:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7173:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":455,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"7180:12:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":451,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7165:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7165:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"7165:28:1"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":458,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"7210:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"argumentTypes":null,"id":459,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"7214:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7210:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":450,"id":461,"nodeType":"Return","src":"7203:12:1"}]},"documentation":{"id":440,"nodeType":"StructuredDocumentation","src":"6420:635:1","text":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nreverting with custom message when dividing by zero.\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\nmessage unnecessarily. For custom revert reasons use {tryMod}.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero."},"id":463,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":463,"src":"7073:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":441,"name":"uint256","nodeType":"ElementaryTypeName","src":"7073:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":444,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":463,"src":"7084:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":443,"name":"uint256","nodeType":"ElementaryTypeName","src":"7084:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":446,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","overrides":null,"scope":463,"src":"7095:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":445,"name":"string","nodeType":"ElementaryTypeName","src":"7095:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"7072:50:1"},"returnParameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":463,"src":"7146:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":448,"name":"uint256","nodeType":"ElementaryTypeName","src":"7146:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7145:9:1"},"scope":464,"src":"7060:162:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":465,"src":"630:6594:1"}],"src":"33:7192:1"},"id":1},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[542]},"id":543,"nodeType":"SourceUnit","nodes":[{"id":466,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":467,"nodeType":"StructuredDocumentation","src":"66:70:2","text":"@dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":542,"linearizedBaseContracts":[542],"name":"IERC20","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":{"id":468,"nodeType":"StructuredDocumentation","src":"160:66:2","text":"@dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":473,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":469,"nodeType":"ParameterList","parameters":[],"src":"251:2:2"},"returnParameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":473,"src":"277:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":470,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"276:9:2"},"scope":542,"src":"231:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":{"id":474,"nodeType":"StructuredDocumentation","src":"292:72:2","text":"@dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":481,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":476,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","overrides":null,"scope":481,"src":"388:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":475,"name":"address","nodeType":"ElementaryTypeName","src":"388:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"387:17:2"},"returnParameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":481,"src":"428:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":478,"name":"uint256","nodeType":"ElementaryTypeName","src":"428:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"427:9:2"},"scope":542,"src":"369:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":{"id":482,"nodeType":"StructuredDocumentation","src":"443:209:2","text":"@dev Moves `amount` tokens from the caller's account to `recipient`.\n     * Returns a boolean value indicating whether the operation succeeded.\n     * Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":491,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","overrides":null,"scope":491,"src":"675:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":483,"name":"address","nodeType":"ElementaryTypeName","src":"675:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":486,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":491,"src":"694:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":485,"name":"uint256","nodeType":"ElementaryTypeName","src":"694:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"674:35:2"},"returnParameters":{"id":490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":491,"src":"728:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":488,"name":"bool","nodeType":"ElementaryTypeName","src":"728:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"727:6:2"},"scope":542,"src":"657:77:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":{"id":492,"nodeType":"StructuredDocumentation","src":"740:264:2","text":"@dev Returns the remaining number of tokens that `spender` will be\nallowed to spend on behalf of `owner` through {transferFrom}. This is\nzero by default.\n     * This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":501,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":501,"src":"1028:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":493,"name":"address","nodeType":"ElementaryTypeName","src":"1028:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":496,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":501,"src":"1043:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":495,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1027:32:2"},"returnParameters":{"id":500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":501,"src":"1083:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":498,"name":"uint256","nodeType":"ElementaryTypeName","src":"1083:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1082:9:2"},"scope":542,"src":"1009:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":{"id":502,"nodeType":"StructuredDocumentation","src":"1098:642:2","text":"@dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     * Returns a boolean value indicating whether the operation succeeded.\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\nthat someone may use both the old and the new allowance by unfortunate\ntransaction ordering. One possible solution to mitigate this race\ncondition is to first reduce the spender's allowance to 0 and set the\ndesired value afterwards:\nhttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * Emits an {Approval} event."},"functionSelector":"095ea7b3","id":511,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":504,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":511,"src":"1762:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":503,"name":"address","nodeType":"ElementaryTypeName","src":"1762:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":506,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":511,"src":"1779:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":505,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1761:33:2"},"returnParameters":{"id":510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":509,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":511,"src":"1813:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":508,"name":"bool","nodeType":"ElementaryTypeName","src":"1813:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"1812:6:2"},"scope":542,"src":"1745:74:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":{"id":512,"nodeType":"StructuredDocumentation","src":"1825:296:2","text":"@dev Moves `amount` tokens from `sender` to `recipient` using the\nallowance mechanism. `amount` is then deducted from the caller's\nallowance.\n     * Returns a boolean value indicating whether the operation succeeded.\n     * Emits a {Transfer} event."},"functionSelector":"23b872dd","id":523,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":514,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","overrides":null,"scope":523,"src":"2148:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":513,"name":"address","nodeType":"ElementaryTypeName","src":"2148:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":516,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","overrides":null,"scope":523,"src":"2164:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":515,"name":"address","nodeType":"ElementaryTypeName","src":"2164:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":518,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":523,"src":"2183:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":517,"name":"uint256","nodeType":"ElementaryTypeName","src":"2183:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2147:51:2"},"returnParameters":{"id":522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":521,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":523,"src":"2217:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":520,"name":"bool","nodeType":"ElementaryTypeName","src":"2217:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"2216:6:2"},"scope":542,"src":"2126:97:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":524,"nodeType":"StructuredDocumentation","src":"2229:158:2","text":"@dev Emitted when `value` tokens are moved from one account (`from`) to\nanother (`to`).\n     * Note that `value` may be zero."},"id":532,"name":"Transfer","nodeType":"EventDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":526,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":532,"src":"2407:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":525,"name":"address","nodeType":"ElementaryTypeName","src":"2407:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":528,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":532,"src":"2429:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":527,"name":"address","nodeType":"ElementaryTypeName","src":"2429:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":530,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":532,"src":"2449:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"2449:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2406:57:2"},"src":"2392:72:2"},{"anonymous":false,"documentation":{"id":533,"nodeType":"StructuredDocumentation","src":"2470:148:2","text":"@dev Emitted when the allowance of a `spender` for an `owner` is set by\na call to {approve}. `value` is the new allowance."},"id":541,"name":"Approval","nodeType":"EventDefinition","parameters":{"id":540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":535,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":541,"src":"2638:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":534,"name":"address","nodeType":"ElementaryTypeName","src":"2638:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":537,"indexed":true,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":541,"src":"2661:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"2661:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":539,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":541,"src":"2686:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":538,"name":"uint256","nodeType":"ElementaryTypeName","src":"2686:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2637:63:2"},"src":"2623:78:2"}],"scope":543,"src":"137:2566:2"}],"src":"33:2671:2"},"id":2},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","exportedSymbols":{"SafeERC20":[755]},"id":756,"nodeType":"SourceUnit","nodes":[{"id":544,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":545,"nodeType":"ImportDirective","scope":756,"sourceUnit":543,"src":"66:22:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/math/SafeMath.sol","file":"../../math/SafeMath.sol","id":546,"nodeType":"ImportDirective","scope":756,"sourceUnit":465,"src":"89:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":547,"nodeType":"ImportDirective","scope":756,"sourceUnit":1052,"src":"123:33:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":548,"nodeType":"StructuredDocumentation","src":"158:457:3","text":"@title SafeERC20\n@dev Wrappers around ERC20 operations that throw on failure (when the token\ncontract returns false). Tokens that return no value (and instead revert or\nthrow on failure) are also supported, non-reverting calls are assumed to be\nsuccessful.\nTo use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\nwhich allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":755,"linearizedBaseContracts":[755],"name":"SafeERC20","nodeType":"ContractDefinition","nodes":[{"id":551,"libraryName":{"contractScope":null,"id":549,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":464,"src":"646:8:3","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$464","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"640:27:3","typeName":{"id":550,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":554,"libraryName":{"contractScope":null,"id":552,"name":"Address","nodeType":"UserDefinedTypeName","referencedDeclaration":1051,"src":"678:7:3","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1051","typeString":"library Address"}},"nodeType":"UsingForDirective","src":"672:26:3","typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"690:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":575,"nodeType":"Block","src":"776:103:3","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":564,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"806:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":567,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"836:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":491,"src":"836:14:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"836:23:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"argumentTypes":null,"id":570,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"861:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"865:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":565,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"813:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"813:22:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"813:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":563,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"786:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"786:86:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":574,"nodeType":"ExpressionStatement","src":"786:86:3"}]},"documentation":null,"id":576,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":556,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":576,"src":"726:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":555,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":542,"src":"726:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":576,"src":"740:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":557,"name":"address","nodeType":"ElementaryTypeName","src":"740:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":560,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":576,"src":"752:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":559,"name":"uint256","nodeType":"ElementaryTypeName","src":"752:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"725:41:3"},"returnParameters":{"id":562,"nodeType":"ParameterList","parameters":[],"src":"776:0:3"},"scope":755,"src":"704:175:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":600,"nodeType":"Block","src":"975:113:3","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":588,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"1005:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":591,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"1035:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":523,"src":"1035:18:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1035:27:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"argumentTypes":null,"id":594,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"1064:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":595,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"1070:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":596,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"1074:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":589,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1012:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1012:22:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1012:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":587,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"985:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"985:96:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":599,"nodeType":"ExpressionStatement","src":"985:96:3"}]},"documentation":null,"id":601,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":578,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":601,"src":"911:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":577,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":542,"src":"911:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":580,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":601,"src":"925:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":579,"name":"address","nodeType":"ElementaryTypeName","src":"925:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":582,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":601,"src":"939:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":581,"name":"address","nodeType":"ElementaryTypeName","src":"939:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":584,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":601,"src":"951:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"951:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"910:55:3"},"returnParameters":{"id":586,"nodeType":"ParameterList","parameters":[],"src":"975:0:3"},"scope":755,"src":"885:203:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":643,"nodeType":"Block","src":"1424:537:3","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"1713:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1722:1:3","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":615,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1712:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":620,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1753:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$755","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$755","typeString":"library SafeERC20"}],"id":619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1745:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":618,"name":"address","nodeType":"ElementaryTypeName","src":"1745:7:3","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1745:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":622,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"1760:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":616,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1729:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":501,"src":"1729:15:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1729:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1772:1:3","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1729:44:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":626,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1728:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1712:62:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1788:56:3","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":611,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1704:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1704:150:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":630,"nodeType":"ExpressionStatement","src":"1704:150:3"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":632,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1884:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":635,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1914:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":511,"src":"1914:13:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1914:22:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"argumentTypes":null,"id":638,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"1938:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":639,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"1947:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":633,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1891:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":634,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1891:22:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1891:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":631,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"1864:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1864:90:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":642,"nodeType":"ExpressionStatement","src":"1864:90:3"}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"1094:249:3","text":"@dev Deprecated. This function has issues similar to the ones found in\n{IERC20-approve}, and its usage is discouraged.\n     * Whenever possible, use {safeIncreaseAllowance} and\n{safeDecreaseAllowance} instead."},"id":644,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":644,"src":"1369:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":603,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":542,"src":"1369:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":644,"src":"1383:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"1383:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":608,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":644,"src":"1400:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":607,"name":"uint256","nodeType":"ElementaryTypeName","src":"1400:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1368:46:3"},"returnParameters":{"id":610,"nodeType":"ParameterList","parameters":[],"src":"1424:0:3"},"scope":755,"src":"1348:613:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":679,"nodeType":"Block","src":"2053:197:3","statements":[{"assignments":[654],"declarations":[{"constant":false,"id":654,"mutability":"mutable","name":"newAllowance","nodeType":"VariableDeclaration","overrides":null,"scope":679,"src":"2063:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":653,"name":"uint256","nodeType":"ElementaryTypeName","src":"2063:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":666,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":664,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"2130:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":659,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2110:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$755","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$755","typeString":"library SafeERC20"}],"id":658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2102:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":657,"name":"address","nodeType":"ElementaryTypeName","src":"2102:7:3","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2102:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":661,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"2117:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":655,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2086:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":501,"src":"2086:15:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2086:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":291,"src":"2086:43:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2086:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2063:73:3"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":668,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2166:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":671,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2196:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":511,"src":"2196:13:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2196:22:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"argumentTypes":null,"id":674,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"2220:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":675,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"2229:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":669,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2173:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2173:22:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2173:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":667,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"2146:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2146:97:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":678,"nodeType":"ExpressionStatement","src":"2146:97:3"}]},"documentation":null,"id":680,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":646,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":680,"src":"1998:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":645,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":542,"src":"1998:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":648,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":680,"src":"2012:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":647,"name":"address","nodeType":"ElementaryTypeName","src":"2012:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":650,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":680,"src":"2029:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":649,"name":"uint256","nodeType":"ElementaryTypeName","src":"2029:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1997:46:3"},"returnParameters":{"id":652,"nodeType":"ParameterList","parameters":[],"src":"2053:0:3"},"scope":755,"src":"1967:283:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":716,"nodeType":"Block","src":"2342:242:3","statements":[{"assignments":[690],"declarations":[{"constant":false,"id":690,"mutability":"mutable","name":"newAllowance","nodeType":"VariableDeclaration","overrides":null,"scope":716,"src":"2352:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":689,"name":"uint256","nodeType":"ElementaryTypeName","src":"2352:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":703,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":700,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"2419:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:43:3","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":695,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2399:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$755","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$755","typeString":"library SafeERC20"}],"id":694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2391:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":693,"name":"address","nodeType":"ElementaryTypeName","src":"2391:7:3","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2391:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":697,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"2406:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":691,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"2375:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":501,"src":"2375:15:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2375:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":415,"src":"2375:43:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2375:95:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2352:118:3"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":705,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"2500:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":708,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"2530:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":511,"src":"2530:13:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2530:22:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"argumentTypes":null,"id":711,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"2554:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":712,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"2563:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":706,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2507:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2507:22:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2507:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":704,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"2480:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2480:97:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":715,"nodeType":"ExpressionStatement","src":"2480:97:3"}]},"documentation":null,"id":717,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":717,"src":"2287:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":681,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":542,"src":"2287:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":717,"src":"2301:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":683,"name":"address","nodeType":"ElementaryTypeName","src":"2301:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":717,"src":"2318:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":685,"name":"uint256","nodeType":"ElementaryTypeName","src":"2318:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2286:46:3"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[],"src":"2342:0:3"},"scope":755,"src":"2256:328:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":753,"nodeType":"Block","src":"3037:681:3","statements":[{"assignments":[726],"declarations":[{"constant":false,"id":726,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","overrides":null,"scope":753,"src":"3386:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":725,"name":"bytes","nodeType":"ElementaryTypeName","src":"3386:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":735,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":732,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"3440:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3446:34:3","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":729,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"3420:5:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}],"id":728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3412:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":727,"name":"address","nodeType":"ElementaryTypeName","src":"3412:7:3","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3412:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":846,"src":"3412:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3412:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3386:95:3"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":736,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"3495:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3495:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3515:1:3","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3495:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":752,"nodeType":"IfStatement","src":"3491:221:3","trueBody":{"id":751,"nodeType":"Block","src":"3518:194:3","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":743,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"3635:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"components":[{"argumentTypes":null,"id":745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3648:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":744,"name":"bool","nodeType":"ElementaryTypeName","src":"3648:4:3","typeDescriptions":{"typeIdentifier":null,"typeString":null}}}],"id":746,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3647:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"argumentTypes":null,"id":741,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3624:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":742,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3624:10:3","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3624:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3656:44:3","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":740,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3616:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3616:85:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":750,"nodeType":"ExpressionStatement","src":"3616:85:3"}]}}]},"documentation":{"id":718,"nodeType":"StructuredDocumentation","src":"2590:372:3","text":"@dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\non the return value: the return value is optional (but if data is returned, it must not be false).\n@param token The token targeted by the call.\n@param data The call data (encoded using abi.encode or one of its variants)."},"id":754,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":754,"src":"2996:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":719,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":542,"src":"2996:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":722,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":754,"src":"3010:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":721,"name":"bytes","nodeType":"ElementaryTypeName","src":"3010:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"2995:33:3"},"returnParameters":{"id":724,"nodeType":"ParameterList","parameters":[],"src":"3037:0:3"},"scope":755,"src":"2967:751:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":756,"src":"616:3104:3"}],"src":"33:3688:3"},"id":3},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1051]},"id":1052,"nodeType":"SourceUnit","nodes":[{"id":757,"literals":["solidity",">=","0.6",".2","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:4"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":758,"nodeType":"StructuredDocumentation","src":"66:67:4","text":"@dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1051,"linearizedBaseContracts":[1051],"name":"Address","nodeType":"ContractDefinition","nodes":[{"body":{"id":774,"nodeType":"Block","src":"792:347:4","statements":[{"assignments":[767],"declarations":[{"constant":false,"id":767,"mutability":"mutable","name":"size","nodeType":"VariableDeclaration","overrides":null,"scope":774,"src":"989:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":766,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":768,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"989:12:4"},{"AST":{"nodeType":"YulBlock","src":"1076:32:4","statements":[{"nodeType":"YulAssignment","src":"1078:28:4","value":{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"1098:7:4"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"1086:11:4"},"nodeType":"YulFunctionCall","src":"1086:20:4"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1078:4:4"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":761,"isOffset":false,"isSlot":false,"src":"1098:7:4","valueSize":1},{"declaration":767,"isOffset":false,"isSlot":false,"src":"1078:4:4","valueSize":1}],"id":769,"nodeType":"InlineAssembly","src":"1067:41:4"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":770,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"1124:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1131:1:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1124:8:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":765,"id":773,"nodeType":"Return","src":"1117:15:4"}]},"documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"156:565:4","text":"@dev Returns true if `account` is a contract.\n     * [IMPORTANT]\n====\nIt is unsafe to assume that an address for which this function returns\nfalse is an externally-owned account (EOA) and not a contract.\n     * Among others, `isContract` will return false for the following\ntypes of addresses:\n     *  - an externally-owned account\n - a contract in construction\n - an address where a contract will be created\n - an address where a contract lived, but was destroyed\n===="},"id":775,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","overrides":null,"scope":775,"src":"746:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":760,"name":"address","nodeType":"ElementaryTypeName","src":"746:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"745:17:4"},"returnParameters":{"id":765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":764,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":775,"src":"786:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":763,"name":"bool","nodeType":"ElementaryTypeName","src":"786:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"785:6:4"},"scope":1051,"src":"726:413:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":808,"nodeType":"Block","src":"2127:320:4","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":786,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2153:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1051","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1051","typeString":"library Address"}],"id":785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2145:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"2145:7:4","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2145:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2145:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":789,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"2170:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2145:31:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2178:31:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":783,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2137:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2137:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":793,"nodeType":"ExpressionStatement","src":"2137:73:4"},{"assignments":[795,null],"declarations":[{"constant":false,"id":795,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":808,"src":"2299:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":794,"name":"bool","nodeType":"ElementaryTypeName","src":"2299:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},null],"id":802,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"","id":800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2349:2:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":796,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"2317:9:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2317:14:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"argumentTypes":null,"id":798,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"2340:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2317:31:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2317:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2298:54:4"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":804,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"2370:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2379:60:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":803,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2362:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2362:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":807,"nodeType":"ExpressionStatement","src":"2362:78:4"}]},"documentation":{"id":776,"nodeType":"StructuredDocumentation","src":"1145:906:4","text":"@dev Replacement for Solidity's `transfer`: sends `amount` wei to\n`recipient`, forwarding all available gas and reverting on errors.\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\nof certain opcodes, possibly making contracts go over the 2300 gas limit\nimposed by `transfer`, making them unable to receive funds via\n`transfer`. {sendValue} removes this limitation.\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     * IMPORTANT: because control is transferred to `recipient`, care must be\ntaken to not create reentrancy vulnerabilities. Consider using\n{ReentrancyGuard} or the\nhttps://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":809,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","overrides":null,"scope":809,"src":"2075:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":777,"name":"address","nodeType":"ElementaryTypeName","src":"2075:15:4","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"value":null,"visibility":"internal"},{"constant":false,"id":780,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":809,"src":"2102:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":779,"name":"uint256","nodeType":"ElementaryTypeName","src":"2102:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2074:43:4"},"returnParameters":{"id":782,"nodeType":"ParameterList","parameters":[],"src":"2127:0:4"},"scope":1051,"src":"2056:391:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":825,"nodeType":"Block","src":"3277:82:4","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":820,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"3305:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":821,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"3313:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3319:32:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":819,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[826,846],"referencedDeclaration":846,"src":"3292:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3292:60:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":818,"id":824,"nodeType":"Return","src":"3285:67:4"}]},"documentation":{"id":810,"nodeType":"StructuredDocumentation","src":"2453:730:4","text":"@dev Performs a Solidity function call using a low level `call`. A\nplain`call` is an unsafe replacement for a function call: use this\nfunction instead.\n     * If `target` reverts with a revert reason, it is bubbled up by this\nfunction (like regular Solidity function calls).\n     * Returns the raw returned data. To convert to the expected return value,\nuse https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     * Requirements:\n     * - `target` must be a contract.\n- calling `target` with `data` must not revert.\n     * _Available since v3.1._"},"id":826,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":812,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","overrides":null,"scope":826,"src":"3210:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":811,"name":"address","nodeType":"ElementaryTypeName","src":"3210:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":814,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":826,"src":"3226:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":813,"name":"bytes","nodeType":"ElementaryTypeName","src":"3226:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"3209:35:4"},"returnParameters":{"id":818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":817,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":826,"src":"3263:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":816,"name":"bytes","nodeType":"ElementaryTypeName","src":"3263:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"3262:14:4"},"scope":1051,"src":"3188:171:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":845,"nodeType":"Block","src":"3698:76:4","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":839,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"3737:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":840,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"3745:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"hexValue":"30","id":841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3751:1:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"argumentTypes":null,"id":842,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"3754:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":838,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[866,916],"referencedDeclaration":916,"src":"3715:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3715:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":837,"id":844,"nodeType":"Return","src":"3708:59:4"}]},"documentation":{"id":827,"nodeType":"StructuredDocumentation","src":"3365:211:4","text":"@dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n`errorMessage` as a fallback revert reason when `target` reverts.\n     * _Available since v3.1._"},"id":846,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","overrides":null,"scope":846,"src":"3603:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":828,"name":"address","nodeType":"ElementaryTypeName","src":"3603:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":831,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":846,"src":"3619:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":830,"name":"bytes","nodeType":"ElementaryTypeName","src":"3619:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"},{"constant":false,"id":833,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","overrides":null,"scope":846,"src":"3638:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":832,"name":"string","nodeType":"ElementaryTypeName","src":"3638:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"3602:63:4"},"returnParameters":{"id":837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":836,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":846,"src":"3684:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":835,"name":"bytes","nodeType":"ElementaryTypeName","src":"3684:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"3683:14:4"},"scope":1051,"src":"3581:193:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":865,"nodeType":"Block","src":"4249:111:4","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":859,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"4288:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":860,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"4296:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"id":861,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"4302:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4309:43:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":858,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[866,916],"referencedDeclaration":916,"src":"4266:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4266:87:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":857,"id":864,"nodeType":"Return","src":"4259:94:4"}]},"documentation":{"id":847,"nodeType":"StructuredDocumentation","src":"3780:351:4","text":"@dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\nbut also transferring `value` wei to `target`.\n     * Requirements:\n     * - the calling contract must have an ETH balance of at least `value`.\n- the called Solidity function must be `payable`.\n     * _Available since v3.1._"},"id":866,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":849,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","overrides":null,"scope":866,"src":"4167:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":848,"name":"address","nodeType":"ElementaryTypeName","src":"4167:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":851,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":866,"src":"4183:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":850,"name":"bytes","nodeType":"ElementaryTypeName","src":"4183:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"},{"constant":false,"id":853,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":866,"src":"4202:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":852,"name":"uint256","nodeType":"ElementaryTypeName","src":"4202:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4166:50:4"},"returnParameters":{"id":857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":856,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":866,"src":"4235:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":855,"name":"bytes","nodeType":"ElementaryTypeName","src":"4235:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"4234:14:4"},"scope":1051,"src":"4136:224:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":915,"nodeType":"Block","src":"4749:382:4","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":883,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4775:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1051","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1051","typeString":"library Address"}],"id":882,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4767:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":881,"name":"address","nodeType":"ElementaryTypeName","src":"4767:7:4","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4767:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4767:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":886,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"4792:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4767:30:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4799:40:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":880,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4759:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4759:81:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":890,"nodeType":"ExpressionStatement","src":"4759:81:4"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":893,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"4869:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":892,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"4858:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4858:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4878:31:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":891,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4850:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4850:60:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":897,"nodeType":"ExpressionStatement","src":"4850:60:4"},{"assignments":[899,901],"declarations":[{"constant":false,"id":899,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":915,"src":"4981:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":898,"name":"bool","nodeType":"ElementaryTypeName","src":"4981:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":901,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","overrides":null,"scope":915,"src":"4995:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":900,"name":"bytes","nodeType":"ElementaryTypeName","src":"4995:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":908,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":906,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"5050:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":902,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"5022:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5022:11:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"argumentTypes":null,"id":904,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"5042:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5022:27:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5022:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4980:75:4"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":910,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"5090:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":911,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"5099:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"id":912,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"5111:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":909,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"5072:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5072:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":879,"id":914,"nodeType":"Return","src":"5065:59:4"}]},"documentation":{"id":867,"nodeType":"StructuredDocumentation","src":"4366:237:4","text":"@dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\nwith `errorMessage` as a fallback revert reason when `target` reverts.\n     * _Available since v3.1._"},"id":916,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":869,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","overrides":null,"scope":916,"src":"4639:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":868,"name":"address","nodeType":"ElementaryTypeName","src":"4639:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":871,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":916,"src":"4655:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":870,"name":"bytes","nodeType":"ElementaryTypeName","src":"4655:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"},{"constant":false,"id":873,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":916,"src":"4674:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":872,"name":"uint256","nodeType":"ElementaryTypeName","src":"4674:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":875,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","overrides":null,"scope":916,"src":"4689:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":874,"name":"string","nodeType":"ElementaryTypeName","src":"4689:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"4638:78:4"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":916,"src":"4735:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":877,"name":"bytes","nodeType":"ElementaryTypeName","src":"4735:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"4734:14:4"},"scope":1051,"src":"4608:523:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":932,"nodeType":"Block","src":"5408:97:4","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":927,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"5444:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":928,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"5452:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5458:39:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":926,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[933,968],"referencedDeclaration":968,"src":"5425:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5425:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":925,"id":931,"nodeType":"Return","src":"5418:80:4"}]},"documentation":{"id":917,"nodeType":"StructuredDocumentation","src":"5137:166:4","text":"@dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\nbut performing a static call.\n     * _Available since v3.3._"},"id":933,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":919,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","overrides":null,"scope":933,"src":"5336:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":918,"name":"address","nodeType":"ElementaryTypeName","src":"5336:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":921,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":933,"src":"5352:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":920,"name":"bytes","nodeType":"ElementaryTypeName","src":"5352:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"5335:35:4"},"returnParameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":933,"src":"5394:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":923,"name":"bytes","nodeType":"ElementaryTypeName","src":"5394:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"5393:14:4"},"scope":1051,"src":"5308:197:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":967,"nodeType":"Block","src":"5817:288:4","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":947,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"5846:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":946,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"5835:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5835:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5855:38:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":945,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5827:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5827:67:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":951,"nodeType":"ExpressionStatement","src":"5827:67:4"},{"assignments":[953,955],"declarations":[{"constant":false,"id":953,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":967,"src":"5965:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":952,"name":"bool","nodeType":"ElementaryTypeName","src":"5965:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":955,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","overrides":null,"scope":967,"src":"5979:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":954,"name":"bytes","nodeType":"ElementaryTypeName","src":"5979:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":960,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":958,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"6024:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"id":956,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"6006:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6006:17:4","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6006:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5964:65:4"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":962,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"6064:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":963,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"6073:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"id":964,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"6085:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":961,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"6046:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6046:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":944,"id":966,"nodeType":"Return","src":"6039:59:4"}]},"documentation":{"id":934,"nodeType":"StructuredDocumentation","src":"5511:173:4","text":"@dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\nbut performing a static call.\n     * _Available since v3.3._"},"id":968,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":936,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","overrides":null,"scope":968,"src":"5717:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":935,"name":"address","nodeType":"ElementaryTypeName","src":"5717:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":938,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":968,"src":"5733:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":937,"name":"bytes","nodeType":"ElementaryTypeName","src":"5733:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","overrides":null,"scope":968,"src":"5752:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":939,"name":"string","nodeType":"ElementaryTypeName","src":"5752:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"5716:63:4"},"returnParameters":{"id":944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":943,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":968,"src":"5803:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":942,"name":"bytes","nodeType":"ElementaryTypeName","src":"5803:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"5802:14:4"},"scope":1051,"src":"5689:416:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":984,"nodeType":"Block","src":"6381:101:4","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":979,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"6419:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":980,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"6427:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6433:41:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":978,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[985,1020],"referencedDeclaration":1020,"src":"6398:20:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6398:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":977,"id":983,"nodeType":"Return","src":"6391:84:4"}]},"documentation":{"id":969,"nodeType":"StructuredDocumentation","src":"6111:168:4","text":"@dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\nbut performing a delegate call.\n     * _Available since v3.4._"},"id":985,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":971,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","overrides":null,"scope":985,"src":"6314:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":970,"name":"address","nodeType":"ElementaryTypeName","src":"6314:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":973,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":985,"src":"6330:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":972,"name":"bytes","nodeType":"ElementaryTypeName","src":"6330:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"6313:35:4"},"returnParameters":{"id":977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":976,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":985,"src":"6367:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":975,"name":"bytes","nodeType":"ElementaryTypeName","src":"6367:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"6366:14:4"},"scope":1051,"src":"6284:198:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1019,"nodeType":"Block","src":"6793:292:4","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":999,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"6822:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":998,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"6811:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6811:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":1001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6831:40:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":997,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6803:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6803:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1003,"nodeType":"ExpressionStatement","src":"6803:69:4"},{"assignments":[1005,1007],"declarations":[{"constant":false,"id":1005,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":1019,"src":"6943:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1004,"name":"bool","nodeType":"ElementaryTypeName","src":"6943:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":1007,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","overrides":null,"scope":1019,"src":"6957:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1006,"name":"bytes","nodeType":"ElementaryTypeName","src":"6957:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":1012,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1010,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"7004:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"id":1008,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"6984:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6984:19:4","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6984:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6942:67:4"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1014,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1005,"src":"7044:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":1015,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"7053:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"id":1016,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"7065:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1013,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"7026:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7026:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":996,"id":1018,"nodeType":"Return","src":"7019:59:4"}]},"documentation":{"id":986,"nodeType":"StructuredDocumentation","src":"6488:175:4","text":"@dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\nbut performing a delegate call.\n     * _Available since v3.4._"},"id":1020,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":988,"mutability":"mutable","name":"target","nodeType":"VariableDeclaration","overrides":null,"scope":1020,"src":"6698:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":987,"name":"address","nodeType":"ElementaryTypeName","src":"6698:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":990,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":1020,"src":"6714:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":989,"name":"bytes","nodeType":"ElementaryTypeName","src":"6714:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"},{"constant":false,"id":992,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","overrides":null,"scope":1020,"src":"6733:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":991,"name":"string","nodeType":"ElementaryTypeName","src":"6733:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"6697:63:4"},"returnParameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":995,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1020,"src":"6779:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":994,"name":"bytes","nodeType":"ElementaryTypeName","src":"6779:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"6778:14:4"},"scope":1051,"src":"6668:417:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1049,"nodeType":"Block","src":"7220:596:4","statements":[{"condition":{"argumentTypes":null,"id":1031,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"7234:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1047,"nodeType":"Block","src":"7291:519:4","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1035,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"7375:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"7375:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7395:1:4","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7375:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1045,"nodeType":"Block","src":"7747:53:4","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1042,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"7772:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1041,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"7765:6:4","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7765:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1044,"nodeType":"ExpressionStatement","src":"7765:20:4"}]},"id":1046,"nodeType":"IfStatement","src":"7371:429:4","trueBody":{"id":1040,"nodeType":"Block","src":"7398:343:4","statements":[{"AST":{"nodeType":"YulBlock","src":"7582:145:4","statements":[{"nodeType":"YulVariableDeclaration","src":"7604:40:4","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"7633:10:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7627:5:4"},"nodeType":"YulFunctionCall","src":"7627:17:4"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"7608:15:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7676:2:4","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"7680:10:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7672:3:4"},"nodeType":"YulFunctionCall","src":"7672:19:4"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"7693:15:4"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7665:6:4"},"nodeType":"YulFunctionCall","src":"7665:44:4"},"nodeType":"YulExpressionStatement","src":"7665:44:4"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1024,"isOffset":false,"isSlot":false,"src":"7633:10:4","valueSize":1},{"declaration":1024,"isOffset":false,"isSlot":false,"src":"7680:10:4","valueSize":1}],"id":1039,"nodeType":"InlineAssembly","src":"7573:154:4"}]}}]},"id":1048,"nodeType":"IfStatement","src":"7230:580:4","trueBody":{"id":1034,"nodeType":"Block","src":"7243:42:4","statements":[{"expression":{"argumentTypes":null,"id":1032,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"7264:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1030,"id":1033,"nodeType":"Return","src":"7257:17:4"}]}}]},"documentation":null,"id":1050,"implemented":true,"kind":"function","modifiers":[],"name":"_verifyCallResult","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":1050,"src":"7118:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1021,"name":"bool","nodeType":"ElementaryTypeName","src":"7118:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":1024,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","overrides":null,"scope":1050,"src":"7132:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1023,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"},{"constant":false,"id":1026,"mutability":"mutable","name":"errorMessage","nodeType":"VariableDeclaration","overrides":null,"scope":1050,"src":"7157:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1025,"name":"string","nodeType":"ElementaryTypeName","src":"7157:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"7117:67:4"},"returnParameters":{"id":1030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1029,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1050,"src":"7206:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1028,"name":"bytes","nodeType":"ElementaryTypeName","src":"7206:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"7205:14:4"},"scope":1051,"src":"7091:725:4","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1052,"src":"134:7684:4"}],"src":"33:7786:4"},"id":4},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1074]},"id":1075,"nodeType":"SourceUnit","nodes":[{"id":1053,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:5"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":1074,"linearizedBaseContracts":[1074],"name":"Context","nodeType":"ContractDefinition","nodes":[{"body":{"id":1061,"nodeType":"Block","src":"668:34:5","statements":[{"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1058,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"685:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"685:10:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":1057,"id":1060,"nodeType":"Return","src":"678:17:5"}]},"documentation":null,"id":1062,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1054,"nodeType":"ParameterList","parameters":[],"src":"617:2:5"},"returnParameters":{"id":1057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1056,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1062,"src":"651:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1055,"name":"address","nodeType":"ElementaryTypeName","src":"651:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"value":null,"visibility":"internal"}],"src":"650:17:5"},"scope":1074,"src":"598:104:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1072,"nodeType":"Block","src":"773:165:5","statements":[{"expression":{"argumentTypes":null,"id":1067,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"783:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$1074","typeString":"contract Context"}},"id":1068,"nodeType":"ExpressionStatement","src":"783:4:5"},{"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1069,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"923:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","referencedDeclaration":null,"src":"923:8:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1066,"id":1071,"nodeType":"Return","src":"916:15:5"}]},"documentation":null,"id":1073,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1063,"nodeType":"ParameterList","parameters":[],"src":"725:2:5"},"returnParameters":{"id":1066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1065,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1073,"src":"759:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1064,"name":"bytes","nodeType":"ElementaryTypeName","src":"759:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"758:14:5"},"scope":1074,"src":"708:230:5","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1075,"src":"566:374:5"}],"src":"33:908:5"},"id":5},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[1114]},"id":1115,"nodeType":"SourceUnit","nodes":[{"id":1076,"literals":["solidity",">=","0.6",".0","<","0.8",".0"],"nodeType":"PragmaDirective","src":"33:31:6"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1077,"nodeType":"StructuredDocumentation","src":"66:750:6","text":"@dev Contract module that helps prevent reentrant calls to a function.\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\navailable, which can be applied to functions to make sure there are no nested\n(reentrant) calls to them.\n * Note that because there is a single `nonReentrant` guard, functions marked as\n`nonReentrant` may not call one another. This can be worked around by making\nthose functions `private`, and then adding `external` `nonReentrant` entry\npoints to them.\n * TIP: If you would like to learn more about reentrancy and alternative ways\nto protect against it, check out our blog post\nhttps://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":1114,"linearizedBaseContracts":[1114],"name":"ReentrancyGuard","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1080,"mutability":"constant","name":"_NOT_ENTERED","nodeType":"VariableDeclaration","overrides":null,"scope":1114,"src":"1605:41:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1078,"name":"uint256","nodeType":"ElementaryTypeName","src":"1605:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"31","id":1079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:6","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1083,"mutability":"constant","name":"_ENTERED","nodeType":"VariableDeclaration","overrides":null,"scope":1114,"src":"1652:37:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1081,"name":"uint256","nodeType":"ElementaryTypeName","src":"1652:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"32","id":1082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:6","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":1085,"mutability":"mutable","name":"_status","nodeType":"VariableDeclaration","overrides":null,"scope":1114,"src":"1696:23:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1084,"name":"uint256","nodeType":"ElementaryTypeName","src":"1696:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"body":{"id":1092,"nodeType":"Block","src":"1750:39:6","statements":[{"expression":{"argumentTypes":null,"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1088,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"1760:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1089,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"1770:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1760:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1091,"nodeType":"ExpressionStatement","src":"1760:22:6"}]},"documentation":null,"id":1093,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1086,"nodeType":"ParameterList","parameters":[],"src":"1738:2:6"},"returnParameters":{"id":1087,"nodeType":"ParameterList","parameters":[],"src":"1750:0:6"},"scope":1114,"src":"1726:63:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1112,"nodeType":"Block","src":"2188:421:6","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1097,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"2277:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":1098,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"2288:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2277:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":1100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2298:33:6","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":1096,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2269:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2269:63:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1102,"nodeType":"ExpressionStatement","src":"2269:63:6"},{"expression":{"argumentTypes":null,"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1103,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"2407:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1104,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"2417:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2407:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1106,"nodeType":"ExpressionStatement","src":"2407:18:6"},{"id":1107,"nodeType":"PlaceholderStatement","src":"2436:1:6"},{"expression":{"argumentTypes":null,"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1108,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"2580:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1109,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"2590:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2580:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1111,"nodeType":"ExpressionStatement","src":"2580:22:6"}]},"documentation":{"id":1094,"nodeType":"StructuredDocumentation","src":"1795:364:6","text":"@dev Prevents a contract from calling itself, directly or indirectly.\nCalling a `nonReentrant` function from another `nonReentrant`\nfunction is not supported. It is possible to prevent this from happening\nby making the `nonReentrant` function external, and make it call a\n`private` function that does the actual work."},"id":1113,"name":"nonReentrant","nodeType":"ModifierDefinition","overrides":null,"parameters":{"id":1095,"nodeType":"ParameterList","parameters":[],"src":"2185:2:6"},"src":"2164:445:6","virtual":false,"visibility":"internal"}],"scope":1115,"src":"817:1794:6"}],"src":"33:2579:6"},"id":6},"contracts/periphery/test/Staking.sol":{"ast":{"absolutePath":"contracts/periphery/test/Staking.sol","exportedSymbols":{"Staking":[2238]},"id":2239,"nodeType":"SourceUnit","nodes":[{"id":1116,"literals":["solidity","^","0.6",".6"],"nodeType":"PragmaDirective","src":"39:23:7"},{"id":1117,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"63:33:7"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1118,"nodeType":"ImportDirective","scope":2239,"sourceUnit":110,"src":"98:52:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":1119,"nodeType":"ImportDirective","scope":2239,"sourceUnit":1115,"src":"151:59:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":1120,"nodeType":"ImportDirective","scope":2239,"sourceUnit":543,"src":"211:56:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/SafeERC20.sol","id":1121,"nodeType":"ImportDirective","scope":2239,"sourceUnit":756,"src":"268:59:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":1122,"name":"Ownable","nodeType":"UserDefinedTypeName","referencedDeclaration":109,"src":"349:7:7","typeDescriptions":{"typeIdentifier":"t_contract$_Ownable_$109","typeString":"contract Ownable"}},"id":1123,"nodeType":"InheritanceSpecifier","src":"349:7:7"},{"arguments":null,"baseName":{"contractScope":null,"id":1124,"name":"ReentrancyGuard","nodeType":"UserDefinedTypeName","referencedDeclaration":1114,"src":"358:15:7","typeDescriptions":{"typeIdentifier":"t_contract$_ReentrancyGuard_$1114","typeString":"contract ReentrancyGuard"}},"id":1125,"nodeType":"InheritanceSpecifier","src":"358:15:7"}],"contractDependencies":[109,1074,1114],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":2238,"linearizedBaseContracts":[2238,1114,109,1074],"name":"Staking","nodeType":"ContractDefinition","nodes":[{"id":1128,"libraryName":{"contractScope":null,"id":1126,"name":"SafeERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":755,"src":"386:9:7","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$755","typeString":"library SafeERC20"}},"nodeType":"UsingForDirective","src":"380:27:7","typeName":{"contractScope":null,"id":1127,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":542,"src":"400:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}}},{"constant":true,"functionSelector":"dd421cd5","id":1131,"mutability":"constant","name":"BLOCKS_IN_YEAR","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"413:48:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1129,"name":"uint256","nodeType":"ElementaryTypeName","src":"413:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"32313032343030","id":1130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"454:7:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2102400_by_1","typeString":"int_const 2102400"},"value":"2102400"},"visibility":"public"},{"constant":false,"id":1135,"mutability":"mutable","name":"_stakers","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"498:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Staker_$1178_storage_$","typeString":"mapping(address => struct Staking.Staker)"},"typeName":{"id":1134,"keyType":{"id":1132,"name":"address","nodeType":"ElementaryTypeName","src":"506:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"498:26:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Staker_$1178_storage_$","typeString":"mapping(address => struct Staking.Staker)"},"valueType":{"contractScope":null,"id":1133,"name":"Staker","nodeType":"UserDefinedTypeName","referencedDeclaration":1178,"src":"517:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"}}},"value":null,"visibility":"private"},{"constant":false,"id":1137,"mutability":"mutable","name":"_rewardToken","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"548:28:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1136,"name":"address","nodeType":"ElementaryTypeName","src":"548:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"private"},{"constant":false,"id":1139,"mutability":"mutable","name":"_stakingToken","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"582:29:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1138,"name":"address","nodeType":"ElementaryTypeName","src":"582:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"private"},{"constant":false,"id":1141,"mutability":"mutable","name":"_startsAt","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"617:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1140,"name":"uint256","nodeType":"ElementaryTypeName","src":"617:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1143,"mutability":"mutable","name":"_durationInBlocks","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"648:33:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1142,"name":"uint256","nodeType":"ElementaryTypeName","src":"648:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1145,"mutability":"mutable","name":"_finishBlock","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"687:28:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1144,"name":"uint256","nodeType":"ElementaryTypeName","src":"687:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1147,"mutability":"mutable","name":"_lpLockTime","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"721:27:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1146,"name":"uint256","nodeType":"ElementaryTypeName","src":"721:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1149,"mutability":"mutable","name":"_numberOfStakers","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"754:32:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1148,"name":"uint256","nodeType":"ElementaryTypeName","src":"754:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1151,"mutability":"mutable","name":"_lpTotalAmount","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"792:30:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1150,"name":"uint256","nodeType":"ElementaryTypeName","src":"792:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1153,"mutability":"mutable","name":"_lpTotalLimit","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"828:29:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1152,"name":"uint256","nodeType":"ElementaryTypeName","src":"828:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1155,"mutability":"mutable","name":"_stakersLimit","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"863:29:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1154,"name":"uint256","nodeType":"ElementaryTypeName","src":"863:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1157,"mutability":"mutable","name":"_maxStakePerStaker","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"898:34:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1156,"name":"uint256","nodeType":"ElementaryTypeName","src":"898:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1159,"mutability":"mutable","name":"_rewardsPerBlock","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"938:32:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1158,"name":"uint256","nodeType":"ElementaryTypeName","src":"938:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1161,"mutability":"mutable","name":"_rewardPerTokenStored","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"976:37:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1160,"name":"uint256","nodeType":"ElementaryTypeName","src":"976:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1163,"mutability":"mutable","name":"_lastUpdateBlock","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"1019:32:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1162,"name":"uint256","nodeType":"ElementaryTypeName","src":"1019:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"constant":false,"id":1165,"mutability":"mutable","name":"_isActive","nodeType":"VariableDeclaration","overrides":null,"scope":2238,"src":"1057:22:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1164,"name":"bool","nodeType":"ElementaryTypeName","src":"1057:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"private"},{"canonicalName":"Staking.Staker","id":1178,"members":[{"constant":false,"id":1167,"mutability":"mutable","name":"stakerAddress","nodeType":"VariableDeclaration","overrides":null,"scope":1178,"src":"1110:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1166,"name":"address","nodeType":"ElementaryTypeName","src":"1110:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1169,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","overrides":null,"scope":1178,"src":"1141:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1168,"name":"uint256","nodeType":"ElementaryTypeName","src":"1141:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1171,"mutability":"mutable","name":"rewards","nodeType":"VariableDeclaration","overrides":null,"scope":1178,"src":"1166:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1170,"name":"uint256","nodeType":"ElementaryTypeName","src":"1166:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1173,"mutability":"mutable","name":"rewardPerTokenPaid","nodeType":"VariableDeclaration","overrides":null,"scope":1178,"src":"1191:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1172,"name":"uint256","nodeType":"ElementaryTypeName","src":"1191:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1175,"mutability":"mutable","name":"startBlock","nodeType":"VariableDeclaration","overrides":null,"scope":1178,"src":"1227:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1227:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1177,"mutability":"mutable","name":"startTime","nodeType":"VariableDeclaration","overrides":null,"scope":1178,"src":"1255:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1176,"name":"uint256","nodeType":"ElementaryTypeName","src":"1255:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"name":"Staker","nodeType":"StructDefinition","scope":2238,"src":"1086:193:7","visibility":"public"},{"body":{"id":1189,"nodeType":"Block","src":"1365:45:7","statements":[{"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1185,"name":"_stakers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"1382:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Staker_$1178_storage_$","typeString":"mapping(address => struct Staking.Staker storage ref)"}},"id":1187,"indexExpression":{"argumentTypes":null,"id":1186,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"1391:11:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1382:21:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage","typeString":"struct Staking.Staker storage ref"}},"functionReturnParameters":1184,"id":1188,"nodeType":"Return","src":"1375:28:7"}]},"documentation":null,"functionSelector":"6386c1c7","id":1190,"implemented":true,"kind":"function","modifiers":[],"name":"getUserInfo","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1180,"mutability":"mutable","name":"userAddress","nodeType":"VariableDeclaration","overrides":null,"scope":1190,"src":"1306:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1179,"name":"address","nodeType":"ElementaryTypeName","src":"1306:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1305:21:7"},"returnParameters":{"id":1184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1183,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1190,"src":"1350:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_memory_ptr","typeString":"struct Staking.Staker"},"typeName":{"contractScope":null,"id":1182,"name":"Staker","nodeType":"UserDefinedTypeName","referencedDeclaration":1178,"src":"1350:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"}},"value":null,"visibility":"internal"}],"src":"1349:15:7"},"scope":2238,"src":"1285:125:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1222,"nodeType":"Block","src":"1569:277:7","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":1211,"name":"_startsAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"1600:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1212,"name":"_finishBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"1623:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1213,"name":"_rewardToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"1649:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1214,"name":"_stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"1675:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1215,"name":"_lpTotalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"1702:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1216,"name":"_numberOfStakers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"1730:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1217,"name":"_rewardsPerBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"1760:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1218,"name":"_lastUpdateBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"1790:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1219,"name":"_isActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"1820:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1220,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1586:253:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$","typeString":"tuple(uint256,uint256,address,address,uint256,uint256,uint256,uint256,bool)"}},"functionReturnParameters":1210,"id":1221,"nodeType":"Return","src":"1579:260:7"}]},"documentation":null,"functionSelector":"74a4030f","id":1223,"implemented":true,"kind":"function","modifiers":[],"name":"getStakeInfo","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1191,"nodeType":"ParameterList","parameters":[],"src":"1437:2:7"},"returnParameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1193,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1223,"src":"1487:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1192,"name":"uint256","nodeType":"ElementaryTypeName","src":"1487:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1195,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1223,"src":"1496:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1194,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1197,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1223,"src":"1505:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1196,"name":"address","nodeType":"ElementaryTypeName","src":"1505:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1199,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1223,"src":"1514:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1198,"name":"address","nodeType":"ElementaryTypeName","src":"1514:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1201,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1223,"src":"1523:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1200,"name":"uint256","nodeType":"ElementaryTypeName","src":"1523:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1203,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1223,"src":"1532:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1202,"name":"uint256","nodeType":"ElementaryTypeName","src":"1532:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1205,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1223,"src":"1541:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1204,"name":"uint256","nodeType":"ElementaryTypeName","src":"1541:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1207,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1223,"src":"1550:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1206,"name":"uint256","nodeType":"ElementaryTypeName","src":"1550:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1223,"src":"1559:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1208,"name":"bool","nodeType":"ElementaryTypeName","src":"1559:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"1486:78:7"},"scope":2238,"src":"1416:430:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1246,"nodeType":"Block","src":"1963:211:7","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":1238,"name":"_lpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"1994:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1239,"name":"_lpTotalLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"2019:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1240,"name":"_stakersLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"2046:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1241,"name":"_maxStakePerStaker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"2073:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1242,"name":"_rewardPerTokenStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"2105:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1243,"name":"_durationInBlocks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"2140:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1244,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1980:187:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256,uint256,uint256,uint256)"}},"functionReturnParameters":1237,"id":1245,"nodeType":"Return","src":"1973:194:7"}]},"documentation":null,"functionSelector":"4d1f7e65","id":1247,"implemented":true,"kind":"function","modifiers":[],"name":"getStakeConditionsInfo","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1224,"nodeType":"ParameterList","parameters":[],"src":"1883:2:7"},"returnParameters":{"id":1237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1226,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1247,"src":"1909:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1225,"name":"uint256","nodeType":"ElementaryTypeName","src":"1909:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1228,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1247,"src":"1918:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1227,"name":"uint256","nodeType":"ElementaryTypeName","src":"1918:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1230,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1247,"src":"1927:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1229,"name":"uint256","nodeType":"ElementaryTypeName","src":"1927:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1247,"src":"1936:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1231,"name":"uint256","nodeType":"ElementaryTypeName","src":"1936:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1234,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1247,"src":"1945:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1233,"name":"uint256","nodeType":"ElementaryTypeName","src":"1945:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1236,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1247,"src":"1954:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1235,"name":"uint256","nodeType":"ElementaryTypeName","src":"1954:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1908:54:7"},"scope":2238,"src":"1852:322:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1279,"nodeType":"Block","src":"2250:170:7","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1254,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"2264:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2281:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2273:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1255,"name":"address","nodeType":"ElementaryTypeName","src":"2273:7:7","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2273:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2264:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1277,"nodeType":"Block","src":"2344:70:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1273,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2397:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Staking_$2238","typeString":"contract Staking"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Staking_$2238","typeString":"contract Staking"}],"id":1272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2389:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1271,"name":"address","nodeType":"ElementaryTypeName","src":"2389:7:7","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2389:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1268,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"2372:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1267,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"2365:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$542_$","typeString":"type(contract IERC20)"}},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2365:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":481,"src":"2365:23:7","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2365:38:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1253,"id":1276,"nodeType":"Return","src":"2358:45:7"}]},"id":1278,"nodeType":"IfStatement","src":"2260:154:7","trueBody":{"id":1266,"nodeType":"Block","src":"2285:53:7","statements":[{"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1262,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2314:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Staking_$2238","typeString":"contract Staking"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Staking_$2238","typeString":"contract Staking"}],"id":1261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2306:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1260,"name":"address","nodeType":"ElementaryTypeName","src":"2306:7:7","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2306:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2306:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1253,"id":1265,"nodeType":"Return","src":"2299:28:7"}]}}]},"documentation":null,"functionSelector":"3aecd0e3","id":1280,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenBalance","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1249,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1280,"src":"2205:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1248,"name":"address","nodeType":"ElementaryTypeName","src":"2205:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"2204:15:7"},"returnParameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1280,"src":"2241:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1251,"name":"uint256","nodeType":"ElementaryTypeName","src":"2241:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2240:9:7"},"scope":2238,"src":"2180:240:7","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1322,"nodeType":"Block","src":"2495:319:7","statements":[{"assignments":[1288],"declarations":[{"constant":false,"id":1288,"mutability":"mutable","name":"staker","nodeType":"VariableDeclaration","overrides":null,"scope":1322,"src":"2505:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_memory_ptr","typeString":"struct Staking.Staker"},"typeName":{"contractScope":null,"id":1287,"name":"Staker","nodeType":"UserDefinedTypeName","referencedDeclaration":1178,"src":"2505:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"}},"value":null,"visibility":"internal"}],"id":1292,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1289,"name":"_stakers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"2528:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Staker_$1178_storage_$","typeString":"mapping(address => struct Staking.Staker storage ref)"}},"id":1291,"indexExpression":{"argumentTypes":null,"id":1290,"name":"stakerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"2537:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2528:23:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage","typeString":"struct Staking.Staker storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2505:46:7"},{"assignments":[1294],"declarations":[{"constant":false,"id":1294,"mutability":"mutable","name":"rewardPerBlockNow","nodeType":"VariableDeclaration","overrides":null,"scope":1322,"src":"2561:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1293,"name":"uint256","nodeType":"ElementaryTypeName","src":"2561:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1297,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1295,"name":"rewardPerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"2589:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2589:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2561:44:7"},{"expression":{"argumentTypes":null,"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1298,"name":"rewardPerBlockNow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"2634:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2655:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2634:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"hexValue":"30","id":1316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2789:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1317,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"2793:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_memory_ptr","typeString":"struct Staking.Staker memory"}},"id":1318,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"rewards","nodeType":"MemberAccess","referencedDeclaration":1171,"src":"2793:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2789:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2634:173:7","trueExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1301,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"2677:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_memory_ptr","typeString":"struct Staking.Staker memory"}},"id":1302,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"2677:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1303,"name":"rewardPerBlockNow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"2695:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1304,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"2715:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_memory_ptr","typeString":"struct Staking.Staker memory"}},"id":1305,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"rewardPerTokenPaid","nodeType":"MemberAccess","referencedDeclaration":1173,"src":"2715:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2695:45:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1307,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2694:47:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2677:64:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1309,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2676:66:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"hexValue":"31","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2745:7:7","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1"},"src":"2676:76:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1312,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2675:78:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1313,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"2756:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_memory_ptr","typeString":"struct Staking.Staker memory"}},"id":1314,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"rewards","nodeType":"MemberAccess","referencedDeclaration":1171,"src":"2756:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2675:95:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1286,"id":1321,"nodeType":"Return","src":"2615:192:7"}]},"documentation":null,"functionSelector":"008cc262","id":1323,"implemented":true,"kind":"function","modifiers":[],"name":"earned","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1282,"mutability":"mutable","name":"stakerAddress","nodeType":"VariableDeclaration","overrides":null,"scope":1323,"src":"2442:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1281,"name":"address","nodeType":"ElementaryTypeName","src":"2442:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"2441:23:7"},"returnParameters":{"id":1286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1323,"src":"2486:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1284,"name":"uint256","nodeType":"ElementaryTypeName","src":"2486:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2485:9:7"},"scope":2238,"src":"2426:388:7","stateMutability":"view","virtual":false,"visibility":"public"},{"anonymous":false,"documentation":null,"id":1329,"name":"ActiveSet","nodeType":"EventDefinition","parameters":{"id":1328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1325,"indexed":true,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":1329,"src":"2836:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1324,"name":"bool","nodeType":"ElementaryTypeName","src":"2836:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":1327,"indexed":false,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","overrides":null,"scope":1329,"src":"2856:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1326,"name":"address","nodeType":"ElementaryTypeName","src":"2856:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"2835:38:7"},"src":"2820:54:7"},{"anonymous":false,"documentation":null,"id":1337,"name":"EmergencyWithdrawals","nodeType":"EventDefinition","parameters":{"id":1336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"indexed":true,"mutability":"mutable","name":"stakerAddress","nodeType":"VariableDeclaration","overrides":null,"scope":1337,"src":"2906:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1330,"name":"address","nodeType":"ElementaryTypeName","src":"2906:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1333,"indexed":false,"mutability":"mutable","name":"payHarvest","nodeType":"VariableDeclaration","overrides":null,"scope":1337,"src":"2937:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1332,"name":"bool","nodeType":"ElementaryTypeName","src":"2937:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":1335,"indexed":true,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","overrides":null,"scope":1337,"src":"2954:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1334,"name":"address","nodeType":"ElementaryTypeName","src":"2954:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"2905:74:7"},"src":"2879:101:7"},{"anonymous":false,"documentation":null,"id":1345,"name":"RewardsDeposited","nodeType":"EventDefinition","parameters":{"id":1344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"indexed":true,"mutability":"mutable","name":"tokenAddress","nodeType":"VariableDeclaration","overrides":null,"scope":1345,"src":"3008:28:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"3008:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1341,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1345,"src":"3038:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1340,"name":"uint256","nodeType":"ElementaryTypeName","src":"3038:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1343,"indexed":true,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","overrides":null,"scope":1345,"src":"3054:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1342,"name":"address","nodeType":"ElementaryTypeName","src":"3054:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"3007:72:7"},"src":"2985:95:7"},{"anonymous":false,"documentation":null,"id":1351,"name":"RewardPerBlockSet","nodeType":"EventDefinition","parameters":{"id":1350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1347,"indexed":true,"mutability":"mutable","name":"newRewardPerBlock","nodeType":"VariableDeclaration","overrides":null,"scope":1351,"src":"3109:33:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1346,"name":"uint256","nodeType":"ElementaryTypeName","src":"3109:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1349,"indexed":true,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","overrides":null,"scope":1351,"src":"3144:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1348,"name":"address","nodeType":"ElementaryTypeName","src":"3144:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"3108:61:7"},"src":"3085:85:7"},{"anonymous":false,"documentation":null,"id":1371,"name":"StakeCreated","nodeType":"EventDefinition","parameters":{"id":1370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1353,"indexed":false,"mutability":"mutable","name":"rewardToken","nodeType":"VariableDeclaration","overrides":null,"scope":1371,"src":"3203:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1352,"name":"address","nodeType":"ElementaryTypeName","src":"3203:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1355,"indexed":false,"mutability":"mutable","name":"stackingToken","nodeType":"VariableDeclaration","overrides":null,"scope":1371,"src":"3232:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1354,"name":"address","nodeType":"ElementaryTypeName","src":"3232:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1357,"indexed":false,"mutability":"mutable","name":"startsAt","nodeType":"VariableDeclaration","overrides":null,"scope":1371,"src":"3263:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1356,"name":"uint256","nodeType":"ElementaryTypeName","src":"3263:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1359,"indexed":false,"mutability":"mutable","name":"lpLockTime","nodeType":"VariableDeclaration","overrides":null,"scope":1371,"src":"3289:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1358,"name":"uint256","nodeType":"ElementaryTypeName","src":"3289:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1361,"indexed":false,"mutability":"mutable","name":"lpTotalLimit","nodeType":"VariableDeclaration","overrides":null,"scope":1371,"src":"3317:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1360,"name":"uint256","nodeType":"ElementaryTypeName","src":"3317:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1363,"indexed":false,"mutability":"mutable","name":"stakersLimit","nodeType":"VariableDeclaration","overrides":null,"scope":1371,"src":"3347:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1362,"name":"uint256","nodeType":"ElementaryTypeName","src":"3347:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1365,"indexed":false,"mutability":"mutable","name":"maxStakePerStaker","nodeType":"VariableDeclaration","overrides":null,"scope":1371,"src":"3377:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1364,"name":"uint256","nodeType":"ElementaryTypeName","src":"3377:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1367,"indexed":false,"mutability":"mutable","name":"rewardsPerBlock","nodeType":"VariableDeclaration","overrides":null,"scope":1371,"src":"3412:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1366,"name":"uint256","nodeType":"ElementaryTypeName","src":"3412:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1369,"indexed":false,"mutability":"mutable","name":"durationInBlocks","nodeType":"VariableDeclaration","overrides":null,"scope":1371,"src":"3445:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1368,"name":"uint256","nodeType":"ElementaryTypeName","src":"3445:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3193:282:7"},"src":"3175:301:7"},{"anonymous":false,"documentation":null,"id":1387,"name":"StakeUpdated","nodeType":"EventDefinition","parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1373,"indexed":false,"mutability":"mutable","name":"startsAt","nodeType":"VariableDeclaration","overrides":null,"scope":1387,"src":"3509:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1372,"name":"uint256","nodeType":"ElementaryTypeName","src":"3509:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1375,"indexed":false,"mutability":"mutable","name":"blocksDuration","nodeType":"VariableDeclaration","overrides":null,"scope":1387,"src":"3535:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1374,"name":"uint256","nodeType":"ElementaryTypeName","src":"3535:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1377,"indexed":false,"mutability":"mutable","name":"lpLockTime","nodeType":"VariableDeclaration","overrides":null,"scope":1387,"src":"3567:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1376,"name":"uint256","nodeType":"ElementaryTypeName","src":"3567:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1379,"indexed":false,"mutability":"mutable","name":"stakersLimit","nodeType":"VariableDeclaration","overrides":null,"scope":1387,"src":"3595:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1378,"name":"uint256","nodeType":"ElementaryTypeName","src":"3595:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1381,"indexed":false,"mutability":"mutable","name":"maxStakePerStaker","nodeType":"VariableDeclaration","overrides":null,"scope":1387,"src":"3625:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1380,"name":"uint256","nodeType":"ElementaryTypeName","src":"3625:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1383,"indexed":true,"mutability":"mutable","name":"newRewardPerBlock","nodeType":"VariableDeclaration","overrides":null,"scope":1387,"src":"3660:33:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1382,"name":"uint256","nodeType":"ElementaryTypeName","src":"3660:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1385,"indexed":true,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","overrides":null,"scope":1387,"src":"3703:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1384,"name":"address","nodeType":"ElementaryTypeName","src":"3703:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"3499:234:7"},"src":"3481:253:7"},{"anonymous":false,"documentation":null,"id":1393,"name":"MaxStakePerStakerSet","nodeType":"EventDefinition","parameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"indexed":false,"mutability":"mutable","name":"newMaxStakePerStaker","nodeType":"VariableDeclaration","overrides":null,"scope":1393,"src":"3766:28:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1388,"name":"uint256","nodeType":"ElementaryTypeName","src":"3766:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1391,"indexed":true,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","overrides":null,"scope":1393,"src":"3796:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1390,"name":"address","nodeType":"ElementaryTypeName","src":"3796:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"3765:56:7"},"src":"3739:83:7"},{"anonymous":false,"documentation":null,"id":1399,"name":"Withdrawed","nodeType":"EventDefinition","parameters":{"id":1398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1395,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1399,"src":"3844:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1394,"name":"uint256","nodeType":"ElementaryTypeName","src":"3844:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1397,"indexed":true,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","overrides":null,"scope":1399,"src":"3860:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1396,"name":"address","nodeType":"ElementaryTypeName","src":"3860:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"3843:42:7"},"src":"3827:59:7"},{"anonymous":false,"documentation":null,"id":1405,"name":"TokensStaked","nodeType":"EventDefinition","parameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1405,"src":"3910:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1400,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1403,"indexed":true,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","overrides":null,"scope":1405,"src":"3926:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1402,"name":"address","nodeType":"ElementaryTypeName","src":"3926:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"3909:42:7"},"src":"3891:61:7"},{"anonymous":false,"documentation":null,"id":1411,"name":"Harvested","nodeType":"EventDefinition","parameters":{"id":1410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1407,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1411,"src":"3973:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1406,"name":"uint256","nodeType":"ElementaryTypeName","src":"3973:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1409,"indexed":true,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","overrides":null,"scope":1411,"src":"3989:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1408,"name":"address","nodeType":"ElementaryTypeName","src":"3989:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"3972:42:7"},"src":"3957:58:7"},{"anonymous":false,"documentation":null,"id":1417,"name":"TokenWithdrawed","nodeType":"EventDefinition","parameters":{"id":1416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1413,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1417,"src":"4042:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1412,"name":"uint256","nodeType":"ElementaryTypeName","src":"4042:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1415,"indexed":true,"mutability":"mutable","name":"operator","nodeType":"VariableDeclaration","overrides":null,"scope":1417,"src":"4058:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1414,"name":"address","nodeType":"ElementaryTypeName","src":"4058:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"4041:42:7"},"src":"4020:64:7"},{"body":{"id":1497,"nodeType":"Block","src":"4391:719:7","statements":[{"expression":{"argumentTypes":null,"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1438,"name":"_rewardToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"4401:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1439,"name":"rewardToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"4416:11:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4401:26:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1441,"nodeType":"ExpressionStatement","src":"4401:26:7"},{"expression":{"argumentTypes":null,"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1442,"name":"_stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"4437:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1443,"name":"stackingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"4453:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4437:29:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1445,"nodeType":"ExpressionStatement","src":"4437:29:7"},{"expression":{"argumentTypes":null,"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1446,"name":"_startsAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"4476:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1447,"name":"startsAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"4488:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4476:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1449,"nodeType":"ExpressionStatement","src":"4476:20:7"},{"expression":{"argumentTypes":null,"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1450,"name":"_finishBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"4506:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1451,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4521:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4521:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":1453,"name":"durationInBlocks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"4536:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4521:31:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4506:46:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1456,"nodeType":"ExpressionStatement","src":"4506:46:7"},{"expression":{"argumentTypes":null,"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1457,"name":"_lpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"4562:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1458,"name":"lpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1427,"src":"4576:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4562:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1460,"nodeType":"ExpressionStatement","src":"4562:24:7"},{"expression":{"argumentTypes":null,"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1461,"name":"_lpTotalLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"4596:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1462,"name":"lpTotalLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"4612:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4596:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1464,"nodeType":"ExpressionStatement","src":"4596:28:7"},{"expression":{"argumentTypes":null,"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1465,"name":"_stakersLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"4634:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1466,"name":"stakersLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"4650:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4634:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1468,"nodeType":"ExpressionStatement","src":"4634:28:7"},{"expression":{"argumentTypes":null,"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1469,"name":"_maxStakePerStaker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"4672:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1470,"name":"maxStakePerStaker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"4693:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4672:38:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1472,"nodeType":"ExpressionStatement","src":"4672:38:7"},{"expression":{"argumentTypes":null,"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1473,"name":"_rewardsPerBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"4720:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1474,"name":"rewardsPerBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"4739:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4720:34:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1476,"nodeType":"ExpressionStatement","src":"4720:34:7"},{"expression":{"argumentTypes":null,"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1477,"name":"_durationInBlocks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"4764:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1478,"name":"durationInBlocks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"4784:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4764:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1480,"nodeType":"ExpressionStatement","src":"4764:36:7"},{"expression":{"argumentTypes":null,"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1481,"name":"_isActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"4810:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"74727565","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4822:4:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4810:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1484,"nodeType":"ExpressionStatement","src":"4810:16:7"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1486,"name":"rewardToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"4867:11:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1487,"name":"stackingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"4892:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1488,"name":"startsAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1423,"src":"4919:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1489,"name":"lpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1427,"src":"4941:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1490,"name":"lpTotalLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"4965:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1491,"name":"stakersLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"4991:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1492,"name":"maxStakePerStaker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"5017:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1493,"name":"rewardsPerBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"5048:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1494,"name":"durationInBlocks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"5077:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1485,"name":"StakeCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"4841:12:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"}},"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4841:262:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1496,"nodeType":"EmitStatement","src":"4836:267:7"}]},"documentation":null,"id":1498,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1419,"mutability":"mutable","name":"rewardToken","nodeType":"VariableDeclaration","overrides":null,"scope":1498,"src":"4111:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1418,"name":"address","nodeType":"ElementaryTypeName","src":"4111:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1421,"mutability":"mutable","name":"stackingToken","nodeType":"VariableDeclaration","overrides":null,"scope":1498,"src":"4140:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1420,"name":"address","nodeType":"ElementaryTypeName","src":"4140:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1423,"mutability":"mutable","name":"startsAt","nodeType":"VariableDeclaration","overrides":null,"scope":1498,"src":"4171:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1422,"name":"uint256","nodeType":"ElementaryTypeName","src":"4171:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1425,"mutability":"mutable","name":"durationInBlocks","nodeType":"VariableDeclaration","overrides":null,"scope":1498,"src":"4197:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1424,"name":"uint256","nodeType":"ElementaryTypeName","src":"4197:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1427,"mutability":"mutable","name":"lpLockTime","nodeType":"VariableDeclaration","overrides":null,"scope":1498,"src":"4231:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1426,"name":"uint256","nodeType":"ElementaryTypeName","src":"4231:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1429,"mutability":"mutable","name":"stakersLimit","nodeType":"VariableDeclaration","overrides":null,"scope":1498,"src":"4259:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1428,"name":"uint256","nodeType":"ElementaryTypeName","src":"4259:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1431,"mutability":"mutable","name":"maxStakePerStaker","nodeType":"VariableDeclaration","overrides":null,"scope":1498,"src":"4289:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1430,"name":"uint256","nodeType":"ElementaryTypeName","src":"4289:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1433,"mutability":"mutable","name":"lpTotalLimit","nodeType":"VariableDeclaration","overrides":null,"scope":1498,"src":"4324:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1432,"name":"uint256","nodeType":"ElementaryTypeName","src":"4324:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1435,"mutability":"mutable","name":"rewardsPerBlock","nodeType":"VariableDeclaration","overrides":null,"scope":1498,"src":"4354:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1434,"name":"uint256","nodeType":"ElementaryTypeName","src":"4354:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4101:282:7"},"returnParameters":{"id":1437,"nodeType":"ParameterList","parameters":[],"src":"4391:0:7"},"scope":2238,"src":"4090:1020:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1501,"nodeType":"Block","src":"5143:2:7","statements":[]},"documentation":null,"id":1502,"implemented":true,"kind":"receive","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1499,"nodeType":"ParameterList","parameters":[],"src":"5123:2:7"},"returnParameters":{"id":1500,"nodeType":"ParameterList","parameters":[],"src":"5143:0:7"},"scope":2238,"src":"5116:29:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1542,"nodeType":"Block","src":"5302:259:7","statements":[{"assignments":[1517],"declarations":[{"constant":false,"id":1517,"mutability":"mutable","name":"staker","nodeType":"VariableDeclaration","overrides":null,"scope":1542,"src":"5312:21:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"},"typeName":{"contractScope":null,"id":1516,"name":"Staker","nodeType":"UserDefinedTypeName","referencedDeclaration":1178,"src":"5312:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"}},"value":null,"visibility":"internal"}],"id":1521,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1518,"name":"_stakers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"5336:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Staker_$1178_storage_$","typeString":"mapping(address => struct Staking.Staker storage ref)"}},"id":1520,"indexExpression":{"argumentTypes":null,"id":1519,"name":"stakerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"5345:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5336:23:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage","typeString":"struct Staking.Staker storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5312:47:7"},{"condition":{"argumentTypes":null,"id":1522,"name":"payHarvest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"5373:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1528,"nodeType":"IfStatement","src":"5369:65:7","trueBody":{"id":1527,"nodeType":"Block","src":"5385:49:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1524,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"5416:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}],"id":1523,"name":"_withdrawHarvest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5399:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Staker_$1178_storage_ptr_$returns$__$","typeString":"function (struct Staking.Staker storage pointer)"}},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5399:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1526,"nodeType":"ExpressionStatement","src":"5399:24:7"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1530,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"5455:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1531,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"5463:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":1532,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"5463:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1529,"name":"_withdrawLP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"5443:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Staker_$1178_storage_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Staking.Staker storage pointer,uint256)"}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5443:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1534,"nodeType":"ExpressionStatement","src":"5443:35:7"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1536,"name":"stakerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"5514:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1537,"name":"payHarvest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"5529:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1538,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"5541:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5541:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":1535,"name":"EmergencyWithdrawals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"5493:20:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bool_$_t_address_$returns$__$","typeString":"function (address,bool,address)"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5493:61:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1541,"nodeType":"EmitStatement","src":"5488:66:7"}]},"documentation":null,"functionSelector":"21d18adc","id":1543,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1509,"modifierName":{"argumentTypes":null,"id":1508,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"5251:9:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5251:9:7"},{"arguments":null,"id":1511,"modifierName":{"argumentTypes":null,"id":1510,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"5261:12:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5261:12:7"},{"arguments":[{"argumentTypes":null,"id":1513,"name":"stakerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"5287:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1514,"modifierName":{"argumentTypes":null,"id":1512,"name":"updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"5274:12:7","typeDescriptions":{"typeIdentifier":"t_modifier$_t_address_$","typeString":"modifier (address)"}},"nodeType":"ModifierInvocation","src":"5274:27:7"}],"name":"emergencyWithdrawal","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1504,"mutability":"mutable","name":"stakerAddress","nodeType":"VariableDeclaration","overrides":null,"scope":1543,"src":"5189:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1503,"name":"address","nodeType":"ElementaryTypeName","src":"5189:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1506,"mutability":"mutable","name":"payHarvest","nodeType":"VariableDeclaration","overrides":null,"scope":1543,"src":"5220:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1505,"name":"bool","nodeType":"ElementaryTypeName","src":"5220:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"5179:62:7"},"returnParameters":{"id":1515,"nodeType":"ParameterList","parameters":[],"src":"5302:0:7"},"scope":2238,"src":"5151:410:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1559,"nodeType":"Block","src":"5672:57:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1553,"name":"_stakers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"5699:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Staker_$1178_storage_$","typeString":"mapping(address => struct Staking.Staker storage ref)"}},"id":1556,"indexExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1554,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"5708:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5708:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5699:22:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage","typeString":"struct Staking.Staker storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Staker_$1178_storage","typeString":"struct Staking.Staker storage ref"}],"id":1552,"name":"_withdrawHarvest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"5682:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Staker_$1178_storage_ptr_$returns$__$","typeString":"function (struct Staking.Staker storage pointer)"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5682:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1558,"nodeType":"ExpressionStatement","src":"5682:40:7"}]},"documentation":null,"functionSelector":"4641257d","id":1560,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1546,"modifierName":{"argumentTypes":null,"id":1545,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"5632:12:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5632:12:7"},{"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1548,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"5658:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5658:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"id":1550,"modifierName":{"argumentTypes":null,"id":1547,"name":"updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"5645:12:7","typeDescriptions":{"typeIdentifier":"t_modifier$_t_address_$","typeString":"modifier (address)"}},"nodeType":"ModifierInvocation","src":"5645:26:7"}],"name":"harvest","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1544,"nodeType":"ParameterList","parameters":[],"src":"5620:2:7"},"returnParameters":{"id":1551,"nodeType":"ParameterList","parameters":[],"src":"5672:0:7"},"scope":2238,"src":"5604:125:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1583,"nodeType":"Block","src":"5829:95:7","statements":[{"assignments":[1572],"declarations":[{"constant":false,"id":1572,"mutability":"mutable","name":"staker","nodeType":"VariableDeclaration","overrides":null,"scope":1583,"src":"5839:21:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"},"typeName":{"contractScope":null,"id":1571,"name":"Staker","nodeType":"UserDefinedTypeName","referencedDeclaration":1178,"src":"5839:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"}},"value":null,"visibility":"internal"}],"id":1577,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1573,"name":"_stakers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"5863:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Staker_$1178_storage_$","typeString":"mapping(address => struct Staking.Staker storage ref)"}},"id":1576,"indexExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1574,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"5872:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5872:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5863:22:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage","typeString":"struct Staking.Staker storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5839:46:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1579,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"5902:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},{"argumentTypes":null,"id":1580,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"5910:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1578,"name":"_stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"5895:6:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Staker_$1178_storage_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Staking.Staker storage pointer,uint256)"}},"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5895:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1582,"nodeType":"ExpressionStatement","src":"5895:22:7"}]},"documentation":null,"functionSelector":"7547c7a3","id":1584,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1565,"modifierName":{"argumentTypes":null,"id":1564,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"5789:12:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5789:12:7"},{"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1567,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"5815:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5815:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"id":1569,"modifierName":{"argumentTypes":null,"id":1566,"name":"updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"5802:12:7","typeDescriptions":{"typeIdentifier":"t_modifier$_t_address_$","typeString":"modifier (address)"}},"nodeType":"ModifierInvocation","src":"5802:26:7"}],"name":"stakeTokens","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1562,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1584,"src":"5756:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1561,"name":"uint256","nodeType":"ElementaryTypeName","src":"5756:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5755:16:7"},"returnParameters":{"id":1570,"nodeType":"ParameterList","parameters":[],"src":"5829:0:7"},"scope":2238,"src":"5735:189:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1601,"nodeType":"Block","src":"5980:79:7","statements":[{"expression":{"argumentTypes":null,"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1591,"name":"_isActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"5990:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"6002:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5990:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1594,"nodeType":"ExpressionStatement","src":"5990:17:7"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1596,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"6032:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1597,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"6039:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6039:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":1595,"name":"ActiveSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"6022:9:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bool_$_t_address_$returns$__$","typeString":"function (bool,address)"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6022:30:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1600,"nodeType":"EmitStatement","src":"6017:35:7"}]},"documentation":null,"functionSelector":"acec338a","id":1602,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1589,"modifierName":{"argumentTypes":null,"id":1588,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"5970:9:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5970:9:7"}],"name":"setActive","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1586,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":1602,"src":"5949:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1585,"name":"bool","nodeType":"ElementaryTypeName","src":"5949:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"5948:12:7"},"returnParameters":{"id":1590,"nodeType":"ParameterList","parameters":[],"src":"5980:0:7"},"scope":2238,"src":"5930:129:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1619,"nodeType":"Block","src":"6137:120:7","statements":[{"expression":{"argumentTypes":null,"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1609,"name":"_rewardsPerBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"6147:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1610,"name":"_newRewardPerBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"6166:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6147:37:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1612,"nodeType":"ExpressionStatement","src":"6147:37:7"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1614,"name":"_newRewardPerBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"6217:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1615,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"6237:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6237:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":1613,"name":"RewardPerBlockSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"6199:17:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6199:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1618,"nodeType":"EmitStatement","src":"6194:56:7"}]},"documentation":null,"functionSelector":"bb872b4a","id":1620,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1607,"modifierName":{"argumentTypes":null,"id":1606,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"6127:9:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"6127:9:7"}],"name":"setRewardPerBlock","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1604,"mutability":"mutable","name":"_newRewardPerBlock","nodeType":"VariableDeclaration","overrides":null,"scope":1620,"src":"6092:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1603,"name":"uint256","nodeType":"ElementaryTypeName","src":"6092:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6091:28:7"},"returnParameters":{"id":1608,"nodeType":"ParameterList","parameters":[],"src":"6137:0:7"},"scope":2238,"src":"6065:192:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1699,"nodeType":"Block","src":"6510:741:7","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1637,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6524:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6524:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":1639,"name":"_startsAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"6542:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6524:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1650,"nodeType":"IfStatement","src":"6520:122:7","trueBody":{"id":1649,"nodeType":"Block","src":"6553:89:7","statements":[{"expression":{"argumentTypes":null,"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1641,"name":"_lpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"6567:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1642,"name":"newLpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"6581:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6567:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1644,"nodeType":"ExpressionStatement","src":"6567:27:7"},{"expression":{"argumentTypes":null,"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1645,"name":"_startsAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"6608:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1646,"name":"newStartsAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"6620:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6608:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1648,"nodeType":"ExpressionStatement","src":"6608:23:7"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1651,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6655:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6655:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":1653,"name":"_startsAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"6673:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6655:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1655,"name":"_lpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"6686:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"id":1656,"name":"newLpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"6700:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6686:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6655:58:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1664,"nodeType":"IfStatement","src":"6651:116:7","trueBody":{"id":1663,"nodeType":"Block","src":"6715:52:7","statements":[{"expression":{"argumentTypes":null,"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1659,"name":"_lpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"6729:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1660,"name":"newLpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"6743:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6729:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1662,"nodeType":"ExpressionStatement","src":"6729:27:7"}]}},{"expression":{"argumentTypes":null,"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1665,"name":"_finishBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"6776:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1666,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6791:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6791:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":1668,"name":"newBlocksDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"6806:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6791:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6776:47:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1671,"nodeType":"ExpressionStatement","src":"6776:47:7"},{"expression":{"argumentTypes":null,"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1672,"name":"_durationInBlocks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"6833:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1673,"name":"newBlocksDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"6853:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6833:37:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1675,"nodeType":"ExpressionStatement","src":"6833:37:7"},{"expression":{"argumentTypes":null,"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1676,"name":"_stakersLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"6880:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1677,"name":"newStakersLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"6896:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6880:31:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1679,"nodeType":"ExpressionStatement","src":"6880:31:7"},{"expression":{"argumentTypes":null,"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1680,"name":"_maxStakePerStaker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"6921:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1681,"name":"newMaxStakePerStaker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"6942:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6921:41:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1683,"nodeType":"ExpressionStatement","src":"6921:41:7"},{"expression":{"argumentTypes":null,"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1684,"name":"_rewardsPerBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"6972:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1685,"name":"newRewardPerBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"6991:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6972:36:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1687,"nodeType":"ExpressionStatement","src":"6972:36:7"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1689,"name":"_startsAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"7049:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1690,"name":"newBlocksDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"7072:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1691,"name":"_lpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"7103:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1692,"name":"newStakersLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"7128:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1693,"name":"newMaxStakePerStaker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"7157:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1694,"name":"newRewardPerBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"7191:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1695,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"7222:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7222:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":1688,"name":"StakeUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"7023:12:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,uint256,uint256,uint256,uint256,uint256,address)"}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7023:221:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1698,"nodeType":"EmitStatement","src":"7018:226:7"}]},"documentation":null,"functionSelector":"8cbf5309","id":1700,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1635,"modifierName":{"argumentTypes":null,"id":1634,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"6500:9:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"6500:9:7"}],"name":"updateStake","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1622,"mutability":"mutable","name":"newStartsAt","nodeType":"VariableDeclaration","overrides":null,"scope":1700,"src":"6293:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1621,"name":"uint256","nodeType":"ElementaryTypeName","src":"6293:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1624,"mutability":"mutable","name":"newBlocksDuration","nodeType":"VariableDeclaration","overrides":null,"scope":1700,"src":"6322:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint256","nodeType":"ElementaryTypeName","src":"6322:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1626,"mutability":"mutable","name":"newLpLockTime","nodeType":"VariableDeclaration","overrides":null,"scope":1700,"src":"6357:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1625,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1628,"mutability":"mutable","name":"newStakersLimit","nodeType":"VariableDeclaration","overrides":null,"scope":1700,"src":"6388:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1627,"name":"uint256","nodeType":"ElementaryTypeName","src":"6388:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1630,"mutability":"mutable","name":"newMaxStakePerStaker","nodeType":"VariableDeclaration","overrides":null,"scope":1700,"src":"6421:28:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1629,"name":"uint256","nodeType":"ElementaryTypeName","src":"6421:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1632,"mutability":"mutable","name":"newRewardPerBlock","nodeType":"VariableDeclaration","overrides":null,"scope":1700,"src":"6459:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1631,"name":"uint256","nodeType":"ElementaryTypeName","src":"6459:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6283:207:7"},"returnParameters":{"id":1636,"nodeType":"ParameterList","parameters":[],"src":"6510:0:7"},"scope":2238,"src":"6263:988:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1724,"nodeType":"Block","src":"7404:137:7","statements":[{"assignments":[1713],"declarations":[{"constant":false,"id":1713,"mutability":"mutable","name":"staker","nodeType":"VariableDeclaration","overrides":null,"scope":1724,"src":"7414:21:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"},"typeName":{"contractScope":null,"id":1712,"name":"Staker","nodeType":"UserDefinedTypeName","referencedDeclaration":1178,"src":"7414:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"}},"value":null,"visibility":"internal"}],"id":1718,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1714,"name":"_stakers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"7438:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Staker_$1178_storage_$","typeString":"mapping(address => struct Staking.Staker storage ref)"}},"id":1717,"indexExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1715,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"7447:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7447:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7438:22:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage","typeString":"struct Staking.Staker storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7414:46:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1720,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"7519:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},{"argumentTypes":null,"id":1721,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"7527:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1719,"name":"_withdrawLP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"7507:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Staker_$1178_storage_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Staking.Staker storage pointer,uint256)"}},"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7507:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1723,"nodeType":"ExpressionStatement","src":"7507:27:7"}]},"documentation":{"id":1701,"nodeType":"StructuredDocumentation","src":"7257:59:7","text":"Dev: withdraw both lp and reward tokens*"},"functionSelector":"2e1a7d4d","id":1725,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1706,"modifierName":{"argumentTypes":null,"id":1705,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"7364:12:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"7364:12:7"},{"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1708,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"7390:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7390:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"id":1710,"modifierName":{"argumentTypes":null,"id":1707,"name":"updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"7377:12:7","typeDescriptions":{"typeIdentifier":"t_modifier$_t_address_$","typeString":"modifier (address)"}},"nodeType":"ModifierInvocation","src":"7377:26:7"}],"name":"withdraw","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1725,"src":"7339:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1702,"name":"uint256","nodeType":"ElementaryTypeName","src":"7339:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7338:16:7"},"returnParameters":{"id":1711,"nodeType":"ParameterList","parameters":[],"src":"7404:0:7"},"scope":2238,"src":"7321:220:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1764,"nodeType":"Block","src":"7711:273:7","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1737,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7725:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"7725:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1739,"name":"_finishBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"7740:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":1740,"name":"BLOCKS_IN_YEAR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"7755:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7740:29:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7725:44:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1750,"nodeType":"IfStatement","src":"7721:155:7","trueBody":{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1744,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"7791:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":1745,"name":"_stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"7800:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7791:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a2063616e206e6f7420776974686472617720737461636b696e6720746f6b656e73206265666f7265206c6f636b2074696d65","id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7815:60:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_38b1bc11065cfc84f19936361998e6af7043a815e7e069654b6f67707c85a557","typeString":"literal_string \"Staking: can not withdraw stacking tokens before lock time\""},"value":"Staking: can not withdraw stacking tokens before lock time"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_38b1bc11065cfc84f19936361998e6af7043a815e7e069654b6f67707c85a557","typeString":"literal_string \"Staking: can not withdraw stacking tokens before lock time\""}],"id":1743,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7783:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7783:93:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1749,"nodeType":"ExpressionStatement","src":"7783:93:7"}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1752,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"7897:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7897:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":1754,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"7911:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1755,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"7918:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1751,"name":"sendTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2237,"src":"7886:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) returns (bool)"}},"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7886:39:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1757,"nodeType":"ExpressionStatement","src":"7886:39:7"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1759,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"7956:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1760,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"7964:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7964:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":1758,"name":"TokenWithdrawed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"7940:15:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7940:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1763,"nodeType":"EmitStatement","src":"7935:42:7"}]},"documentation":{"id":1726,"nodeType":"StructuredDocumentation","src":"7547:72:7","text":"Dev: owner or Creator can withdrawal Rewards tokens.*"},"functionSelector":"06b091f9","id":1765,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1733,"modifierName":{"argumentTypes":null,"id":1732,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"7688:12:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"7688:12:7"},{"arguments":null,"id":1735,"modifierName":{"argumentTypes":null,"id":1734,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"7701:9:7","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"7701:9:7"}],"name":"withdrawTokens","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1728,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1765,"src":"7648:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1727,"name":"address","nodeType":"ElementaryTypeName","src":"7648:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1730,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1765,"src":"7663:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1729,"name":"uint256","nodeType":"ElementaryTypeName","src":"7663:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7647:31:7"},"returnParameters":{"id":1736,"nodeType":"ParameterList","parameters":[],"src":"7711:0:7"},"scope":2238,"src":"7624:360:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1819,"nodeType":"Block","src":"8046:481:7","statements":[{"assignments":[1771],"declarations":[{"constant":false,"id":1771,"mutability":"mutable","name":"lastUpdateBlock","nodeType":"VariableDeclaration","overrides":null,"scope":1819,"src":"8056:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1770,"name":"uint256","nodeType":"ElementaryTypeName","src":"8056:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1773,"initialValue":{"argumentTypes":null,"id":1772,"name":"_lastUpdateBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"8082:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8056:42:7"},{"assignments":[1775],"declarations":[{"constant":false,"id":1775,"mutability":"mutable","name":"finishBlock","nodeType":"VariableDeclaration","overrides":null,"scope":1819,"src":"8108:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1774,"name":"uint256","nodeType":"ElementaryTypeName","src":"8108:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1777,"initialValue":{"argumentTypes":null,"id":1776,"name":"_finishBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"8130:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8108:34:7"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1778,"name":"_lpTotalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"8156:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8174:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8156:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1783,"nodeType":"IfStatement","src":"8152:33:7","trueBody":{"expression":{"argumentTypes":null,"hexValue":"30","id":1781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8184:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1769,"id":1782,"nodeType":"Return","src":"8177:8:7"}},{"assignments":[1785],"declarations":[{"constant":false,"id":1785,"mutability":"mutable","name":"lastBlock","nodeType":"VariableDeclaration","overrides":null,"scope":1819,"src":"8242:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1784,"name":"uint256","nodeType":"ElementaryTypeName","src":"8242:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1794,"initialValue":{"argumentTypes":null,"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1786,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8262:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8262:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"id":1788,"name":"finishBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1775,"src":"8277:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8262:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1791,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8305:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8305:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8262:55:7","trueExpression":{"argumentTypes":null,"id":1790,"name":"finishBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1775,"src":"8291:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8242:75:7"},{"assignments":[1796],"declarations":[{"constant":false,"id":1796,"mutability":"mutable","name":"rewardedBlocks","nodeType":"VariableDeclaration","overrides":null,"scope":1819,"src":"8327:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1795,"name":"uint256","nodeType":"ElementaryTypeName","src":"8327:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1805,"initialValue":{"argumentTypes":null,"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1797,"name":"lastUpdateBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"8352:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":1798,"name":"lastBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"8370:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8352:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"hexValue":"30","id":1803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8412:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8352:61:7","trueExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1800,"name":"lastBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"8382:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":1801,"name":"lastUpdateBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"8394:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8382:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8327:86:7"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1806,"name":"_rewardPerTokenStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"8431:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1807,"name":"_rewardsPerBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"8457:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"id":1808,"name":"rewardedBlocks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"8476:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8457:33:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"hexValue":"31","id":1810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8493:7:7","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1"},"src":"8457:43:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1812,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8456:45:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":1813,"name":"_lpTotalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"8504:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8456:62:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1815,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8455:64:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8431:88:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1817,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8430:90:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1769,"id":1818,"nodeType":"Return","src":"8423:97:7"}]},"documentation":null,"functionSelector":"cd3daf9d","id":1820,"implemented":true,"kind":"function","modifiers":[],"name":"rewardPerToken","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1766,"nodeType":"ParameterList","parameters":[],"src":"8013:2:7"},"returnParameters":{"id":1769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1768,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1820,"src":"8037:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1767,"name":"uint256","nodeType":"ElementaryTypeName","src":"8037:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8036:9:7"},"scope":2238,"src":"7990:537:7","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1985,"nodeType":"Block","src":"8597:1413:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1828,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"8615:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8624:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8615:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a20416d6f756e74206d7573742062652067726561746572207468616e207a65726f","id":1831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8627:43:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_81f7ebd5cb65a446a05a6e64e64fd0d3ce2ec58f154cd6bac5f7e5de24601dc2","typeString":"literal_string \"Staking: Amount must be greater than zero\""},"value":"Staking: Amount must be greater than zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_81f7ebd5cb65a446a05a6e64e64fd0d3ce2ec58f154cd6bac5f7e5de24601dc2","typeString":"literal_string \"Staking: Amount must be greater than zero\""}],"id":1827,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8607:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8607:64:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1833,"nodeType":"ExpressionStatement","src":"8607:64:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1835,"name":"_isActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"8689:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a2054686973207374616b6520697320696e616374697665206f72206e6f74206578697374","id":1836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:46:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_d423f282480e5ad7b53f494b722a5720b3f3adad0b6aad813dc1dca10c09a430","typeString":"literal_string \"Staking: This stake is inactive or not exist\""},"value":"Staking: This stake is inactive or not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d423f282480e5ad7b53f494b722a5720b3f3adad0b6aad813dc1dca10c09a430","typeString":"literal_string \"Staking: This stake is inactive or not exist\""}],"id":1834,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8681:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8681:66:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1838,"nodeType":"ExpressionStatement","src":"8681:66:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1840,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8765:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8765:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":1842,"name":"_startsAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"8784:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8765:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a2054686973207374616b696e6720686173206e6f74207374617274656420796574","id":1844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8795:43:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_22783f5d45999a6ed62f7d230948229a61211cbc3208d6180e06c6508b34f028","typeString":"literal_string \"Staking: This staking has not started yet\""},"value":"Staking: This staking has not started yet"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_22783f5d45999a6ed62f7d230948229a61211cbc3208d6180e06c6508b34f028","typeString":"literal_string \"Staking: This staking has not started yet\""}],"id":1839,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8757:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8757:82:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1846,"nodeType":"ExpressionStatement","src":"8757:82:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1848,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8857:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8857:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":1850,"name":"_finishBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"8873:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8857:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a2054686973207374616b696e672069732063757272656e746c7920636c6f736564","id":1852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8887:43:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_74a4c886ea03878d9585f0e934bc6c57f1c6c4b4bfb8356c40beb820f0747705","typeString":"literal_string \"Staking: This staking is currently closed\""},"value":"Staking: This staking is currently closed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_74a4c886ea03878d9585f0e934bc6c57f1c6c4b4bfb8356c40beb820f0747705","typeString":"literal_string \"Staking: This staking is currently closed\""}],"id":1847,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8849:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8849:82:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1854,"nodeType":"ExpressionStatement","src":"8849:82:7"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1855,"name":"_stakersLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"8945:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8945:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1865,"nodeType":"IfStatement","src":"8941:104:7","trueBody":{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1859,"name":"_numberOfStakers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"8973:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":1860,"name":"_stakersLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"8992:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8973:32:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a2054686973207374616b6520697320616c72656164792066756c6c","id":1862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9007:37:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_c958fa263741a61d923b707e82df0e09ae956da5f6534e9c986beaeefe20c92d","typeString":"literal_string \"Staking: This stake is already full\""},"value":"Staking: This stake is already full"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c958fa263741a61d923b707e82df0e09ae956da5f6534e9c986beaeefe20c92d","typeString":"literal_string \"Staking: This stake is already full\""}],"id":1858,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8965:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8965:80:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1864,"nodeType":"ExpressionStatement","src":"8965:80:7"}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1866,"name":"_lpTotalLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"9059:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9076:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9059:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1878,"nodeType":"IfStatement","src":"9055:124:7","trueBody":{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1870,"name":"_lpTotalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"9099:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":1871,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"9116:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9099:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":1873,"name":"_lpTotalLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"9126:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9099:40:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a2054686973207374616b6520697320616c72656164792066756c6c","id":1875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9141:37:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_c958fa263741a61d923b707e82df0e09ae956da5f6534e9c986beaeefe20c92d","typeString":"literal_string \"Staking: This stake is already full\""},"value":"Staking: This stake is already full"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c958fa263741a61d923b707e82df0e09ae956da5f6534e9c986beaeefe20c92d","typeString":"literal_string \"Staking: This stake is already full\""}],"id":1869,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9091:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9091:88:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1877,"nodeType":"ExpressionStatement","src":"9091:88:7"}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1879,"name":"_maxStakePerStaker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"9193:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9215:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9193:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1892,"nodeType":"IfStatement","src":"9189:140:7","trueBody":{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1883,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"9238:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":1884,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"9238:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":1885,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"9255:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9238:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":1887,"name":"_maxStakePerStaker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"9265:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9238:45:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a20596f757220746f74616c207374616b652073697a6520697320746f6f20626967","id":1889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9285:43:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_92752bdc012c54562c7f7815fc704fc693f1b3eeb23dd49c380144cd9c13a2e3","typeString":"literal_string \"Staking: Your total stake size is too big\""},"value":"Staking: Your total stake size is too big"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_92752bdc012c54562c7f7815fc704fc693f1b3eeb23dd49c380144cd9c13a2e3","typeString":"literal_string \"Staking: Your total stake size is too big\""}],"id":1882,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9230:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9230:99:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1891,"nodeType":"ExpressionStatement","src":"9230:99:7"}},{"expression":{"argumentTypes":null,"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1893,"name":"_lpTotalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"9339:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"argumentTypes":null,"id":1894,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"9357:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9339:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1896,"nodeType":"ExpressionStatement","src":"9339:24:7"},{"expression":{"argumentTypes":null,"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1897,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"9373:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":1899,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"9373:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"argumentTypes":null,"id":1900,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"9391:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9373:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1902,"nodeType":"ExpressionStatement","src":"9373:24:7"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1903,"name":"_stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"9411:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9436:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1905,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9428:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1904,"name":"address","nodeType":"ElementaryTypeName","src":"9428:7:7","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9428:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"9411:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1946,"nodeType":"Block","src":"9621:100:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1937,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"9674:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9674:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1941,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9696:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Staking_$2238","typeString":"contract Staking"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Staking_$2238","typeString":"contract Staking"}],"id":1940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9688:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1939,"name":"address","nodeType":"ElementaryTypeName","src":"9688:7:7","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9688:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":1943,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"9703:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1934,"name":"_stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"9642:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1933,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"9635:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$542_$","typeString":"type(contract IERC20)"}},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9635:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":601,"src":"9635:38:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$542_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9635:75:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1945,"nodeType":"ExpressionStatement","src":"9635:75:7"}]},"id":1947,"nodeType":"IfStatement","src":"9407:314:7","trueBody":{"id":1932,"nodeType":"Block","src":"9440:175:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1910,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9462:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9462:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":1912,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"9475:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9462:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a2057726f6e6720616d6f756e74","id":1914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9483:23:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_d3f6b412f205752605097e1d1ca197f4f65d004d800bded72734ed1e0875a39f","typeString":"literal_string \"Staking: Wrong amount\""},"value":"Staking: Wrong amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d3f6b412f205752605097e1d1ca197f4f65d004d800bded72734ed1e0875a39f","typeString":"literal_string \"Staking: Wrong amount\""}],"id":1909,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9454:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9454:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1916,"nodeType":"ExpressionStatement","src":"9454:53:7"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1917,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9525:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9525:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"id":1919,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"9537:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9525:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1931,"nodeType":"IfStatement","src":"9521:83:7","trueBody":{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1922,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"9556:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9556:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":1924,"name":"_stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"9570:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1925,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9585:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9585:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":1927,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"9597:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9585:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1921,"name":"sendTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2237,"src":"9545:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) returns (bool)"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9545:59:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1930,"nodeType":"ExpressionStatement","src":"9545:59:7"}}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1948,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"9734:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":1949,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startBlock","nodeType":"MemberAccess","referencedDeclaration":1175,"src":"9734:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9755:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9734:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1978,"nodeType":"IfStatement","src":"9730:217:7","trueBody":{"id":1977,"nodeType":"Block","src":"9758:189:7","statements":[{"expression":{"argumentTypes":null,"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1952,"name":"_numberOfStakers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"9772:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"argumentTypes":null,"hexValue":"31","id":1953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9792:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9772:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1955,"nodeType":"ExpressionStatement","src":"9772:21:7"},{"expression":{"argumentTypes":null,"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1956,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"9807:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":1958,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"startBlock","nodeType":"MemberAccess","referencedDeclaration":1175,"src":"9807:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1959,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9827:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9827:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9807:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1962,"nodeType":"ExpressionStatement","src":"9807:32:7"},{"expression":{"argumentTypes":null,"id":1968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1963,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"9853:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":1965,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"9853:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1966,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9872:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9872:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9853:34:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1969,"nodeType":"ExpressionStatement","src":"9853:34:7"},{"expression":{"argumentTypes":null,"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1970,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"9901:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":1972,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"stakerAddress","nodeType":"MemberAccess","referencedDeclaration":1167,"src":"9901:20:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1973,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"9924:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9924:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"9901:35:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1976,"nodeType":"ExpressionStatement","src":"9901:35:7"}]}},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1980,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"9974:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1981,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"9982:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":1982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"stakerAddress","nodeType":"MemberAccess","referencedDeclaration":1167,"src":"9982:20:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1979,"name":"TokensStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"9961:12:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9961:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1984,"nodeType":"EmitStatement","src":"9956:47:7"}]},"documentation":null,"id":1986,"implemented":true,"kind":"function","modifiers":[],"name":"_stake","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1822,"mutability":"mutable","name":"staker","nodeType":"VariableDeclaration","overrides":null,"scope":1986,"src":"8549:21:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"},"typeName":{"contractScope":null,"id":1821,"name":"Staker","nodeType":"UserDefinedTypeName","referencedDeclaration":1178,"src":"8549:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"}},"value":null,"visibility":"internal"},{"constant":false,"id":1824,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1986,"src":"8572:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1823,"name":"uint256","nodeType":"ElementaryTypeName","src":"8572:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8548:39:7"},"returnParameters":{"id":1826,"nodeType":"ParameterList","parameters":[],"src":"8597:0:7"},"scope":2238,"src":"8533:1477:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2083,"nodeType":"Block","src":"10085:808:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1994,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"10103:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1995,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"10113:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":1996,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"10113:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"457863656564732062616c616e6365","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10129:17:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_338b6e185c050a590dcc56bd58be4465ffbe359a5a3145308748aea699eb02c6","typeString":"literal_string \"Exceeds balance\""},"value":"Exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_338b6e185c050a590dcc56bd58be4465ffbe359a5a3145308748aea699eb02c6","typeString":"literal_string \"Exceeds balance\""}],"id":1993,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10095:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10095:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2000,"nodeType":"ExpressionStatement","src":"10095:52:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2002,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"10209:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10218:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10209:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42616c616e6365206d7573742062652067726561746572207468616e207a65726f","id":2005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10221:35:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_460ad4a3cc84aac16227e1ec877389d8e92a5f6f6f3e5a2fe82819b54dc63aaa","typeString":"literal_string \"Balance must be greater than zero\""},"value":"Balance must be greater than zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_460ad4a3cc84aac16227e1ec877389d8e92a5f6f6f3e5a2fe82819b54dc63aaa","typeString":"literal_string \"Balance must be greater than zero\""}],"id":2001,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10201:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10201:56:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2007,"nodeType":"ExpressionStatement","src":"10201:56:7"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":2008,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"10271:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10271:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":2010,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"10287:5:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10287:7:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10271:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2030,"nodeType":"IfStatement","src":"10267:224:7","trueBody":{"id":2029,"nodeType":"Block","src":"10296:195:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2014,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10335:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10335:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2016,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"10354:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2017,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"10354:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":2018,"name":"_lpLockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"10373:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10354:30:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10335:49:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2021,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10388:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10388:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"id":2023,"name":"_finishBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"10403:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10388:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10335:80:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a20546f6f206561726c7920666f72207769746864726177","id":2026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10433:33:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_a28e57c70757c8e6a3063eb5119ece1fb6f3ad401f2f96a26b63e31137cde717","typeString":"literal_string \"Staking: Too early for withdraw\""},"value":"Staking: Too early for withdraw"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a28e57c70757c8e6a3063eb5119ece1fb6f3ad401f2f96a26b63e31137cde717","typeString":"literal_string \"Staking: Too early for withdraw\""}],"id":2013,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10310:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10310:170:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2028,"nodeType":"ExpressionStatement","src":"10310:170:7"}]}},{"expression":{"argumentTypes":null,"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2031,"name":"_lpTotalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"10500:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"argumentTypes":null,"id":2032,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"10518:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10500:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2034,"nodeType":"ExpressionStatement","src":"10500:24:7"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2035,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"10538:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2036,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"10548:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2037,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"10548:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10538:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2068,"nodeType":"Block","src":"10717:49:7","statements":[{"expression":{"argumentTypes":null,"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2062,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"10731:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2064,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"10731:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"argumentTypes":null,"id":2065,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"10749:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10731:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2067,"nodeType":"ExpressionStatement","src":"10731:24:7"}]},"id":2069,"nodeType":"IfStatement","src":"10534:232:7","trueBody":{"id":2061,"nodeType":"Block","src":"10564:147:7","statements":[{"expression":{"argumentTypes":null,"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2039,"name":"_numberOfStakers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"10578:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"argumentTypes":null,"hexValue":"31","id":2040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10598:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10578:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2042,"nodeType":"ExpressionStatement","src":"10578:21:7"},{"expression":{"argumentTypes":null,"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2043,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"10613:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2045,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"startBlock","nodeType":"MemberAccess","referencedDeclaration":1175,"src":"10613:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"30","id":2046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10633:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10613:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2048,"nodeType":"ExpressionStatement","src":"10613:21:7"},{"expression":{"argumentTypes":null,"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2049,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"10648:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2051,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"10648:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"30","id":2052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10667:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10648:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2054,"nodeType":"ExpressionStatement","src":"10648:20:7"},{"expression":{"argumentTypes":null,"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2055,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"10682:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2057,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"10682:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"30","id":2058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10699:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10682:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2060,"nodeType":"ExpressionStatement","src":"10682:18:7"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2071,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"10787:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2072,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"stakerAddress","nodeType":"MemberAccess","referencedDeclaration":1167,"src":"10787:20:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2073,"name":"_stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"10809:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2074,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"10824:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2070,"name":"sendTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2237,"src":"10776:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) returns (bool)"}},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10776:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2076,"nodeType":"ExpressionStatement","src":"10776:55:7"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2078,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"10857:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2079,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"10865:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2080,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"stakerAddress","nodeType":"MemberAccess","referencedDeclaration":1167,"src":"10865:20:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2077,"name":"Withdrawed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"10846:10:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10846:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2082,"nodeType":"EmitStatement","src":"10841:45:7"}]},"documentation":null,"id":2084,"implemented":true,"kind":"function","modifiers":[],"name":"_withdrawLP","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1988,"mutability":"mutable","name":"staker","nodeType":"VariableDeclaration","overrides":null,"scope":2084,"src":"10037:21:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"},"typeName":{"contractScope":null,"id":1987,"name":"Staker","nodeType":"UserDefinedTypeName","referencedDeclaration":1178,"src":"10037:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"}},"value":null,"visibility":"internal"},{"constant":false,"id":1990,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":2084,"src":"10060:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1989,"name":"uint256","nodeType":"ElementaryTypeName","src":"10060:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10036:39:7"},"returnParameters":{"id":1992,"nodeType":"ParameterList","parameters":[],"src":"10085:0:7"},"scope":2238,"src":"10016:877:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2133,"nodeType":"Block","src":"10957:358:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2090,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"10975:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2091,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startBlock","nodeType":"MemberAccess","referencedDeclaration":1175,"src":"10975:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10996:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10975:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a20596f7520617265206e6f742061207374616b6572","id":2094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10999:31:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_4854f52fe55c8a2dd18fdce349cdb1489c9a9925af4f7bf5474e6ae2c4956c77","typeString":"literal_string \"Staking: You are not a staker\""},"value":"Staking: You are not a staker"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4854f52fe55c8a2dd18fdce349cdb1489c9a9925af4f7bf5474e6ae2c4956c77","typeString":"literal_string \"Staking: You are not a staker\""}],"id":2089,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10967:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10967:64:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2096,"nodeType":"ExpressionStatement","src":"10967:64:7"},{"assignments":[2098],"declarations":[{"constant":false,"id":2098,"mutability":"mutable","name":"reward","nodeType":"VariableDeclaration","overrides":null,"scope":2133,"src":"11041:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2097,"name":"uint256","nodeType":"ElementaryTypeName","src":"11041:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2101,"initialValue":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2099,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"11058:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2100,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"rewards","nodeType":"MemberAccess","referencedDeclaration":1171,"src":"11058:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11041:31:7"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2102,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2098,"src":"11086:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11095:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11086:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2126,"nodeType":"IfStatement","src":"11082:173:7","trueBody":{"id":2125,"nodeType":"Block","src":"11098:157:7","statements":[{"expression":{"argumentTypes":null,"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2105,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"11112:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2107,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"rewards","nodeType":"MemberAccess","referencedDeclaration":1171,"src":"11112:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"30","id":2108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11129:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11112:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2110,"nodeType":"ExpressionStatement","src":"11112:18:7"},{"expression":{"argumentTypes":null,"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2111,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"11144:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2113,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"startBlock","nodeType":"MemberAccess","referencedDeclaration":1175,"src":"11144:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2114,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"11164:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"11164:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11144:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2117,"nodeType":"ExpressionStatement","src":"11144:32:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2119,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"11201:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2120,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"stakerAddress","nodeType":"MemberAccess","referencedDeclaration":1167,"src":"11201:20:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2121,"name":"_rewardToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"11223:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2122,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2098,"src":"11237:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2118,"name":"sendTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2237,"src":"11190:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) returns (bool)"}},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11190:54:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2124,"nodeType":"ExpressionStatement","src":"11190:54:7"}]}},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2128,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2098,"src":"11279:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2129,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"11287:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2130,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"stakerAddress","nodeType":"MemberAccess","referencedDeclaration":1167,"src":"11287:20:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2127,"name":"Harvested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"11269:9:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11269:39:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2132,"nodeType":"EmitStatement","src":"11264:44:7"}]},"documentation":null,"id":2134,"implemented":true,"kind":"function","modifiers":[],"name":"_withdrawHarvest","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2086,"mutability":"mutable","name":"staker","nodeType":"VariableDeclaration","overrides":null,"scope":2134,"src":"10925:21:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"},"typeName":{"contractScope":null,"id":2085,"name":"Staker","nodeType":"UserDefinedTypeName","referencedDeclaration":1178,"src":"10925:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"}},"value":null,"visibility":"internal"}],"src":"10924:23:7"},"returnParameters":{"id":2088,"nodeType":"ParameterList","parameters":[],"src":"10957:0:7"},"scope":2238,"src":"10899:416:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2175,"nodeType":"Block","src":"11366:318:7","statements":[{"assignments":[2139],"declarations":[{"constant":false,"id":2139,"mutability":"mutable","name":"staker","nodeType":"VariableDeclaration","overrides":null,"scope":2175,"src":"11376:21:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"},"typeName":{"contractScope":null,"id":2138,"name":"Staker","nodeType":"UserDefinedTypeName","referencedDeclaration":1178,"src":"11376:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker"}},"value":null,"visibility":"internal"}],"id":2143,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2140,"name":"_stakers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"11400:8:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Staker_$1178_storage_$","typeString":"mapping(address => struct Staking.Staker storage ref)"}},"id":2142,"indexExpression":{"argumentTypes":null,"id":2141,"name":"stakerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"11409:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11400:23:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage","typeString":"struct Staking.Staker storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11376:47:7"},{"expression":{"argumentTypes":null,"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2144,"name":"_rewardPerTokenStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"11433:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":2145,"name":"rewardPerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"11457:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11457:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11433:40:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2148,"nodeType":"ExpressionStatement","src":"11433:40:7"},{"expression":{"argumentTypes":null,"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2149,"name":"_lastUpdateBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"11483:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2150,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"11502:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"11502:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":2152,"name":"_finishBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"11517:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11502:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"id":2156,"name":"_finishBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"11547:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11502:57:7","trueExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2154,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"11532:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"11532:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11483:76:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2159,"nodeType":"ExpressionStatement","src":"11483:76:7"},{"expression":{"argumentTypes":null,"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2160,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"11569:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2162,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"rewards","nodeType":"MemberAccess","referencedDeclaration":1171,"src":"11569:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2164,"name":"stakerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"11593:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2163,"name":"earned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"11586:6:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11586:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11569:38:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2167,"nodeType":"ExpressionStatement","src":"11569:38:7"},{"expression":{"argumentTypes":null,"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2168,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"11617:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Staker_$1178_storage_ptr","typeString":"struct Staking.Staker storage pointer"}},"id":2170,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"rewardPerTokenPaid","nodeType":"MemberAccess","referencedDeclaration":1173,"src":"11617:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2171,"name":"_rewardPerTokenStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"11645:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11617:49:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2173,"nodeType":"ExpressionStatement","src":"11617:49:7"},{"id":2174,"nodeType":"PlaceholderStatement","src":"11676:1:7"}]},"documentation":null,"id":2176,"name":"updateReward","nodeType":"ModifierDefinition","overrides":null,"parameters":{"id":2137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2136,"mutability":"mutable","name":"stakerAddress","nodeType":"VariableDeclaration","overrides":null,"scope":2176,"src":"11343:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2135,"name":"address","nodeType":"ElementaryTypeName","src":"11343:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"11342:23:7"},"src":"11321:363:7","virtual":false,"visibility":"internal"},{"body":{"id":2236,"nodeType":"Block","src":"11963:390:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2190,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"11997:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2189,"name":"getTokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"11981:15:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11981:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":2192,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"12007:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11981:32:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"5374616b696e673a206e6f7420656e6f75676820746f6b656e73","id":2194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12015:28:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_aad488eeea14738cef0d817628fc4af4e8ee215e2b4bbc6c497fbf6b118b336e","typeString":"literal_string \"Staking: not enough tokens\""},"value":"Staking: not enough tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aad488eeea14738cef0d817628fc4af4e8ee215e2b4bbc6c497fbf6b118b336e","typeString":"literal_string \"Staking: not enough tokens\""}],"id":2188,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11973:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11973:71:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2196,"nodeType":"ExpressionStatement","src":"11973:71:7"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2197,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"12058:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12075:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12067:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2198,"name":"address","nodeType":"ElementaryTypeName","src":"12067:7:7","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12067:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"12058:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2234,"nodeType":"Block","src":"12249:98:7","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":2227,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"12290:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_payable_$","typeString":"function () view returns (address payable)"}},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12290:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2229,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"12304:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2224,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"12270:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2223,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"12263:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$542_$","typeString":"type(contract IERC20)"}},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12263:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$542","typeString":"contract IERC20"}},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":576,"src":"12263:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$542_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12263:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2231,"nodeType":"ExpressionStatement","src":"12263:48:7"},{"expression":{"argumentTypes":null,"hexValue":"74727565","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12332:4:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2187,"id":2233,"nodeType":"Return","src":"12325:11:7"}]},"id":2235,"nodeType":"IfStatement","src":"12054:293:7","trueBody":{"id":2222,"nodeType":"Block","src":"12079:164:7","statements":[{"assignments":[2204,null],"declarations":[{"constant":false,"id":2204,"mutability":"mutable","name":"sent","nodeType":"VariableDeclaration","overrides":null,"scope":2222,"src":"12094:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2203,"name":"bool","nodeType":"ElementaryTypeName","src":"12094:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},null],"id":2214,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12141:2:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2207,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"12117:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12109:8:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2205,"name":"address","nodeType":"ElementaryTypeName","src":"12109:8:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12109:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","referencedDeclaration":null,"src":"12109:16:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"argumentTypes":null,"id":2210,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"12133:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"12109:31:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12109:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"12093:51:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2216,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2204,"src":"12166:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"47616d655374616b653a206661696c656420746f2073656e6420546f6b656e73","id":2217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12172:34:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_391c3dc11174b5f3ec68f419f25599ce3e7ddeb9ef1bd8bb71e3d34cb2396f7d","typeString":"literal_string \"GameStake: failed to send Tokens\""},"value":"GameStake: failed to send Tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_391c3dc11174b5f3ec68f419f25599ce3e7ddeb9ef1bd8bb71e3d34cb2396f7d","typeString":"literal_string \"GameStake: failed to send Tokens\""}],"id":2215,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12158:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12158:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2219,"nodeType":"ExpressionStatement","src":"12158:49:7"},{"expression":{"argumentTypes":null,"hexValue":"74727565","id":2220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12228:4:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2187,"id":2221,"nodeType":"Return","src":"12221:11:7"}]}}]},"documentation":{"id":2177,"nodeType":"StructuredDocumentation","src":"11690:182:7","text":"@dev Function is used to transfer native tokens from contract.\n     * @param to is address of recipient.\n@param amount of native tokens to transfer.*"},"id":2237,"implemented":true,"kind":"function","modifiers":[],"name":"sendTokens","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2179,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":2237,"src":"11897:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2178,"name":"address","nodeType":"ElementaryTypeName","src":"11897:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2181,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":2237,"src":"11909:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2180,"name":"address","nodeType":"ElementaryTypeName","src":"11909:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2183,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":2237,"src":"11924:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2182,"name":"uint256","nodeType":"ElementaryTypeName","src":"11924:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11896:43:7"},"returnParameters":{"id":2187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2186,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":2237,"src":"11957:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2185,"name":"bool","nodeType":"ElementaryTypeName","src":"11957:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"11956:6:7"},"scope":2238,"src":"11877:476:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2239,"src":"329:12026:7"}],"src":"39:12317:7"},"id":7}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. * By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. * This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. * By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. * This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"methods":{}}}},"@openzeppelin/contracts/math/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","methods":{}},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122047fb4c5018149024deeadb2882e9630591bd0707bcc885a51dc4f360e125d7ab64736f6c63430006060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0xFB 0x4C POP XOR EQ SWAP1 0x24 0xDE 0xEA 0xDB 0x28 DUP3 0xE9 PUSH4 0x591BD07 SMOD 0xBC 0xC8 DUP6 0xA5 SAR 0xC4 RETURN PUSH1 0xE1 0x25 0xD7 0xAB PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ","sourceMap":"630:6594:1:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122047fb4c5018149024deeadb2882e9630591bd0707bcc885a51dc4f360e125d7ab64736f6c63430006060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0xFB 0x4C POP XOR EQ SWAP1 0x24 0xDE 0xEA 0xDB 0x28 DUP3 0xE9 PUSH4 0x591BD07 SMOD 0xBC 0xC8 DUP6 0xA5 SAR 0xC4 RETURN PUSH1 0xE1 0x25 0xD7 0xAB PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ","sourceMap":"630:6594:1:-:0;;;;;;12:1:-1;9;2:12"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"methods":{}}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default.     * This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `recipient`.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a {Transfer} event."}}},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default.     * This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.     * Returns a boolean value indicating whether the operation succeeded.     * Emits a {Transfer} event.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"methods":{}}}},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","methods":{},"title":"SafeERC20"},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eda930571f5aa5c87be582abf8016f18c767cc58aed5240f9a34f8b7df9d0fd964736f6c63430006060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xA9 ADDRESS JUMPI 0x1F GAS 0xA5 0xC8 PUSH28 0xE582ABF8016F18C767CC58AED5240F9A34F8B7DF9D0FD964736F6C63 NUMBER STOP MOD MOD STOP CALLER ","sourceMap":"616:3104:3:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eda930571f5aa5c87be582abf8016f18c767cc58aed5240f9a34f8b7df9d0fd964736f6c63430006060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0xA9 ADDRESS JUMPI 0x1F GAS 0xA5 0xC8 PUSH28 0xE582ABF8016F18C767CC58AED5240F9A34F8B7DF9D0FD964736F6C63 NUMBER STOP MOD MOD STOP CALLER ","sourceMap":"616:3104:3:-:0;;;;;;12:1:-1;9;2:12"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"methods\":{},\"title\":\"SafeERC20\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"methods":{}}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","methods":{}},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122044177d8cd97331ca15c0a04b8892bcd02b9ba863f00b6a679df57f938f9901e164736f6c63430006060033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIFFICULTY OR PUSH30 0x8CD97331CA15C0A04B8892BCD02B9BA863F00B6A679DF57F938F9901E164 PUSH20 0x6F6C634300060600330000000000000000000000 ","sourceMap":"134:7684:4:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122044177d8cd97331ca15c0a04b8892bcd02b9ba863f00b6a679df57f938f9901e164736f6c63430006060033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIFFICULTY OR PUSH30 0x8CD97331CA15C0A04B8892BCD02B9BA863F00B6A679DF57F938F9901E164 PUSH20 0x6F6C634300060600330000000000000000000000 ","sourceMap":"134:7684:4:-:0;;;;;;12:1:-1;9;2:12"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_verifyCallResult(bool,bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"methods":{}}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"methods":{}},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"methods":{}}}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. * Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. * TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","methods":{}},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. * Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. * TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1085,"contract":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"methods":{}}}},"contracts/periphery/test/Staking.sol":{"Staking":{"abi":[{"inputs":[{"internalType":"address","name":"rewardToken","type":"address"},{"internalType":"address","name":"stackingToken","type":"address"},{"internalType":"uint256","name":"startsAt","type":"uint256"},{"internalType":"uint256","name":"durationInBlocks","type":"uint256"},{"internalType":"uint256","name":"lpLockTime","type":"uint256"},{"internalType":"uint256","name":"stakersLimit","type":"uint256"},{"internalType":"uint256","name":"maxStakePerStaker","type":"uint256"},{"internalType":"uint256","name":"lpTotalLimit","type":"uint256"},{"internalType":"uint256","name":"rewardsPerBlock","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"value","type":"bool"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"ActiveSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"stakerAddress","type":"address"},{"indexed":false,"internalType":"bool","name":"payHarvest","type":"bool"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"EmergencyWithdrawals","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"Harvested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newMaxStakePerStaker","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"MaxStakePerStakerSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"newRewardPerBlock","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"RewardPerBlockSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"tokenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"RewardsDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"rewardToken","type":"address"},{"indexed":false,"internalType":"address","name":"stackingToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"startsAt","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lpLockTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lpTotalLimit","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stakersLimit","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxStakePerStaker","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rewardsPerBlock","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"durationInBlocks","type":"uint256"}],"name":"StakeCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"startsAt","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"blocksDuration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lpLockTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stakersLimit","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxStakePerStaker","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"newRewardPerBlock","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"StakeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"TokenWithdrawed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"TokensStaked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"Withdrawed","type":"event"},{"inputs":[],"name":"BLOCKS_IN_YEAR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"stakerAddress","type":"address"}],"name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"stakerAddress","type":"address"},{"internalType":"bool","name":"payHarvest","type":"bool"}],"name":"emergencyWithdrawal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getStakeConditionsInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTokenBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserInfo","outputs":[{"components":[{"internalType":"address","name":"stakerAddress","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"rewards","type":"uint256"},{"internalType":"uint256","name":"rewardPerTokenPaid","type":"uint256"},{"internalType":"uint256","name":"startBlock","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"}],"internalType":"struct Staking.Staker","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"harvest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"value","type":"bool"}],"name":"setActive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newRewardPerBlock","type":"uint256"}],"name":"setRewardPerBlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"stakeTokens","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newStartsAt","type":"uint256"},{"internalType":"uint256","name":"newBlocksDuration","type":"uint256"},{"internalType":"uint256","name":"newLpLockTime","type":"uint256"},{"internalType":"uint256","name":"newStakersLimit","type":"uint256"},{"internalType":"uint256","name":"newMaxStakePerStaker","type":"uint256"},{"internalType":"uint256","name":"newRewardPerBlock","type":"uint256"}],"name":"updateStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x21BB CODESIZE SUB DUP1 PUSH3 0x21BB DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1B7 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x49 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x195 AND JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP DUP9 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP8 PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP7 PUSH1 0x5 DUP2 SWAP1 SSTORE POP DUP6 NUMBER ADD PUSH1 0x7 DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x8 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0xB DUP2 SWAP1 SSTORE POP DUP4 PUSH1 0xC DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xD DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0xE DUP2 SWAP1 SSTORE POP DUP6 PUSH1 0x6 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x11 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5568E5315553BC68E64DBD9441E17F55C9C1FAF3A4773868417BB4E352ADADF0 DUP10 DUP10 DUP10 DUP9 DUP7 DUP10 DUP10 DUP9 DUP15 PUSH1 0x40 MLOAD PUSH3 0x17E SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x234 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP PUSH3 0x281 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP11 DUP13 SUB SLT ISZERO PUSH3 0x1D6 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH3 0x1E2 DUP12 DUP12 PUSH3 0x199 JUMP JUMPDEST SWAP9 POP PUSH3 0x1F3 DUP12 PUSH1 0x20 DUP13 ADD PUSH3 0x199 JUMP JUMPDEST SWAP8 POP PUSH1 0x40 DUP11 ADD MLOAD SWAP7 POP PUSH1 0x60 DUP11 ADD MLOAD SWAP6 POP PUSH1 0x80 DUP11 ADD MLOAD SWAP5 POP PUSH1 0xA0 DUP11 ADD MLOAD SWAP4 POP PUSH1 0xC0 DUP11 ADD MLOAD SWAP3 POP PUSH1 0xE0 DUP11 ADD MLOAD SWAP2 POP PUSH2 0x100 DUP11 ADD MLOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP10 DUP11 AND DUP2 MSTORE SWAP8 SWAP1 SWAP9 AND PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x40 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x120 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1F2A DUP1 PUSH3 0x291 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x74A4030F GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0xACEC338A GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xCD3DAF9D GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xCD3DAF9D EQ PUSH2 0x32D JUMPI DUP1 PUSH4 0xDD421CD5 EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x357 JUMPI PUSH2 0x133 JUMP JUMPDEST DUP1 PUSH4 0xACEC338A EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0xBB872B4A EQ PUSH2 0x30D JUMPI PUSH2 0x133 JUMP JUMPDEST DUP1 PUSH4 0x74A4030F EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0x7547C7A3 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x8CBF5309 EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2CB JUMPI PUSH2 0x133 JUMP JUMPDEST DUP1 PUSH4 0x3AECD0E3 GT PUSH2 0xFC JUMPI DUP1 PUSH4 0x4D1F7E65 GT PUSH2 0xE1 JUMPI DUP1 PUSH4 0x4D1F7E65 EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x6386C1C7 EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x259 JUMPI PUSH2 0x133 JUMP JUMPDEST DUP1 PUSH4 0x3AECD0E3 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x4641257D EQ PUSH2 0x1F0 JUMPI PUSH2 0x133 JUMP JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x6B091F9 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x21D18ADC EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x1B0 JUMPI PUSH2 0x133 JUMP JUMPDEST CALLDATASIZE PUSH2 0x133 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x377 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x165 SWAP2 SWAP1 PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x189 CALLDATASIZE PUSH1 0x4 PUSH2 0x1660 JUMP JUMPDEST PUSH2 0x429 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x1629 JUMP JUMPDEST PUSH2 0x539 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x1CB CALLDATASIZE PUSH1 0x4 PUSH2 0x16C2 JUMP JUMPDEST PUSH2 0x68B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x750 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x803 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x211 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x165 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E8F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24C PUSH2 0x247 CALLDATASIZE PUSH1 0x4 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x8DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x165 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x947 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x283 PUSH2 0x9DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x165 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E1F JUMP JUMPDEST PUSH2 0x18E PUSH2 0x2A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x16C2 JUMP JUMPDEST PUSH2 0xA17 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x2C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x16F2 JUMP JUMPDEST PUSH2 0xAD2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E0 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x165 SWAP2 SWAP1 PUSH2 0x1750 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x168A JUMP JUMPDEST PUSH2 0xBC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x328 CALLDATASIZE PUSH1 0x4 PUSH2 0x16C2 JUMP JUMPDEST PUSH2 0xC78 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x339 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0xCFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0xD6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x372 CALLDATASIZE PUSH1 0x4 PUSH2 0x160E JUMP JUMPDEST PUSH2 0xD71 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x381 PUSH2 0x15B2 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0x1 DUP2 ADD SLOAD SWAP3 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP2 ADD SLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x3E9 PUSH2 0xCFD JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x3FA JUMPI PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x41F JUMP JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH8 0xDE0B6B3A7640000 DUP4 PUSH1 0x60 ADD MLOAD DUP4 SUB DUP5 PUSH1 0x20 ADD MLOAD MUL DUP2 PUSH2 0x41C JUMPI INVALID JUMPDEST DIV ADD JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x455 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x462 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x473 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x499 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH3 0x201480 PUSH1 0x7 SLOAD ADD NUMBER LT ISZERO PUSH2 0x4D6 JUMPI PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x4D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x18D0 JUMP JUMPDEST PUSH2 0x4E8 PUSH2 0x4E1 PUSH2 0xE3E JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE42 JUMP JUMPDEST POP PUSH2 0x4F1 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x549F2EB667BA04B83E4C67D04BAC415B0D7F88AD1FC93A2C42E2BE587BE13996 DUP3 PUSH1 0x40 MLOAD PUSH2 0x529 SWAP2 SWAP1 PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH2 0x541 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x552 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x578 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x59B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 SWAP1 PUSH2 0x5C5 PUSH2 0xCFD JUMP JUMPDEST PUSH1 0xF SSTORE PUSH1 0x7 SLOAD NUMBER LT PUSH2 0x5D9 JUMPI PUSH1 0x7 SLOAD PUSH2 0x5DB JUMP JUMPDEST NUMBER JUMPDEST PUSH1 0x10 SSTORE PUSH2 0x5E7 DUP3 PUSH2 0x377 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xF SLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 ISZERO PUSH2 0x620 JUMPI PUSH2 0x620 DUP2 PUSH2 0xF2D JUMP JUMPDEST PUSH2 0x62E DUP2 DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH2 0x636 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE93FA6A645641A36905340A61CD25D38302A191C89DE1B6192165729647F2DBC DUP7 PUSH1 0x40 MLOAD PUSH2 0x678 SWAP2 SWAP1 PUSH2 0x17A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x6AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x6BB PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6DB PUSH2 0xCFD JUMP JUMPDEST PUSH1 0xF SSTORE PUSH1 0x7 SLOAD NUMBER LT PUSH2 0x6EF JUMPI PUSH1 0x7 SLOAD PUSH2 0x6F1 JUMP JUMPDEST NUMBER JUMPDEST PUSH1 0x10 SSTORE PUSH2 0x6FD DUP3 PUSH2 0x377 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xF SLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x0 SWAP1 DUP2 PUSH2 0x71A PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x746 DUP2 DUP6 PUSH2 0xFCE JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x767 JUMPI POP SELFBALANCE PUSH2 0x424 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x7AC SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1750 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7FC SWAP2 SWAP1 PUSH2 0x16DA JUMP JUMPDEST SWAP1 POP PUSH2 0x424 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x826 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x833 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x853 PUSH2 0xCFD JUMP JUMPDEST PUSH1 0xF SSTORE PUSH1 0x7 SLOAD NUMBER LT PUSH2 0x867 JUMPI PUSH1 0x7 SLOAD PUSH2 0x869 JUMP JUMPDEST NUMBER JUMPDEST PUSH1 0x10 SSTORE PUSH2 0x875 DUP3 PUSH2 0x377 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xF SLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH2 0x8B9 SWAP1 PUSH1 0x0 PUSH2 0x894 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0xF2D JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0xB SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xF SLOAD PUSH1 0x6 SLOAD SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 JUMP JUMPDEST PUSH2 0x8E3 PUSH2 0x15B2 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xC0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD SWAP1 SWAP6 AND DUP6 MSTORE PUSH1 0x1 DUP2 ADD SLOAD SWAP2 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x94F PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x960 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x986 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x7 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0xA SLOAD PUSH1 0x9 SLOAD PUSH1 0xE SLOAD PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND SWAP7 SWAP6 SWAP1 SWAP6 AND SWAP5 PUSH1 0xFF AND SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 SWAP9 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0xA3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0xA47 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA67 PUSH2 0xCFD JUMP JUMPDEST PUSH1 0xF SSTORE PUSH1 0x7 SLOAD NUMBER LT PUSH2 0xA7B JUMPI PUSH1 0x7 SLOAD PUSH2 0xA7D JUMP JUMPDEST NUMBER JUMPDEST PUSH1 0x10 SSTORE PUSH2 0xA89 DUP3 PUSH2 0x377 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xF SLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x0 SWAP1 DUP2 PUSH2 0xAA6 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x746 DUP2 DUP6 PUSH2 0x112B JUMP JUMPDEST PUSH2 0xADA PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAEB PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO PUSH2 0xB26 JUMPI PUSH1 0x8 DUP5 SWAP1 SSTORE PUSH1 0x5 DUP7 SWAP1 SSTORE JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP LT DUP1 PUSH2 0xB37 JUMPI POP DUP4 PUSH1 0x8 SLOAD GT JUMPDEST ISZERO PUSH2 0xB42 JUMPI PUSH1 0x8 DUP5 SWAP1 SSTORE JUMPDEST NUMBER DUP6 ADD PUSH1 0x7 SSTORE PUSH1 0x6 DUP6 SWAP1 SSTORE PUSH1 0xC DUP4 SWAP1 SSTORE PUSH1 0xD DUP3 SWAP1 SSTORE PUSH1 0xE DUP2 SWAP1 SSTORE PUSH2 0xB64 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH32 0xC497FA4A972273F140B9FADCD1C85898A9D668BC469BBEEA646138827D2785A8 PUSH1 0x5 SLOAD DUP9 PUSH1 0x8 SLOAD DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0xBA9 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xBD1 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBE2 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC08 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0x11 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP3 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH32 0xD149A575534195E63C1803D2E12C53AB1BE7408663633419E980E14690AF2686 PUSH2 0xC60 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC6D SWAP2 SWAP1 PUSH2 0x1750 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0xC80 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC91 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0xE DUP2 SWAP1 SSTORE PUSH2 0xCC4 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH32 0x2CC57C7E0027BBCBEFAC66E7AFD968DE61ED8DE2F50FD07F1A4B987AE1D6E995 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x7 SLOAD PUSH1 0xA SLOAD PUSH1 0x0 SWAP3 SWAP2 SWAP1 PUSH2 0xD1A JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xBC6 JUMP JUMPDEST PUSH1 0x0 DUP2 NUMBER GT PUSH2 0xD29 JUMPI NUMBER PUSH2 0xD2B JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP5 LT PUSH2 0xD3D JUMPI PUSH1 0x0 PUSH2 0xD41 JUMP JUMPDEST DUP4 DUP3 SUB JUMPDEST SWAP1 POP PUSH1 0xA SLOAD DUP2 PUSH1 0xE SLOAD MUL PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0xD5C JUMPI INVALID JUMPDEST DIV PUSH1 0xF SLOAD ADD SWAP5 POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH3 0x201480 DUP2 JUMP JUMPDEST PUSH2 0xD79 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD8A PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xDD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x183C JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xE4E DUP5 PUSH2 0x750 JUMP JUMPDEST LT ISZERO PUSH2 0xE6C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xF00 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xE93 SWAP1 PUSH2 0xBC6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xED0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xED5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xEF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xF26 JUMP JUMPDEST PUSH2 0xF22 PUSH2 0xF0B PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x135D AND JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 ADD SLOAD PUSH2 0xF4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x19BF JUMP JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD DUP1 ISZERO PUSH2 0xF84 JUMPI PUSH1 0x0 PUSH1 0x2 DUP4 ADD SSTORE NUMBER PUSH1 0x4 DUP4 ADD SSTORE DUP2 SLOAD PUSH1 0x3 SLOAD PUSH2 0xF82 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 0xE42 JUMP JUMPDEST POP JUMPDEST DUP2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0xC22257EA55AC36F7B0CD84B3C13BB1B0EC54D708194C434B325188353A523BBA SWAP1 PUSH2 0xFC2 SWAP1 DUP5 SWAP1 PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD DUP2 GT ISZERO PUSH2 0xFF2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1899 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x1012 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1962 JUMP JUMPDEST PUSH2 0x101A PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x102B PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x106D JUMPI PUSH1 0x8 SLOAD DUP3 PUSH1 0x5 ADD SLOAD ADD TIMESTAMP LT ISZERO DUP1 PUSH2 0x1051 JUMPI POP PUSH1 0x7 SLOAD NUMBER GT JUMPDEST PUSH2 0x106D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B9F JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 EQ ISZERO PUSH2 0x10C4 JUMPI PUSH1 0x9 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE PUSH1 0x0 PUSH1 0x4 DUP4 ADD DUP2 SWAP1 SSTORE PUSH1 0x5 DUP4 ADD DUP2 SWAP1 SSTORE PUSH1 0x1 DUP4 ADD SSTORE PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST DUP2 SLOAD PUSH1 0x4 SLOAD PUSH2 0x10EC SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 0xE42 JUMP JUMPDEST POP DUP2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0xA54CE7327877AA2BFE1C079E3BB0DA2B7A774FE90A5AF3AFB74369F940E69C8A SWAP1 PUSH2 0xFC2 SWAP1 DUP5 SWAP1 PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x114B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1AB0 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0xFF AND PUSH2 0x116D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1CD8 JUMP JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO PUSH2 0x118F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x17DF JUMP JUMPDEST PUSH1 0x7 SLOAD NUMBER GT ISZERO PUSH2 0x11B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1A53 JUMP JUMPDEST PUSH1 0xC SLOAD ISZERO PUSH2 0x11DC JUMPI PUSH1 0xC SLOAD PUSH1 0x9 SLOAD LT PUSH2 0x11DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0xB SLOAD ISZERO PUSH2 0x120A JUMPI PUSH1 0xB SLOAD DUP2 PUSH1 0xA SLOAD ADD GT ISZERO PUSH2 0x120A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0xD SLOAD ISZERO PUSH2 0x123A JUMPI PUSH1 0xD SLOAD DUP2 DUP4 PUSH1 0x1 ADD SLOAD ADD GT ISZERO PUSH2 0x123A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B0D JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH1 0x1 DUP3 ADD DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12AB JUMPI DUP1 CALLVALUE LT ISZERO PUSH2 0x127C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1CA1 JUMP JUMPDEST DUP1 CALLVALUE GT ISZERO PUSH2 0x12A6 JUMPI PUSH2 0x12A4 PUSH2 0x128F PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP5 SWAP1 SUB PUSH2 0xE42 JUMP JUMPDEST POP JUMPDEST PUSH2 0x12D0 JUMP JUMPDEST PUSH2 0x12D0 PUSH2 0x12B6 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 ADDRESS DUP5 PUSH4 0xFFFFFFFF PUSH2 0x13E5 AND JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SLOAD PUSH2 0x131F JUMPI PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE NUMBER PUSH1 0x4 DUP4 ADD SSTORE TIMESTAMP PUSH1 0x5 DUP4 ADD SSTORE PUSH2 0x12F6 PUSH2 0xE3E JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND OR DUP3 SSTORE JUMPDEST DUP2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x9E4D21DE6C227900B5B8728D010781C8FC172FCC6C3FE36F7CBF431C85EC7800 SWAP1 PUSH2 0xFC2 SWAP1 DUP5 SWAP1 PUSH2 0x1E16 JUMP JUMPDEST PUSH2 0x13E0 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x137C SWAP3 SWAP2 SWAP1 PUSH2 0x1788 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x140C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1406 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x137C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1764 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1461 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x149B SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x13E0 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x147F SWAP2 SWAP1 PUSH2 0x16A6 JUMP JUMPDEST PUSH2 0x13E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D35 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x14AA DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x14B2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x14D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x19F6 JUMP JUMPDEST PUSH2 0x14DD DUP6 PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x14F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1C6A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1516 SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1553 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1558 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1568 DUP3 DUP3 DUP7 PUSH2 0x1579 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1588 JUMPI POP DUP2 PUSH2 0xF26 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1598 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP2 SWAP1 PUSH2 0x17AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1608 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x161F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xF26 DUP4 DUP4 PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x163B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1645 DUP5 DUP5 PUSH2 0x15F1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1655 DUP2 PUSH2 0x1EE3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1672 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x167C DUP5 DUP5 PUSH2 0x15F1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x169B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF26 DUP2 PUSH2 0x1EE3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xF26 DUP2 PUSH2 0x1EE3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16D3 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16EB JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x170A JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP5 CALLDATALOAD SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP6 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0xA0 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1746 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1EB7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x17CB DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2054686973207374616B696E6720686173206E6F74207374 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6172746564207965740000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x457863656564732062616C616E63650000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2063616E206E6F7420776974686472617720737461636B69 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6720746F6B656E73206265666F7265206C6F636B2074696D65000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x47616D655374616B653A206661696C656420746F2073656E6420546F6B656E73 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x42616C616E6365206D7573742062652067726561746572207468616E207A6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A20596F7520617265206E6F742061207374616B6572000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2054686973207374616B696E672069732063757272656E74 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6C7920636C6F7365640000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A20416D6F756E74206D757374206265206772656174657220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7468616E207A65726F0000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A20596F757220746F74616C207374616B652073697A652069 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7320746F6F206269670000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A20546F6F206561726C7920666F7220776974686472617700 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A206E6F7420656E6F75676820746F6B656E73000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2054686973207374616B6520697320616C72656164792066 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x756C6C0000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2057726F6E6720616D6F756E740000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2054686973207374616B6520697320696E61637469766520 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F72206E6F742065786973740000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 MLOAD AND DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP9 DUP10 MSTORE PUSH1 0x20 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x40 DUP10 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP4 ADD MSTORE ISZERO ISZERO PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x120 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1ED2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1EBA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1406 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1EF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD PUSH23 0xC5722F7B81435923A4408D04D60177C2373EFA930DC67 0xBF 0xD6 0x4A 0xCE PUSH18 0xF89D64736F6C634300060600330000000000 ","sourceMap":"329:12026:7:-:0;;;4090:1020;5:9:-1;2:2;;;27:1;24;17:12;2:2;4090:1020:7;;;;;;;;;;;;;;;;;;;;;884:17:0;904:12;-1:-1:-1;;;;;904:10:0;:12;:::i;:::-;926:6;:18;;-1:-1:-1;;;;;;926:18:0;-1:-1:-1;;;;;926:18:0;;;;;;;959:43;;926:18;;-1:-1:-1;926:18:0;959:43;;926:6;;959:43;850:159;1645:1:6;1760:7;:22;;;;4416:11:7;4401:12;;:26;;;;;-1:-1:-1;;;;;4401:26:7;;;;;-1:-1:-1;;;;;4401:26:7;;;;;;4453:13;4437;;:29;;;;;-1:-1:-1;;;;;4437:29:7;;;;;-1:-1:-1;;;;;4437:29:7;;;;;;4488:8;4476:9;:20;;;;4536:16;4521:12;:31;4506:12;:46;;;;4576:10;4562:11;:24;;;;4612:12;4596:13;:28;;;;4650:12;4634:13;:28;;;;4693:17;4672:18;:38;;;;4739:15;4720:16;:34;;;;4784:16;4764:17;:36;;;;4822:4;4810:9;;:16;;;;;;;;;;;;;;;;;;4841:262;4867:11;4892:13;4919:8;4941:10;4965:12;4991;5017:17;5048:15;5077:16;4841:262;;;;;;;;;;;;;;;;;;;;;;;4090:1020;;;;;;;;;329:12026;;598:104:5;685:10;598:104;:::o;5:134:-1:-;83:13;;-1:-1;;;;;3165:54;;3369:35;;3359:2;;3418:1;;3408:12;3359:2;68:71;;;;;287:1357;;;;;;;;;;538:3;526:9;517:7;513:23;509:33;506:2;;;-1:-1;;545:12;506:2;607:64;663:7;639:22;607:64;;;597:74;;726:64;782:7;708:2;762:9;758:22;726:64;;;716:74;;827:2;881:9;877:22;224:13;835:74;;946:2;1000:9;996:22;224:13;954:74;;1065:3;1120:9;1116:22;224:13;1074:74;;1185:3;1240:9;1236:22;224:13;1194:74;;1305:3;1360:9;1356:22;224:13;1314:74;;1425:3;1480:9;1476:22;224:13;1434:74;;1545:3;1600:9;1596:22;224:13;1554:74;;500:1144;;;;;;;;;;;;1891:1107;-1:-1;;;;;3165:54;;;1722:37;;3165:54;;;;2398:2;2383:18;;1722:37;2481:2;2466:18;;1842:37;;;;2564:2;2549:18;;1842:37;;;;2647:3;2632:19;;1842:37;;;;3176:42;2716:19;;1842:37;2815:3;2800:19;;1842:37;2899:3;2884:19;;1842:37;2983:3;2968:19;;1842:37;;;;2233:3;2218:19;;2204:794;;329:12026:7;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061012c5760003560e01c806374a4030f116100a5578063acec338a11610074578063cd3daf9d11610059578063cd3daf9d1461032d578063dd421cd514610342578063f2fde38b1461035757610133565b8063acec338a146102ed578063bb872b4a1461030d57610133565b806374a4030f1461026e5780637547c7a3146102985780638cbf5309146102ab5780638da5cb5b146102cb57610133565b80633aecd0e3116100fc5780634d1f7e65116100e15780634d1f7e65146102055780636386c1c71461022c578063715018a61461025957610133565b80633aecd0e3146101d05780634641257d146101f057610133565b80628cc2621461013857806306b091f91461016e57806321d18adc146101905780632e1a7d4d146101b057610133565b3661013357005b600080fd5b34801561014457600080fd5b5061015861015336600461160e565b610377565b6040516101659190611e16565b60405180910390f35b34801561017a57600080fd5b5061018e610189366004611660565b610429565b005b34801561019c57600080fd5b5061018e6101ab366004611629565b610539565b3480156101bc57600080fd5b5061018e6101cb3660046116c2565b61068b565b3480156101dc57600080fd5b506101586101eb36600461160e565b610750565b3480156101fc57600080fd5b5061018e610803565b34801561021157600080fd5b5061021a6108c1565b60405161016596959493929190611e8f565b34801561023857600080fd5b5061024c61024736600461160e565b6108db565b6040516101659190611dc9565b34801561026557600080fd5b5061018e610947565b34801561027a57600080fd5b506102836109dd565b60405161016599989796959493929190611e1f565b61018e6102a63660046116c2565b610a17565b3480156102b757600080fd5b5061018e6102c63660046116f2565b610ad2565b3480156102d757600080fd5b506102e0610bb9565b6040516101659190611750565b3480156102f957600080fd5b5061018e61030836600461168a565b610bc9565b34801561031957600080fd5b5061018e6103283660046116c2565b610c78565b34801561033957600080fd5b50610158610cfd565b34801561034e57600080fd5b50610158610d6a565b34801561036357600080fd5b5061018e61037236600461160e565b610d71565b60006103816115b2565b506001600160a01b038083166000908152600260208181526040808420815160c08101835281549096168652600181015492860192909252918101549184019190915260038101546060840152600481015460808401526005015460a08301526103e9610cfd565b9050806103fa57604082015161041f565b8160400151670de0b6b3a7640000836060015183038460200151028161041c57fe5b04015b925050505b919050565b600260015414156104555760405162461bcd60e51b815260040161044c90611d92565b60405180910390fd5b6002600155610462610e3e565b6001600160a01b0316610473610bb9565b6001600160a01b0316146104995760405162461bcd60e51b815260040161044c90611b6a565b62201480600754014310156104d6576004546001600160a01b03838116911614156104d65760405162461bcd60e51b815260040161044c906118d0565b6104e86104e1610e3e565b8383610e42565b506104f1610e3e565b6001600160a01b03167f549f2eb667ba04b83e4c67d04bac415b0d7f88ad1fc93a2c42e2be587be13996826040516105299190611e16565b60405180910390a2505060018055565b610541610e3e565b6001600160a01b0316610552610bb9565b6001600160a01b0316146105785760405162461bcd60e51b815260040161044c90611b6a565b6002600154141561059b5760405162461bcd60e51b815260040161044c90611d92565b600260018190556001600160a01b03831660009081526020919091526040902082906105c5610cfd565b600f5560075443106105d9576007546105db565b435b6010556105e782610377565b600280830191909155600f5460038301556001600160a01b03851660009081526020919091526040902083156106205761062081610f2d565b61062e818260010154610fce565b610636610e3e565b6001600160a01b0316856001600160a01b03167fe93fa6a645641a36905340a61cd25d38302a191c89de1b6192165729647f2dbc8660405161067891906117a1565b60405180910390a3505060018055505050565b600260015414156106ae5760405162461bcd60e51b815260040161044c90611d92565b60026001556106bb610e3e565b6001600160a01b03811660009081526002602052604090206106db610cfd565b600f5560075443106106ef576007546106f1565b435b6010556106fd82610377565b600280830191909155600f5460038301556000908161071a610e3e565b6001600160a01b03166001600160a01b0316815260200190815260200160002090506107468185610fce565b5050600180555050565b60006001600160a01b038216610767575047610424565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038316906370a08231906107ac903090600401611750565b60206040518083038186803b1580156107c457600080fd5b505afa1580156107d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc91906116da565b9050610424565b600260015414156108265760405162461bcd60e51b815260040161044c90611d92565b6002600155610833610e3e565b6001600160a01b0381166000908152600260205260409020610853610cfd565b600f55600754431061086757600754610869565b435b60105561087582610377565b600280830191909155600f5460038301556108b9906000610894610e3e565b6001600160a01b03166001600160a01b03168152602001908152602001600020610f2d565b505060018055565b600854600b54600c54600d54600f54600654909192939495565b6108e36115b2565b506001600160a01b03908116600090815260026020818152604092839020835160c08101855281549095168552600181015491850191909152908101549183019190915260038101546060830152600481015460808301526005015460a082015290565b61094f610e3e565b6001600160a01b0316610960610bb9565b6001600160a01b0316146109865760405162461bcd60e51b815260040161044c90611b6a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600554600754600354600454600a54600954600e546010546011546001600160a01b0396871696959095169460ff16909192939495969798565b60026001541415610a3a5760405162461bcd60e51b815260040161044c90611d92565b6002600155610a47610e3e565b6001600160a01b0381166000908152600260205260409020610a67610cfd565b600f556007544310610a7b57600754610a7d565b435b601055610a8982610377565b600280830191909155600f54600383015560009081610aa6610e3e565b6001600160a01b03166001600160a01b031681526020019081526020016000209050610746818561112b565b610ada610e3e565b6001600160a01b0316610aeb610bb9565b6001600160a01b031614610b115760405162461bcd60e51b815260040161044c90611b6a565b600554421015610b2657600884905560058690555b600554421080610b37575083600854115b15610b425760088490555b4385016007556006859055600c839055600d829055600e819055610b64610e3e565b6001600160a01b0316817fc497fa4a972273f140b9fadcd1c85898a9d668bc469bbeea646138827d2785a8600554886008548888604051610ba9959493929190611e6c565b60405180910390a3505050505050565b6000546001600160a01b03165b90565b610bd1610e3e565b6001600160a01b0316610be2610bb9565b6001600160a01b031614610c085760405162461bcd60e51b815260040161044c90611b6a565b601180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215159081179091557fd149a575534195e63c1803d2e12c53ab1be7408663633419e980e14690af2686610c60610e3e565b604051610c6d9190611750565b60405180910390a250565b610c80610e3e565b6001600160a01b0316610c91610bb9565b6001600160a01b031614610cb75760405162461bcd60e51b815260040161044c90611b6a565b600e819055610cc4610e3e565b6001600160a01b0316817f2cc57c7e0027bbcbefac66e7afd968de61ed8de2f50fd07f1a4b987ae1d6e99560405160405180910390a350565b601054600754600a546000929190610d1a57600092505050610bc6565b6000814311610d295743610d2b565b815b90506000818410610d3d576000610d41565b8382035b9050600a5481600e5402670de0b6b3a76400000281610d5c57fe5b04600f540194505050505090565b6220148081565b610d79610e3e565b6001600160a01b0316610d8a610bb9565b6001600160a01b031614610db05760405162461bcd60e51b815260040161044c90611b6a565b6001600160a01b038116610dd65760405162461bcd60e51b815260040161044c9061183c565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3390565b600081610e4e84610750565b1015610e6c5760405162461bcd60e51b815260040161044c90611bd6565b6001600160a01b038316610f00576000846001600160a01b031683604051610e9390610bc6565b60006040518083038185875af1925050503d8060008114610ed0576040519150601f19603f3d011682016040523d82523d6000602084013e610ed5565b606091505b5050905080610ef65760405162461bcd60e51b815260040161044c9061192d565b6001915050610f26565b610f22610f0b610e3e565b6001600160a01b038516908463ffffffff61135d16565b5060015b9392505050565b6004810154610f4e5760405162461bcd60e51b815260040161044c906119bf565b60028101548015610f8457600060028301554360048301558154600354610f82916001600160a01b03908116911683610e42565b505b81546040516001600160a01b03909116907fc22257ea55ac36f7b0cd84b3c13bb1b0ec54d708194c434b325188353a523bba90610fc2908490611e16565b60405180910390a25050565b8160010154811115610ff25760405162461bcd60e51b815260040161044c90611899565b600081116110125760405162461bcd60e51b815260040161044c90611962565b61101a610bb9565b6001600160a01b031661102b610e3e565b6001600160a01b03161461106d5760085482600501540142101580611051575060075443115b61106d5760405162461bcd60e51b815260040161044c90611b9f565b600a8054829003905560018201548114156110c457600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190556000600483018190556005830181905560018301556110d0565b60018201805482900390555b81546004546110ec916001600160a01b03908116911683610e42565b5081546040516001600160a01b03909116907fa54ce7327877aa2bfe1c079e3bb0da2b7a774fe90a5af3afb74369f940e69c8a90610fc2908490611e16565b6000811161114b5760405162461bcd60e51b815260040161044c90611ab0565b60115460ff1661116d5760405162461bcd60e51b815260040161044c90611cd8565b60055442101561118f5760405162461bcd60e51b815260040161044c906117df565b6007544311156111b15760405162461bcd60e51b815260040161044c90611a53565b600c54156111dc57600c54600954106111dc5760405162461bcd60e51b815260040161044c90611c0d565b600b541561120a57600b5481600a5401111561120a5760405162461bcd60e51b815260040161044c90611c0d565b600d541561123a57600d5481836001015401111561123a5760405162461bcd60e51b815260040161044c90611b0d565b600a805482019055600182018054820190556004546001600160a01b03166112ab578034101561127c5760405162461bcd60e51b815260040161044c90611ca1565b803411156112a6576112a461128f610e3e565b6004546001600160a01b031634849003610e42565b505b6112d0565b6112d06112b6610e3e565b6004546001600160a01b031690308463ffffffff6113e516565b600482015461131f576009805460010190554360048301554260058301556112f6610e3e565b825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03919091161782555b81546040516001600160a01b03909116907f9e4d21de6c227900b5b8728d010781c8fc172fcc6c3fe36f7cbf431c85ec780090610fc2908490611e16565b6113e08363a9059cbb60e01b848460405160240161137c929190611788565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261140c565b505050565b611406846323b872dd60e01b85858560405160240161137c93929190611764565b50505050565b6060611461826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661149b9092919063ffffffff16565b8051909150156113e0578080602001905181019061147f91906116a6565b6113e05760405162461bcd60e51b815260040161044c90611d35565b60606114aa84846000856114b2565b949350505050565b6060824710156114d45760405162461bcd60e51b815260040161044c906119f6565b6114dd85611573565b6114f95760405162461bcd60e51b815260040161044c90611c6a565b60006060866001600160a01b031685876040516115169190611734565b60006040518083038185875af1925050503d8060008114611553576040519150601f19603f3d011682016040523d82523d6000602084013e611558565b606091505b5091509150611568828286611579565b979650505050505050565b3b151590565b60608315611588575081610f26565b8251156115985782518084602001fd5b8160405162461bcd60e51b815260040161044c91906117ac565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461160857600080fd5b92915050565b60006020828403121561161f578081fd5b610f2683836115f1565b6000806040838503121561163b578081fd5b61164584846115f1565b9150602083013561165581611ee3565b809150509250929050565b60008060408385031215611672578182fd5b61167c84846115f1565b946020939093013593505050565b60006020828403121561169b578081fd5b8135610f2681611ee3565b6000602082840312156116b7578081fd5b8151610f2681611ee3565b6000602082840312156116d3578081fd5b5035919050565b6000602082840312156116eb578081fd5b5051919050565b60008060008060008060c0878903121561170a578182fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60008251611746818460208701611eb7565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825282518060208401526117cb816040850160208701611eb7565b601f01601f19169190910160400192915050565b60208082526029908201527f5374616b696e673a2054686973207374616b696e6720686173206e6f7420737460408201527f6172746564207965740000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f457863656564732062616c616e63650000000000000000000000000000000000604082015260600190565b6020808252603a908201527f5374616b696e673a2063616e206e6f7420776974686472617720737461636b6960408201527f6e6720746f6b656e73206265666f7265206c6f636b2074696d65000000000000606082015260800190565b6020808252818101527f47616d655374616b653a206661696c656420746f2073656e6420546f6b656e73604082015260600190565b60208082526021908201527f42616c616e6365206d7573742062652067726561746572207468616e207a657260408201527f6f00000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f5374616b696e673a20596f7520617265206e6f742061207374616b6572000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f5374616b696e673a2054686973207374616b696e672069732063757272656e7460408201527f6c7920636c6f7365640000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f5374616b696e673a20416d6f756e74206d75737420626520677265617465722060408201527f7468616e207a65726f0000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f5374616b696e673a20596f757220746f74616c207374616b652073697a65206960408201527f7320746f6f206269670000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5374616b696e673a20546f6f206561726c7920666f7220776974686472617700604082015260600190565b6020808252601a908201527f5374616b696e673a206e6f7420656e6f75676820746f6b656e73000000000000604082015260600190565b60208082526023908201527f5374616b696e673a2054686973207374616b6520697320616c7265616479206660408201527f756c6c0000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526015908201527f5374616b696e673a2057726f6e6720616d6f756e740000000000000000000000604082015260600190565b6020808252602c908201527f5374616b696e673a2054686973207374616b6520697320696e6163746976652060408201527f6f72206e6f742065786973740000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060c0820190506001600160a01b0383511682526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b90815260200190565b98895260208901979097526001600160a01b039586166040890152939094166060870152608086019190915260a085015260c084019190915260e083015215156101008201526101200190565b948552602085019390935260408401919091526060830152608082015260a00190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60005b83811015611ed2578181015183820152602001611eba565b838111156114065750506000910152565b8015158114611ef157600080fd5b5056fea264697066735822122009760c5722f7b81435923a4408d04d60177c2373efa930dc67bfd64ace71f89d64736f6c63430006060033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x74A4030F GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0xACEC338A GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xCD3DAF9D GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xCD3DAF9D EQ PUSH2 0x32D JUMPI DUP1 PUSH4 0xDD421CD5 EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x357 JUMPI PUSH2 0x133 JUMP JUMPDEST DUP1 PUSH4 0xACEC338A EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0xBB872B4A EQ PUSH2 0x30D JUMPI PUSH2 0x133 JUMP JUMPDEST DUP1 PUSH4 0x74A4030F EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0x7547C7A3 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x8CBF5309 EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2CB JUMPI PUSH2 0x133 JUMP JUMPDEST DUP1 PUSH4 0x3AECD0E3 GT PUSH2 0xFC JUMPI DUP1 PUSH4 0x4D1F7E65 GT PUSH2 0xE1 JUMPI DUP1 PUSH4 0x4D1F7E65 EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x6386C1C7 EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x259 JUMPI PUSH2 0x133 JUMP JUMPDEST DUP1 PUSH4 0x3AECD0E3 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x4641257D EQ PUSH2 0x1F0 JUMPI PUSH2 0x133 JUMP JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x6B091F9 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x21D18ADC EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x1B0 JUMPI PUSH2 0x133 JUMP JUMPDEST CALLDATASIZE PUSH2 0x133 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x377 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x165 SWAP2 SWAP1 PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x189 CALLDATASIZE PUSH1 0x4 PUSH2 0x1660 JUMP JUMPDEST PUSH2 0x429 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x1629 JUMP JUMPDEST PUSH2 0x539 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x1CB CALLDATASIZE PUSH1 0x4 PUSH2 0x16C2 JUMP JUMPDEST PUSH2 0x68B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x750 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x803 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x211 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x165 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E8F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24C PUSH2 0x247 CALLDATASIZE PUSH1 0x4 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x8DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x165 SWAP2 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x947 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x283 PUSH2 0x9DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x165 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E1F JUMP JUMPDEST PUSH2 0x18E PUSH2 0x2A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x16C2 JUMP JUMPDEST PUSH2 0xA17 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x2C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x16F2 JUMP JUMPDEST PUSH2 0xAD2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E0 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x165 SWAP2 SWAP1 PUSH2 0x1750 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x168A JUMP JUMPDEST PUSH2 0xBC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x328 CALLDATASIZE PUSH1 0x4 PUSH2 0x16C2 JUMP JUMPDEST PUSH2 0xC78 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x339 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0xCFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0xD6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18E PUSH2 0x372 CALLDATASIZE PUSH1 0x4 PUSH2 0x160E JUMP JUMPDEST PUSH2 0xD71 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x381 PUSH2 0x15B2 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0x1 DUP2 ADD SLOAD SWAP3 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP2 ADD SLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x3E9 PUSH2 0xCFD JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x3FA JUMPI PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x41F JUMP JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH8 0xDE0B6B3A7640000 DUP4 PUSH1 0x60 ADD MLOAD DUP4 SUB DUP5 PUSH1 0x20 ADD MLOAD MUL DUP2 PUSH2 0x41C JUMPI INVALID JUMPDEST DIV ADD JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x455 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x462 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x473 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x499 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH3 0x201480 PUSH1 0x7 SLOAD ADD NUMBER LT ISZERO PUSH2 0x4D6 JUMPI PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x4D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x18D0 JUMP JUMPDEST PUSH2 0x4E8 PUSH2 0x4E1 PUSH2 0xE3E JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE42 JUMP JUMPDEST POP PUSH2 0x4F1 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x549F2EB667BA04B83E4C67D04BAC415B0D7F88AD1FC93A2C42E2BE587BE13996 DUP3 PUSH1 0x40 MLOAD PUSH2 0x529 SWAP2 SWAP1 PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH2 0x541 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x552 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x578 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x59B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 SWAP1 PUSH2 0x5C5 PUSH2 0xCFD JUMP JUMPDEST PUSH1 0xF SSTORE PUSH1 0x7 SLOAD NUMBER LT PUSH2 0x5D9 JUMPI PUSH1 0x7 SLOAD PUSH2 0x5DB JUMP JUMPDEST NUMBER JUMPDEST PUSH1 0x10 SSTORE PUSH2 0x5E7 DUP3 PUSH2 0x377 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xF SLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 ISZERO PUSH2 0x620 JUMPI PUSH2 0x620 DUP2 PUSH2 0xF2D JUMP JUMPDEST PUSH2 0x62E DUP2 DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH2 0x636 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE93FA6A645641A36905340A61CD25D38302A191C89DE1B6192165729647F2DBC DUP7 PUSH1 0x40 MLOAD PUSH2 0x678 SWAP2 SWAP1 PUSH2 0x17A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x6AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x6BB PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6DB PUSH2 0xCFD JUMP JUMPDEST PUSH1 0xF SSTORE PUSH1 0x7 SLOAD NUMBER LT PUSH2 0x6EF JUMPI PUSH1 0x7 SLOAD PUSH2 0x6F1 JUMP JUMPDEST NUMBER JUMPDEST PUSH1 0x10 SSTORE PUSH2 0x6FD DUP3 PUSH2 0x377 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xF SLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x0 SWAP1 DUP2 PUSH2 0x71A PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x746 DUP2 DUP6 PUSH2 0xFCE JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x767 JUMPI POP SELFBALANCE PUSH2 0x424 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x7AC SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1750 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7FC SWAP2 SWAP1 PUSH2 0x16DA JUMP JUMPDEST SWAP1 POP PUSH2 0x424 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x826 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x833 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x853 PUSH2 0xCFD JUMP JUMPDEST PUSH1 0xF SSTORE PUSH1 0x7 SLOAD NUMBER LT PUSH2 0x867 JUMPI PUSH1 0x7 SLOAD PUSH2 0x869 JUMP JUMPDEST NUMBER JUMPDEST PUSH1 0x10 SSTORE PUSH2 0x875 DUP3 PUSH2 0x377 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xF SLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH2 0x8B9 SWAP1 PUSH1 0x0 PUSH2 0x894 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0xF2D JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0xB SLOAD PUSH1 0xC SLOAD PUSH1 0xD SLOAD PUSH1 0xF SLOAD PUSH1 0x6 SLOAD SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 JUMP JUMPDEST PUSH2 0x8E3 PUSH2 0x15B2 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xC0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD SWAP1 SWAP6 AND DUP6 MSTORE PUSH1 0x1 DUP2 ADD SLOAD SWAP2 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x94F PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x960 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x986 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x7 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH1 0xA SLOAD PUSH1 0x9 SLOAD PUSH1 0xE SLOAD PUSH1 0x10 SLOAD PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND SWAP7 SWAP6 SWAP1 SWAP6 AND SWAP5 PUSH1 0xFF AND SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 SWAP9 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0xA3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0xA47 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xA67 PUSH2 0xCFD JUMP JUMPDEST PUSH1 0xF SSTORE PUSH1 0x7 SLOAD NUMBER LT PUSH2 0xA7B JUMPI PUSH1 0x7 SLOAD PUSH2 0xA7D JUMP JUMPDEST NUMBER JUMPDEST PUSH1 0x10 SSTORE PUSH2 0xA89 DUP3 PUSH2 0x377 JUMP JUMPDEST PUSH1 0x2 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xF SLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x0 SWAP1 DUP2 PUSH2 0xAA6 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x746 DUP2 DUP6 PUSH2 0x112B JUMP JUMPDEST PUSH2 0xADA PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAEB PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO PUSH2 0xB26 JUMPI PUSH1 0x8 DUP5 SWAP1 SSTORE PUSH1 0x5 DUP7 SWAP1 SSTORE JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP LT DUP1 PUSH2 0xB37 JUMPI POP DUP4 PUSH1 0x8 SLOAD GT JUMPDEST ISZERO PUSH2 0xB42 JUMPI PUSH1 0x8 DUP5 SWAP1 SSTORE JUMPDEST NUMBER DUP6 ADD PUSH1 0x7 SSTORE PUSH1 0x6 DUP6 SWAP1 SSTORE PUSH1 0xC DUP4 SWAP1 SSTORE PUSH1 0xD DUP3 SWAP1 SSTORE PUSH1 0xE DUP2 SWAP1 SSTORE PUSH2 0xB64 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH32 0xC497FA4A972273F140B9FADCD1C85898A9D668BC469BBEEA646138827D2785A8 PUSH1 0x5 SLOAD DUP9 PUSH1 0x8 SLOAD DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0xBA9 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xBD1 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBE2 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC08 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0x11 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP3 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH32 0xD149A575534195E63C1803D2E12C53AB1BE7408663633419E980E14690AF2686 PUSH2 0xC60 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC6D SWAP2 SWAP1 PUSH2 0x1750 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0xC80 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC91 PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0xE DUP2 SWAP1 SSTORE PUSH2 0xCC4 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH32 0x2CC57C7E0027BBCBEFAC66E7AFD968DE61ED8DE2F50FD07F1A4B987AE1D6E995 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x7 SLOAD PUSH1 0xA SLOAD PUSH1 0x0 SWAP3 SWAP2 SWAP1 PUSH2 0xD1A JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xBC6 JUMP JUMPDEST PUSH1 0x0 DUP2 NUMBER GT PUSH2 0xD29 JUMPI NUMBER PUSH2 0xD2B JUMP JUMPDEST DUP2 JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP5 LT PUSH2 0xD3D JUMPI PUSH1 0x0 PUSH2 0xD41 JUMP JUMPDEST DUP4 DUP3 SUB JUMPDEST SWAP1 POP PUSH1 0xA SLOAD DUP2 PUSH1 0xE SLOAD MUL PUSH8 0xDE0B6B3A7640000 MUL DUP2 PUSH2 0xD5C JUMPI INVALID JUMPDEST DIV PUSH1 0xF SLOAD ADD SWAP5 POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH3 0x201480 DUP2 JUMP JUMPDEST PUSH2 0xD79 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD8A PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B6A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xDD6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x183C JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xE4E DUP5 PUSH2 0x750 JUMP JUMPDEST LT ISZERO PUSH2 0xE6C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xF00 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xE93 SWAP1 PUSH2 0xBC6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xED0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xED5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xEF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xF26 JUMP JUMPDEST PUSH2 0xF22 PUSH2 0xF0B PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x135D AND JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 ADD SLOAD PUSH2 0xF4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x19BF JUMP JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD DUP1 ISZERO PUSH2 0xF84 JUMPI PUSH1 0x0 PUSH1 0x2 DUP4 ADD SSTORE NUMBER PUSH1 0x4 DUP4 ADD SSTORE DUP2 SLOAD PUSH1 0x3 SLOAD PUSH2 0xF82 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 0xE42 JUMP JUMPDEST POP JUMPDEST DUP2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0xC22257EA55AC36F7B0CD84B3C13BB1B0EC54D708194C434B325188353A523BBA SWAP1 PUSH2 0xFC2 SWAP1 DUP5 SWAP1 PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD DUP2 GT ISZERO PUSH2 0xFF2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1899 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x1012 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1962 JUMP JUMPDEST PUSH2 0x101A PUSH2 0xBB9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x102B PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x106D JUMPI PUSH1 0x8 SLOAD DUP3 PUSH1 0x5 ADD SLOAD ADD TIMESTAMP LT ISZERO DUP1 PUSH2 0x1051 JUMPI POP PUSH1 0x7 SLOAD NUMBER GT JUMPDEST PUSH2 0x106D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B9F JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 EQ ISZERO PUSH2 0x10C4 JUMPI PUSH1 0x9 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE PUSH1 0x0 PUSH1 0x4 DUP4 ADD DUP2 SWAP1 SSTORE PUSH1 0x5 DUP4 ADD DUP2 SWAP1 SSTORE PUSH1 0x1 DUP4 ADD SSTORE PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST DUP2 SLOAD PUSH1 0x4 SLOAD PUSH2 0x10EC SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 0xE42 JUMP JUMPDEST POP DUP2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0xA54CE7327877AA2BFE1C079E3BB0DA2B7A774FE90A5AF3AFB74369F940E69C8A SWAP1 PUSH2 0xFC2 SWAP1 DUP5 SWAP1 PUSH2 0x1E16 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x114B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1AB0 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0xFF AND PUSH2 0x116D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1CD8 JUMP JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO PUSH2 0x118F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x17DF JUMP JUMPDEST PUSH1 0x7 SLOAD NUMBER GT ISZERO PUSH2 0x11B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1A53 JUMP JUMPDEST PUSH1 0xC SLOAD ISZERO PUSH2 0x11DC JUMPI PUSH1 0xC SLOAD PUSH1 0x9 SLOAD LT PUSH2 0x11DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0xB SLOAD ISZERO PUSH2 0x120A JUMPI PUSH1 0xB SLOAD DUP2 PUSH1 0xA SLOAD ADD GT ISZERO PUSH2 0x120A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1C0D JUMP JUMPDEST PUSH1 0xD SLOAD ISZERO PUSH2 0x123A JUMPI PUSH1 0xD SLOAD DUP2 DUP4 PUSH1 0x1 ADD SLOAD ADD GT ISZERO PUSH2 0x123A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1B0D JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH1 0x1 DUP3 ADD DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12AB JUMPI DUP1 CALLVALUE LT ISZERO PUSH2 0x127C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1CA1 JUMP JUMPDEST DUP1 CALLVALUE GT ISZERO PUSH2 0x12A6 JUMPI PUSH2 0x12A4 PUSH2 0x128F PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE DUP5 SWAP1 SUB PUSH2 0xE42 JUMP JUMPDEST POP JUMPDEST PUSH2 0x12D0 JUMP JUMPDEST PUSH2 0x12D0 PUSH2 0x12B6 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 ADDRESS DUP5 PUSH4 0xFFFFFFFF PUSH2 0x13E5 AND JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SLOAD PUSH2 0x131F JUMPI PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE NUMBER PUSH1 0x4 DUP4 ADD SSTORE TIMESTAMP PUSH1 0x5 DUP4 ADD SSTORE PUSH2 0x12F6 PUSH2 0xE3E JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND OR DUP3 SSTORE JUMPDEST DUP2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x9E4D21DE6C227900B5B8728D010781C8FC172FCC6C3FE36F7CBF431C85EC7800 SWAP1 PUSH2 0xFC2 SWAP1 DUP5 SWAP1 PUSH2 0x1E16 JUMP JUMPDEST PUSH2 0x13E0 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x137C SWAP3 SWAP2 SWAP1 PUSH2 0x1788 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x140C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1406 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x137C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1764 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1461 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x149B SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x13E0 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x147F SWAP2 SWAP1 PUSH2 0x16A6 JUMP JUMPDEST PUSH2 0x13E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1D35 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x14AA DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x14B2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x14D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x19F6 JUMP JUMPDEST PUSH2 0x14DD DUP6 PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x14F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP1 PUSH2 0x1C6A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1516 SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1553 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1558 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1568 DUP3 DUP3 DUP7 PUSH2 0x1579 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1588 JUMPI POP DUP2 PUSH2 0xF26 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1598 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44C SWAP2 SWAP1 PUSH2 0x17AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1608 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x161F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xF26 DUP4 DUP4 PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x163B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1645 DUP5 DUP5 PUSH2 0x15F1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1655 DUP2 PUSH2 0x1EE3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1672 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x167C DUP5 DUP5 PUSH2 0x15F1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x169B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF26 DUP2 PUSH2 0x1EE3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xF26 DUP2 PUSH2 0x1EE3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16D3 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16EB JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x170A JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP5 CALLDATALOAD SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP6 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0xA0 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1746 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1EB7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x17CB DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2054686973207374616B696E6720686173206E6F74207374 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6172746564207965740000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x457863656564732062616C616E63650000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2063616E206E6F7420776974686472617720737461636B69 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6720746F6B656E73206265666F7265206C6F636B2074696D65000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x47616D655374616B653A206661696C656420746F2073656E6420546F6B656E73 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x42616C616E6365206D7573742062652067726561746572207468616E207A6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A20596F7520617265206E6F742061207374616B6572000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2054686973207374616B696E672069732063757272656E74 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6C7920636C6F7365640000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A20416D6F756E74206D757374206265206772656174657220 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7468616E207A65726F0000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A20596F757220746F74616C207374616B652073697A652069 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7320746F6F206269670000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A20546F6F206561726C7920666F7220776974686472617700 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A206E6F7420656E6F75676820746F6B656E73000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2054686973207374616B6520697320616C72656164792066 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x756C6C0000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2057726F6E6720616D6F756E740000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x5374616B696E673A2054686973207374616B6520697320696E61637469766520 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F72206E6F742065786973740000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 MLOAD AND DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP9 DUP10 MSTORE PUSH1 0x20 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x40 DUP10 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP4 ADD MSTORE ISZERO ISZERO PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x120 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1ED2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1EBA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1406 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1EF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD PUSH23 0xC5722F7B81435923A4408D04D60177C2373EFA930DC67 0xBF 0xD6 0x4A 0xCE PUSH18 0xF89D64736F6C634300060600330000000000 ","sourceMap":"329:12026:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;2426:388:7;;5:9:-1;2:2;;;27:1;24;17:12;2:2;-1:-1;2426:388:7;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;7624:360;;5:9:-1;2:2;;;27:1;24;17:12;2:2;-1:-1;7624:360:7;;;;;;;;:::i;:::-;;5151:410;;5:9:-1;2:2;;;27:1;24;17:12;2:2;-1:-1;5151:410:7;;;;;;;;:::i;7321:220::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;-1:-1;7321:220:7;;;;;;;;:::i;2180:240::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;-1:-1;2180:240:7;;;;;;;;:::i;5604:125::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5604:125:7;;;:::i;1852:322::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1852:322:7;;;:::i;:::-;;;;;;;;;;;;;1285:125;;5:9:-1;2:2;;;27:1;24;17:12;2:2;-1:-1;1285:125:7;;;;;;;;:::i;:::-;;;;;;;;1717:145:0;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1717:145:0;;;:::i;1416:430:7:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1416:430:7;;;:::i;:::-;;;;;;;;;;;;;;;;5735:189;;;;;;;;;:::i;6263:988::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;-1:-1;6263:988:7;;;;;;;;:::i;1085:85:0:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1085:85:0;;;:::i;:::-;;;;;;;;5930:129:7;;5:9:-1;2:2;;;27:1;24;17:12;2:2;-1:-1;5930:129:7;;;;;;;;:::i;6065:192::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;-1:-1;6065:192:7;;;;;;;;:::i;7990:537::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7990:537:7;;;:::i;413:48::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;413:48:7;;;:::i;2011:240:0:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;-1:-1;2011:240:0;;;;;;;;:::i;2426:388:7:-;2486:7;2505:20;;:::i;:::-;-1:-1:-1;;;;;;2528:23:7;;;;;;;:8;:23;;;;;;;;2505:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2589:16;:14;:16::i;:::-;2561:44;-1:-1:-1;2634:22:7;:173;;2793:14;;;;2634:173;;;2756:6;:14;;;2745:7;2715:6;:25;;;2695:17;:45;2677:6;:14;;;:64;2676:76;;;;;;2675:95;2634:173;2615:192;;;;2426:388;;;;:::o;7624:360::-;1688:1:6;2277:7;;:19;;2269:63;;;;-1:-1:-1;;;2269:63:6;;;;;;;;;;;;;;;;;1688:1;2407:7;:18;1308:12:0::1;:10;:12::i;:::-;-1:-1:-1::0;;;;;1297:23:0::1;:7;:5;:7::i;:::-;-1:-1:-1::0;;;;;1297:23:0::1;;1289:68;;;;-1:-1:-1::0;;;1289:68:0::1;;;;;;;;;454:7:7::2;7740:12;;:29;7725:12;:44;7721:155;;;7800:13;::::0;-1:-1:-1;;;;;7791:22:7;;::::2;7800:13:::0;::::2;7791:22;;7783:93;;;;-1:-1:-1::0;;;7783:93:7::2;;;;;;;;;7886:39;7897:12;:10;:12::i;:::-;7911:5;7918:6;7886:10;:39::i;:::-;;7964:12;:10;:12::i;:::-;-1:-1:-1::0;;;;;7940:37:7::2;;7956:6;7940:37;;;;;;;;;;;;;;;-1:-1:-1::0;;1645:1:6;2580:22;;7624:360:7:o;5151:410::-;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;1688:1:6::1;2277:7;;:19;;2269:63;;;;-1:-1:-1::0;;;2269:63:6::1;;;;;;;;;1688:1;2407:7;:18:::0;;;-1:-1:-1;;;;;11400:23:7;::::2;11376:21;11400:23:::0;;;::::2;::::0;;;;;;;5287:13;;11457:16:::2;:14;:16::i;:::-;11433:21;:40:::0;11517:12:::2;::::0;11502::::2;:27;:57;;11547:12;;11502:57;;;11532:12;11502:57;11483:16;:76:::0;11586:21:::2;11593:13:::0;11586:6:::2;:21::i;:::-;11569:14;::::0;;::::2;:38:::0;;;;11645:21:::2;::::0;11617:25:::2;::::0;::::2;:49:::0;-1:-1:-1;;;;;5336:23:7;::::3;-1:-1:-1::0;5336:23:7;;;::::3;::::0;;;;;;;5369:65;::::3;;;5399:24;5416:6;5399:16;:24::i;:::-;5443:35;5455:6;5463;:14;;;5443:11;:35::i;:::-;5541:12;:10;:12::i;:::-;-1:-1:-1::0;;;;;5493:61:7::3;5514:13;-1:-1:-1::0;;;;;5493:61:7::3;;5529:10;5493:61;;;;;;;;;;;;;;;-1:-1:-1::0;;1645:1:6::1;2580:22:::0;;-1:-1:-1;;;5151:410:7:o;7321:220::-;1688:1:6;2277:7;;:19;;2269:63;;;;-1:-1:-1;;;2269:63:6;;;;;;;;;1688:1;2407:7;:18;7390:12:7::1;:10;:12::i;:::-;-1:-1:-1::0;;;;;11400:23:7;::::1;11376:21;11400:23:::0;;;:8:::1;:23;::::0;;;;11457:16:::1;:14;:16::i;:::-;11433:21;:40:::0;11517:12:::1;::::0;11502::::1;:27;:57;;11547:12;;11502:57;;;11532:12;11502:57;11483:16;:76:::0;11586:21:::1;11593:13:::0;11586:6:::1;:21::i;:::-;11569:14;::::0;;::::1;:38:::0;;;;11645:21:::1;::::0;11617:25:::1;::::0;::::1;:49:::0;-1:-1:-1;;;7447:12:7::2;:10;:12::i;:::-;-1:-1:-1::0;;;;;7438:22:7::2;-1:-1:-1::0;;;;;7438:22:7::2;;;;;;;;;;;;7414:46;;7507:27;7519:6;7527;7507:11;:27::i;:::-;-1:-1:-1::0;;1645:1:6;2580:22;;-1:-1:-1;;7321:220:7:o;2180:240::-;2241:7;-1:-1:-1;;;;;2264:19:7;;2260:154;;-1:-1:-1;2306:21:7;2299:28;;2260:154;2365:38;;;;;-1:-1:-1;;;;;2365:23:7;;;;;:38;;2397:4;;2365:38;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;2365:38:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2365:38:7;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2365:38:7;;;;;;;;;2358:45;;;;5604:125;1688:1:6;2277:7;;:19;;2269:63;;;;-1:-1:-1;;;2269:63:6;;;;;;;;;1688:1;2407:7;:18;5658:12:7::1;:10;:12::i;:::-;-1:-1:-1::0;;;;;11400:23:7;::::1;11376:21;11400:23:::0;;;:8:::1;:23;::::0;;;;11457:16:::1;:14;:16::i;:::-;11433:21;:40:::0;11517:12:::1;::::0;11502::::1;:27;:57;;11547:12;;11502:57;;;11532:12;11502:57;11483:16;:76:::0;11586:21:::1;11593:13:::0;11586:6:::1;:21::i;:::-;11569:14;::::0;;::::1;:38:::0;;;;11645:21:::1;::::0;11617:25:::1;::::0;::::1;:49:::0;5682:40:::2;::::0;-1:-1:-1;5708:12:7::2;:10;:12::i;:::-;-1:-1:-1::0;;;;;5699:22:7::2;-1:-1:-1::0;;;;;5699:22:7::2;;;;;;;;;;;;5682:16;:40::i;:::-;-1:-1:-1::0;;1645:1:6;2580:22;;5604:125:7:o;1852:322::-;1994:11;;2019:13;;2046;;2073:18;;2105:21;;2140:17;;1852:322;;;;;;:::o;1285:125::-;1350:13;;:::i;:::-;-1:-1:-1;;;;;;1382:21:7;;;;;;;:8;:21;;;;;;;;;1375:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1285:125::o;1717:145:0:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;1823:1:::1;1807:6:::0;;1786:40:::1;::::0;-1:-1:-1;;;;;1807:6:0;;::::1;::::0;1786:40:::1;::::0;1823:1;;1786:40:::1;1853:1;1836:19:::0;;-1:-1:-1;;1836:19:0::1;::::0;;1717:145::o;1416:430:7:-;1600:9;;1623:12;;1649;;1675:13;;1702:14;;1730:16;;1760;;1790;;1820:9;;-1:-1:-1;;;;;1649:12:7;;;;1675:13;;;;;1820:9;;1416:430;;;;;;;;;:::o;5735:189::-;1688:1:6;2277:7;;:19;;2269:63;;;;-1:-1:-1;;;2269:63:6;;;;;;;;;1688:1;2407:7;:18;5815:12:7::1;:10;:12::i;:::-;-1:-1:-1::0;;;;;11400:23:7;::::1;11376:21;11400:23:::0;;;:8:::1;:23;::::0;;;;11457:16:::1;:14;:16::i;:::-;11433:21;:40:::0;11517:12:::1;::::0;11502::::1;:27;:57;;11547:12;;11502:57;;;11532:12;11502:57;11483:16;:76:::0;11586:21:::1;11593:13:::0;11586:6:::1;:21::i;:::-;11569:14;::::0;;::::1;:38:::0;;;;11645:21:::1;::::0;11617:25:::1;::::0;::::1;:49:::0;-1:-1:-1;;;5872:12:7::2;:10;:12::i;:::-;-1:-1:-1::0;;;;;5863:22:7::2;-1:-1:-1::0;;;;;5863:22:7::2;;;;;;;;;;;;5839:46;;5895:22;5902:6;5910;5895;:22::i;6263:988::-:0;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;6542:9:7::1;;6524:15;:27;6520:122;;;6567:11;:27:::0;;;6608:9:::1;:23:::0;;;6520:122:::1;6673:9;;6655:15;:27;:58;;;;6700:13;6686:11;;:27;6655:58;6651:116;;;6729:11;:27:::0;;;6651:116:::1;6791:12;:32:::0;::::1;6776:12;:47:::0;6833:17:::1;:37:::0;;;6880:13:::1;:31:::0;;;6921:18:::1;:41:::0;;;6972:16:::1;:36:::0;;;7222:12:::1;:10;:12::i;:::-;-1:-1:-1::0;;;;;7023:221:7::1;7191:17;7023:221;7049:9;;7072:17;7103:11;;7128:15;7157:20;7023:221;;;;;;;;;;;;;;;;;;;6263:988:::0;;;;;;:::o;1085:85:0:-;1131:7;1157:6;-1:-1:-1;;;;;1157:6:0;1085:85;;:::o;5930:129:7:-;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;5990:9:7::1;:17:::0;;;::::1;::::0;::::1;;::::0;;::::1;::::0;;;6022:30:::1;6039:12;:10;:12::i;:::-;6022:30;;;;;;;;;;;;;;;5930:129:::0;:::o;6065:192::-;1308:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;6147:16:7::1;:37:::0;;;6237:12:::1;:10;:12::i;:::-;-1:-1:-1::0;;;;;6199:51:7::1;6217:18;6199:51;;;;;;;;;;6065:192:::0;:::o;7990:537::-;8082:16;;8130:12;;8156:14;;8037:7;;8082:16;8130:12;8152:33;;8184:1;8177:8;;;;;;8152:33;8242:17;8277:11;8262:12;:26;:55;;8305:12;8262:55;;;8291:11;8262:55;8242:75;;8327:22;8370:9;8352:15;:27;:61;;8412:1;8352:61;;;8394:15;8382:9;:27;8352:61;8327:86;;8504:14;;8476;8457:16;;:33;8493:7;8457:43;8456:62;;;;;;8431:21;;:88;8423:97;;;;;;7990:537;:::o;413:48::-;454:7;413:48;:::o;2011:240:0:-;1308:12;:10;:12::i;:::-;-1:-1:-1;;;;;1297:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1297:23:0;;1289:68;;;;-1:-1:-1;;;1289:68:0;;;;;;;;;-1:-1:-1;;;;;2099:22:0;::::1;2091:73;;;;-1:-1:-1::0;;;2091:73:0::1;;;;;;;;;2200:6;::::0;;2179:38:::1;::::0;-1:-1:-1;;;;;2179:38:0;;::::1;::::0;2200:6;::::1;::::0;2179:38:::1;::::0;::::1;2227:6;:17:::0;;-1:-1:-1;;2227:17:0::1;-1:-1:-1::0;;;;;2227:17:0;;;::::1;::::0;;;::::1;::::0;;2011:240::o;598:104:5:-;685:10;598:104;:::o;11877:476:7:-;11957:4;12007:6;11981:22;11997:5;11981:15;:22::i;:::-;:32;;11973:71;;;;-1:-1:-1;;;11973:71:7;;;;;;;;;-1:-1:-1;;;;;12058:19:7;;12054:293;;12094:9;12117:2;-1:-1:-1;;;;;12109:16:7;12133:6;12109:35;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;12093:51:7;;;12166:4;12158:49;;;;-1:-1:-1;;;12158:49:7;;;;;;;;;12228:4;12221:11;;;;;12054:293;12263:48;12290:12;:10;:12::i;:::-;-1:-1:-1;;;;;12263:26:7;;;12304:6;12263:48;:26;:48;:::i;:::-;-1:-1:-1;12332:4:7;12054:293;11877:476;;;;;:::o;10899:416::-;10975:17;;;;10967:64;;;;-1:-1:-1;;;10967:64:7;;;;;;;;;11058:14;;;;11086:10;;11082:173;;11129:1;11112:14;;;:18;11164:12;11144:17;;;:32;11201:20;;11223:12;;11190:54;;-1:-1:-1;;;;;11201:20:7;;;;11223:12;11237:6;11190:10;:54::i;:::-;;11082:173;11287:20;;11269:39;;-1:-1:-1;;;;;11287:20:7;;;;11269:39;;;;11279:6;;11269:39;;;;;;;;;;10899:416;;:::o;10016:877::-;10113:6;:14;;;10103:6;:24;;10095:52;;;;-1:-1:-1;;;10095:52:7;;;;;;;;;10218:1;10209:6;:10;10201:56;;;;-1:-1:-1;;;10201:56:7;;;;;;;;;10287:7;:5;:7::i;:::-;-1:-1:-1;;;;;10271:23:7;:12;:10;:12::i;:::-;-1:-1:-1;;;;;10271:23:7;;10267:224;;10373:11;;10354:6;:16;;;:30;10335:15;:49;;:80;;;;10403:12;;10388;:27;10335:80;10310:170;;;;-1:-1:-1;;;10310:170:7;;;;;;;;;10500:14;:24;;;;;;;-1:-1:-1;10548:14:7;;;10538:24;;10534:232;;;10578:16;:21;;;;;;:16;10613:17;;;:21;;;10648:16;;;:20;;;10598:1;10682:14;;:18;10534:232;;;10731:14;;;:24;;;;;;;10534:232;10787:20;;10809:13;;10776:55;;-1:-1:-1;;;;;10787:20:7;;;;10809:13;10824:6;10776:10;:55::i;:::-;-1:-1:-1;10865:20:7;;10846:40;;-1:-1:-1;;;;;10865:20:7;;;;10846:40;;;;10857:6;;10846:40;;8533:1477;8624:1;8615:6;:10;8607:64;;;;-1:-1:-1;;;8607:64:7;;;;;;;;;8689:9;;;;8681:66;;;;-1:-1:-1;;;8681:66:7;;;;;;;;;8784:9;;8765:15;:28;;8757:82;;;;-1:-1:-1;;;8757:82:7;;;;;;;;;8873:12;;8857;:28;;8849:82;;;;-1:-1:-1;;;8849:82:7;;;;;;;;;8945:13;;:18;8941:104;;8992:13;;8973:16;;:32;8965:80;;;;-1:-1:-1;;;8965:80:7;;;;;;;;;9059:13;;:18;9055:124;;9126:13;;9116:6;9099:14;;:23;:40;;9091:88;;;;-1:-1:-1;;;9091:88:7;;;;;;;;;9193:18;;:23;9189:140;;9265:18;;9255:6;9238;:14;;;:23;:45;;9230:99;;;;-1:-1:-1;;;9230:99:7;;;;;;;;;9339:14;:24;;;;;;-1:-1:-1;9373:14:7;;:24;;;;;;9411:13;;-1:-1:-1;;;;;9411:13:7;9407:314;;9475:6;9462:9;:19;;9454:53;;;;-1:-1:-1;;;9454:53:7;;;;;;;;;9537:6;9525:9;:18;9521:83;;;9545:59;9556:12;:10;:12::i;:::-;9570:13;;-1:-1:-1;;;;;9570:13:7;9585:9;:18;;;9545:10;:59::i;:::-;;9521:83;9407:314;;;9635:75;9674:12;:10;:12::i;:::-;9642:13;;-1:-1:-1;;;;;9642:13:7;;9696:4;9703:6;9635:75;:38;:75;:::i;:::-;9734:17;;;;9730:217;;9772:16;:21;;9792:1;9772:21;;;9827:12;9807:17;;;:32;9872:15;9853:16;;;:34;9924:12;:10;:12::i;:::-;9901:35;;-1:-1:-1;;9901:35:7;-1:-1:-1;;;;;9901:35:7;;;;;;;9730:217;9982:20;;9961:42;;-1:-1:-1;;;;;9982:20:7;;;;9961:42;;;;9974:6;;9961:42;;704:175:3;786:86;806:5;836:23;;;861:2;865:5;813:58;;;;;;;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;813:58:3;;;49:4:-1;25:18;;61:17;;813:58:3;182:15:-1;813:58:3;;;;179:29:-1;;;;160:49;;;786:19:3;:86::i;:::-;704:175;;;:::o;885:203::-;985:96;1005:5;1035:27;;;1064:4;1070:2;1074:5;1012:68;;;;;;;;;;;985:96;885:203;;;;:::o;2967:751::-;3386:23;3412:69;3440:4;3412:69;;;;;;;;;;;;;;;;;3420:5;-1:-1:-1;;;;;3412:27:3;;;:69;;;;;:::i;:::-;3495:17;;3386:95;;-1:-1:-1;3495:21:3;3491:221;;3635:10;3624:30;;;;;;;;;;;;;;3616:85;;;;-1:-1:-1;;;3616:85:3;;;;;;;;3581:193:4;3684:12;3715:52;3737:6;3745:4;3751:1;3754:12;3715:21;:52::i;:::-;3708:59;3581:193;-1:-1:-1;;;;3581:193:4:o;4608:523::-;4735:12;4792:5;4767:21;:30;;4759:81;;;;-1:-1:-1;;;4759:81:4;;;;;;;;;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;-1:-1:-1;;;4850:60:4;;;;;;;;;4981:12;4995:23;5022:6;-1:-1:-1;;;;;5022:11:4;5042:5;5050:4;5022:33;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;4980:75:4;;;;5072:52;5090:7;5099:10;5111:12;5072:17;:52::i;:::-;5065:59;4608:523;-1:-1:-1;;;;;;;4608:523:4:o;726:413::-;1086:20;1124:8;;;726:413::o;7091:725::-;7206:12;7234:7;7230:580;;;-1:-1:-1;7264:10:4;7257:17;;7230:580;7375:17;;:21;7371:429;;7633:10;7627:17;7693:15;7680:10;7676:2;7672:19;7665:44;7582:145;7772:12;7765:20;;-1:-1:-1;;;7765:20:4;;;;;;;;;329:12026:7;;;;;;;;;;-1:-1:-1;;;;;329:12026:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;-1:-1;;;;;28379:54;;29344:35;;29334:2;;29393:1;;29383:12;29334:2;57:78;;;;;686:241;;790:2;778:9;769:7;765:23;761:32;758:2;;;-1:-1;;796:12;758:2;858:53;903:7;879:22;858:53;;934:360;;;1052:2;1040:9;1031:7;1027:23;1023:32;1020:2;;;-1:-1;;1058:12;1020:2;1120:53;1165:7;1141:22;1120:53;;;1110:63;;1210:2;1250:9;1246:22;206:20;231:30;255:5;231:30;;;1218:60;;;;1014:280;;;;;;1301:366;;;1422:2;1410:9;1401:7;1397:23;1393:32;1390:2;;;-1:-1;;1428:12;1390:2;1490:53;1535:7;1511:22;1490:53;;;1480:63;1580:2;1619:22;;;;475:20;;-1:-1;;;1384:283;1674:235;;1775:2;1763:9;1754:7;1750:23;1746:32;1743:2;;;-1:-1;;1781:12;1743:2;219:6;206:20;231:30;255:5;231:30;;1916:257;;2028:2;2016:9;2007:7;2003:23;1999:32;1996:2;;;-1:-1;;2034:12;1996:2;354:6;348:13;366:30;390:5;366:30;;2180:241;;2284:2;2272:9;2263:7;2259:23;2255:32;2252:2;;;-1:-1;;2290:12;2252:2;-1:-1;475:20;;2246:175;-1:-1;2246:175;2428:263;;2543:2;2531:9;2522:7;2518:23;2514:32;2511:2;;;-1:-1;;2549:12;2511:2;-1:-1;623:13;;2505:186;-1:-1;2505:186;2698:869;;;;;;;2887:3;2875:9;2866:7;2862:23;2858:33;2855:2;;;-1:-1;;2894:12;2855:2;-1:-1;;475:20;;;3046:2;3085:22;;475:20;;-1:-1;3154:2;3193:22;;475:20;;3262:2;3301:22;;475:20;;-1:-1;3370:3;3410:22;;475:20;;-1:-1;3479:3;3519:22;475:20;;-1:-1;2849:718;-1:-1;2849:718;13791:262;;4224:5;27632:12;4335:52;4380:6;4375:3;4368:4;4361:5;4357:16;4335:52;;;4399:16;;;;;13916:137;-1:-1;;13916:137;14437:213;-1:-1;;;;;28379:54;;;;3784:37;;14555:2;14540:18;;14526:124;14893:435;-1:-1;;;;;28379:54;;;3784:37;;28379:54;;;;15231:2;15216:18;;3784:37;15314:2;15299:18;;13622:37;;;;15067:2;15052:18;;15038:290;15335:324;-1:-1;;;;;28379:54;;;;3784:37;;15645:2;15630:18;;13622:37;15481:2;15466:18;;15452:207;15666:201;28291:13;;28284:21;4018:34;;15778:2;15763:18;;15749:118;15874:301;;16012:2;16033:17;16026:47;4572:5;27632:12;28071:6;16012:2;16001:9;15997:18;28059:19;4666:52;4711:6;28099:14;16001:9;28099:14;16012:2;4692:5;4688:16;4666:52;;;29268:2;29248:14;-1:-1;;29244:28;4730:39;;;;28099:14;4730:39;;15983:192;-1:-1;;15983:192;16182:407;16373:2;16387:47;;;5006:2;16358:18;;;28059:19;5042:34;28099:14;;;5022:55;5111:11;5097:12;;;5090:33;5142:12;;;16344:245;16596:407;16787:2;16801:47;;;5393:2;16772:18;;;28059:19;5429:34;28099:14;;;5409:55;5498:8;5484:12;;;5477:30;5526:12;;;16758:245;17010:407;17201:2;17215:47;;;5777:2;17186:18;;;28059:19;5813:17;28099:14;;;5793:38;5850:12;;;17172:245;17424:407;17615:2;17629:47;;;6101:2;17600:18;;;28059:19;6137:34;28099:14;;;6117:55;6206:28;6192:12;;;6185:50;6254:12;;;17586:245;17838:407;18029:2;18043:47;;;18014:18;;;28059:19;6541:34;28099:14;;;6521:55;6595:12;;;18000:245;18252:407;18443:2;18457:47;;;6846:2;18428:18;;;28059:19;6882:34;28099:14;;;6862:55;6951:3;6937:12;;;6930:25;6974:12;;;18414:245;18666:407;18857:2;18871:47;;;7225:2;18842:18;;;28059:19;7261:31;28099:14;;;7241:52;7312:12;;;18828:245;19080:407;19271:2;19285:47;;;7563:2;19256:18;;;28059:19;7599:34;28099:14;;;7579:55;7668:8;7654:12;;;7647:30;7696:12;;;19242:245;19494:407;19685:2;19699:47;;;7947:2;19670:18;;;28059:19;7983:34;28099:14;;;7963:55;8052:11;8038:12;;;8031:33;8083:12;;;19656:245;19908:407;20099:2;20113:47;;;8334:2;20084:18;;;28059:19;8370:34;28099:14;;;8350:55;8439:11;8425:12;;;8418:33;8470:12;;;20070:245;20322:407;20513:2;20527:47;;;8721:2;20498:18;;;28059:19;8757:34;28099:14;;;8737:55;8826:11;8812:12;;;8805:33;8857:12;;;20484:245;20736:407;20927:2;20941:47;;;20912:18;;;28059:19;9144:34;28099:14;;;9124:55;9198:12;;;20898:245;21150:407;21341:2;21355:47;;;9449:2;21326:18;;;28059:19;9485:33;28099:14;;;9465:54;9538:12;;;21312:245;21564:407;21755:2;21769:47;;;9789:2;21740:18;;;28059:19;9825:28;28099:14;;;9805:49;9873:12;;;21726:245;21978:407;22169:2;22183:47;;;10429:2;22154:18;;;28059:19;10465:34;28099:14;;;10445:55;10534:5;10520:12;;;10513:27;10559:12;;;22140:245;22392:407;22583:2;22597:47;;;10810:2;22568:18;;;28059:19;10846:31;28099:14;;;10826:52;10897:12;;;22554:245;22806:407;22997:2;23011:47;;;11148:2;22982:18;;;28059:19;11184:23;28099:14;;;11164:44;11227:12;;;22968:245;23220:407;23411:2;23425:47;;;11478:2;23396:18;;;28059:19;11514:34;28099:14;;;11494:55;11583:14;11569:12;;;11562:36;11617:12;;;23382:245;23634:407;23825:2;23839:47;;;11868:2;23810:18;;;28059:19;11904:34;28099:14;;;11884:55;11973:12;11959;;;11952:34;12005:12;;;23796:245;24048:407;24239:2;24253:47;;;12256:2;24224:18;;;28059:19;12292:33;28099:14;;;12272:54;12345:12;;;24210:245;24462:310;;24628:3;24617:9;24613:19;24605:27;;-1:-1;;;;;12646:16;12640:23;28379:54;3791:3;3784:37;12814:4;12807:5;12803:16;12797:23;12814:4;12878:3;12874:14;13622:37;12971:4;12964:5;12960:16;12954:23;12971:4;13035:3;13031:14;13622:37;13139:4;13132:5;13128:16;13122:23;13139:4;13203:3;13199:14;13622:37;13299:4;13292:5;13288:16;13282:23;13299:4;13363:3;13359:14;13622:37;13458:4;13451:5;13447:16;13441:23;13458:4;13522:3;13518:14;13622:37;24599:173;;;;;24779:213;13622:37;;;24897:2;24882:18;;24868:124;24999:1095;13622:37;;;25500:2;25485:18;;13622:37;;;;-1:-1;;;;;28379:54;;;25583:2;25568:18;;3784:37;28379:54;;;;25666:2;25651:18;;3784:37;25749:3;25734:19;;13622:37;;;;25833:3;25818:19;;13622:37;25917:3;25902:19;;13622:37;;;;26001:3;25986:19;;13622:37;28291:13;28284:21;26079:3;26064:19;;4018:34;25335:3;25320:19;;25306:788;26101:659;13622:37;;;26496:2;26481:18;;13622:37;;;;26579:2;26564:18;;13622:37;;;;26662:2;26647:18;;13622:37;26745:3;26730:19;;13622:37;26331:3;26316:19;;26302:458;26767:771;13622:37;;;27190:2;27175:18;;13622:37;;;;27273:2;27258:18;;13622:37;;;;27356:2;27341:18;;13622:37;27439:3;27424:19;;13622:37;27523:3;27508:19;;13622:37;27025:3;27010:19;;26996:542;28904:268;28969:1;28976:101;28990:6;28987:1;28984:13;28976:101;;;29057:11;;;29051:18;29038:11;;;29031:39;29012:2;29005:10;28976:101;;;29092:6;29089:1;29086:13;29083:2;;;-1:-1;;28969:1;29139:16;;29132:27;28953:219;29409:111;29490:5;28291:13;28284:21;29468:5;29465:32;29455:2;;29511:1;;29501:12;29455:2;29449:71;"},"gasEstimates":{"creation":{"codeDepositCost":"1595600","executionCost":"infinite","totalCost":"infinite"},"external":{"BLOCKS_IN_YEAR()":"294","earned(address)":"10795","emergencyWithdrawal(address,bool)":"infinite","getStakeConditionsInfo()":"5211","getStakeInfo()":"7760","getTokenBalance(address)":"infinite","getUserInfo(address)":"5886","harvest()":"infinite","owner()":"1160","renounceOwnership()":"24333","rewardPerToken()":"5255","setActive(bool)":"infinite","setRewardPerBlock(uint256)":"infinite","stakeTokens(uint256)":"infinite","transferOwnership(address)":"24572","updateStake(uint256,uint256,uint256,uint256,uint256,uint256)":"infinite","withdraw(uint256)":"infinite","withdrawTokens(address,uint256)":"infinite"},"internal":{"_stake(struct Staking.Staker storage pointer,uint256)":"infinite","_withdrawHarvest(struct Staking.Staker storage pointer)":"infinite","_withdrawLP(struct Staking.Staker storage pointer,uint256)":"infinite","sendTokens(address,address,uint256)":"infinite"}},"methodIdentifiers":{"BLOCKS_IN_YEAR()":"dd421cd5","earned(address)":"008cc262","emergencyWithdrawal(address,bool)":"21d18adc","getStakeConditionsInfo()":"4d1f7e65","getStakeInfo()":"74a4030f","getTokenBalance(address)":"3aecd0e3","getUserInfo(address)":"6386c1c7","harvest()":"4641257d","owner()":"8da5cb5b","renounceOwnership()":"715018a6","rewardPerToken()":"cd3daf9d","setActive(bool)":"acec338a","setRewardPerBlock(uint256)":"bb872b4a","stakeTokens(uint256)":"7547c7a3","transferOwnership(address)":"f2fde38b","updateStake(uint256,uint256,uint256,uint256,uint256,uint256)":"8cbf5309","withdraw(uint256)":"2e1a7d4d","withdrawTokens(address,uint256)":"06b091f9"}},"metadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stackingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakersLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakePerStaker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTotalLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ActiveSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"payHarvest\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"EmergencyWithdrawals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxStakePerStaker\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"MaxStakePerStakerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newRewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RewardPerBlockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RewardsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stackingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTotalLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakersLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxStakePerStaker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationInBlocks\",\"type\":\"uint256\"}],\"name\":\"StakeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocksDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakersLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxStakePerStaker\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newRewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"StakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TokenWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"payHarvest\",\"type\":\"bool\"}],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeConditionsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStartsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBlocksDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLpLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStakersLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxStakePerStaker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{\"withdraw(uint256)\":{\"notice\":\"Dev: withdraw both lp and reward tokens*\"},\"withdrawTokens(address,uint256)\":{\"notice\":\"Dev: owner or Creator can withdrawal Rewards tokens.*\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/test/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\"},\"contracts/periphery/test/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract Staking is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BLOCKS_IN_YEAR = 2102400; // if one block per 15 seconds\\n    mapping(address => Staker) private _stakers;\\n\\n    address private _rewardToken;\\n    address private _stakingToken;\\n    uint256 private _startsAt;\\n    uint256 private _durationInBlocks;\\n    uint256 private _finishBlock;\\n    uint256 private _lpLockTime;\\n    uint256 private _numberOfStakers;\\n    uint256 private _lpTotalAmount;\\n    uint256 private _lpTotalLimit;\\n    uint256 private _stakersLimit;\\n    uint256 private _maxStakePerStaker;\\n    uint256 private _rewardsPerBlock;\\n    uint256 private _rewardPerTokenStored;\\n    uint256 private _lastUpdateBlock;\\n    bool private _isActive;\\n\\n    struct Staker {\\n        address stakerAddress;\\n        uint256 balance;\\n        uint256 rewards;\\n        uint256 rewardPerTokenPaid;\\n        uint256 startBlock;\\n        uint256 startTime;\\n    }\\n\\n    function getUserInfo(address userAddress) external view returns (Staker memory) {\\n        return _stakers[userAddress];\\n    }\\n\\n    function getStakeInfo()\\n        external\\n        view\\n        returns (uint256, uint256, address, address, uint256, uint256, uint256, uint256, bool)\\n    {\\n        return (\\n            _startsAt,\\n            _finishBlock,\\n            _rewardToken,\\n            _stakingToken,\\n            _lpTotalAmount,\\n            _numberOfStakers,\\n            _rewardsPerBlock,\\n            _lastUpdateBlock,\\n            _isActive\\n        );\\n    }\\n\\n    function getStakeConditionsInfo() external view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\n        return (\\n            _lpLockTime,\\n            _lpTotalLimit,\\n            _stakersLimit,\\n            _maxStakePerStaker,\\n            _rewardPerTokenStored,\\n            _durationInBlocks\\n        );\\n    }\\n\\n    function getTokenBalance(address token) public view returns (uint256) {\\n        if (token == address(0)) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n\\n    function earned(address stakerAddress) public view returns (uint256) {\\n        Staker memory staker = _stakers[stakerAddress];\\n        uint256 rewardPerBlockNow = rewardPerToken();\\n        return\\n            rewardPerBlockNow != 0\\n                ? ((staker.balance * (rewardPerBlockNow - staker.rewardPerTokenPaid)) / 1 ether) + staker.rewards\\n                : 0 + staker.rewards;\\n    }\\n\\n    event ActiveSet(bool indexed value, address operator);\\n    event EmergencyWithdrawals(address indexed stakerAddress, bool payHarvest, address indexed operator);\\n    event RewardsDeposited(address indexed tokenAddress, uint256 amount, address indexed operator);\\n    event RewardPerBlockSet(uint256 indexed newRewardPerBlock, address indexed operator);\\n    event StakeCreated(\\n        address rewardToken,\\n        address stackingToken,\\n        uint256 startsAt,\\n        uint256 lpLockTime,\\n        uint256 lpTotalLimit,\\n        uint256 stakersLimit,\\n        uint256 maxStakePerStaker,\\n        uint256 rewardsPerBlock,\\n        uint256 durationInBlocks\\n    );\\n    event StakeUpdated(\\n        uint256 startsAt,\\n        uint256 blocksDuration,\\n        uint256 lpLockTime,\\n        uint256 stakersLimit,\\n        uint256 maxStakePerStaker,\\n        uint256 indexed newRewardPerBlock,\\n        address indexed operator\\n    );\\n    event MaxStakePerStakerSet(uint256 newMaxStakePerStaker, address indexed operator);\\n    event Withdrawed(uint256 amount, address indexed operator);\\n    event TokensStaked(uint256 amount, address indexed operator);\\n    event Harvested(uint256 amount, address indexed operator);\\n    event TokenWithdrawed(uint256 amount, address indexed operator);\\n\\n    constructor(\\n        address rewardToken,\\n        address stackingToken,\\n        uint256 startsAt,\\n        uint256 durationInBlocks,\\n        uint256 lpLockTime,\\n        uint256 stakersLimit,\\n        uint256 maxStakePerStaker,\\n        uint256 lpTotalLimit,\\n        uint256 rewardsPerBlock\\n    ) public {\\n        _rewardToken = rewardToken;\\n        _stakingToken = stackingToken;\\n        _startsAt = startsAt;\\n        _finishBlock = block.number + durationInBlocks;\\n        _lpLockTime = lpLockTime;\\n        _lpTotalLimit = lpTotalLimit;\\n        _stakersLimit = stakersLimit;\\n        _maxStakePerStaker = maxStakePerStaker;\\n        _rewardsPerBlock = rewardsPerBlock;\\n        _durationInBlocks = durationInBlocks;\\n        _isActive = true;\\n        emit StakeCreated(\\n            rewardToken,\\n            stackingToken,\\n            startsAt,\\n            lpLockTime,\\n            lpTotalLimit,\\n            stakersLimit,\\n            maxStakePerStaker,\\n            rewardsPerBlock,\\n            durationInBlocks\\n        );\\n    }\\n\\n    receive() external payable {}\\n\\n    function emergencyWithdrawal(\\n        address stakerAddress,\\n        bool payHarvest\\n    ) external onlyOwner nonReentrant updateReward(stakerAddress) {\\n        Staker storage staker = _stakers[stakerAddress];\\n        if (payHarvest) {\\n            _withdrawHarvest(staker);\\n        }\\n        _withdrawLP(staker, staker.balance);\\n        emit EmergencyWithdrawals(stakerAddress, payHarvest, _msgSender());\\n    }\\n\\n    /*\\n    withdraw only reward\\n  */\\n    function harvest() external nonReentrant updateReward(_msgSender()) {\\n        _withdrawHarvest(_stakers[_msgSender()]);\\n    }\\n\\n    function stakeTokens(uint256 amount) external payable nonReentrant updateReward(_msgSender()) {\\n        Staker storage staker = _stakers[_msgSender()];\\n        _stake(staker, amount);\\n    }\\n\\n    function setActive(bool value) external onlyOwner {\\n        _isActive = value;\\n        emit ActiveSet(value, _msgSender());\\n    }\\n\\n    function setRewardPerBlock(uint256 _newRewardPerBlock) public onlyOwner {\\n        _rewardsPerBlock = _newRewardPerBlock;\\n        emit RewardPerBlockSet(_newRewardPerBlock, _msgSender());\\n    }\\n\\n    function updateStake(\\n        uint256 newStartsAt,\\n        uint256 newBlocksDuration,\\n        uint256 newLpLockTime,\\n        uint256 newStakersLimit,\\n        uint256 newMaxStakePerStaker,\\n        uint256 newRewardPerBlock\\n    ) external onlyOwner {\\n        if (block.timestamp < _startsAt) {\\n            _lpLockTime = newLpLockTime;\\n            _startsAt = newStartsAt;\\n        }\\n        if (block.timestamp < _startsAt || _lpLockTime > newLpLockTime) {\\n            _lpLockTime = newLpLockTime;\\n        }\\n        _finishBlock = block.number + newBlocksDuration;\\n        _durationInBlocks = newBlocksDuration;\\n        _stakersLimit = newStakersLimit;\\n        _maxStakePerStaker = newMaxStakePerStaker;\\n        _rewardsPerBlock = newRewardPerBlock;\\n        emit StakeUpdated(\\n            _startsAt,\\n            newBlocksDuration,\\n            _lpLockTime,\\n            newStakersLimit,\\n            newMaxStakePerStaker,\\n            newRewardPerBlock,\\n            _msgSender()\\n        );\\n    }\\n\\n    /**\\n     * Dev: withdraw both lp and reward tokens\\n     **/\\n    function withdraw(uint256 amount) external nonReentrant updateReward(_msgSender()) {\\n        Staker storage staker = _stakers[_msgSender()];\\n        // _withdrawHarvest(staker);\\n        _withdrawLP(staker, amount);\\n    }\\n\\n    /**\\n     * Dev: owner or Creator can withdrawal Rewards tokens.\\n     **/\\n    function withdrawTokens(address token, uint256 amount) external nonReentrant onlyOwner {\\n        if (block.number < _finishBlock + BLOCKS_IN_YEAR)\\n            require(token != _stakingToken, \\\"Staking: can not withdraw stacking tokens before lock time\\\");\\n        sendTokens(_msgSender(), token, amount);\\n        emit TokenWithdrawed(amount, _msgSender());\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        uint256 lastUpdateBlock = _lastUpdateBlock;\\n        uint256 finishBlock = _finishBlock;\\n        if (_lpTotalAmount == 0) return 0; // TODO: check with rewardPerTokenStored not 0\\n        uint256 lastBlock = block.number > finishBlock ? finishBlock : block.number;\\n        uint256 rewardedBlocks = lastUpdateBlock < lastBlock ? lastBlock - lastUpdateBlock : 0;\\n        return (_rewardPerTokenStored + ((_rewardsPerBlock * rewardedBlocks * 1 ether) / _lpTotalAmount));\\n    }\\n\\n    function _stake(Staker storage staker, uint256 amount) internal {\\n        require(amount > 0, \\\"Staking: Amount must be greater than zero\\\");\\n        require(_isActive, \\\"Staking: This stake is inactive or not exist\\\");\\n        require(block.timestamp >= _startsAt, \\\"Staking: This staking has not started yet\\\");\\n        require(block.number <= _finishBlock, \\\"Staking: This staking is currently closed\\\");\\n        if (_stakersLimit != 0) require(_numberOfStakers < _stakersLimit, \\\"Staking: This stake is already full\\\");\\n        if (_lpTotalLimit != 0)\\n            require(_lpTotalAmount + amount <= _lpTotalLimit, \\\"Staking: This stake is already full\\\");\\n        if (_maxStakePerStaker != 0)\\n            require(staker.balance + amount <= _maxStakePerStaker, \\\"Staking: Your total stake size is too big\\\");\\n        _lpTotalAmount += amount;\\n        staker.balance += amount;\\n        if (_stakingToken == address(0)) {\\n            require(msg.value >= amount, \\\"Staking: Wrong amount\\\");\\n            if (msg.value > amount) sendTokens(_msgSender(), _stakingToken, msg.value - amount);\\n        } else {\\n            IERC20(_stakingToken).safeTransferFrom(_msgSender(), address(this), amount);\\n        }\\n        if (staker.startBlock == 0) {\\n            _numberOfStakers += 1;\\n            staker.startBlock = block.number;\\n            staker.startTime = block.timestamp;\\n            staker.stakerAddress = _msgSender();\\n        }\\n        emit TokensStaked(amount, staker.stakerAddress);\\n    }\\n\\n    function _withdrawLP(Staker storage staker, uint256 amount) internal {\\n        require(amount <= staker.balance, \\\"Exceeds balance\\\");\\n        // uint256 amount = staker.balance;\\n        require(amount > 0, \\\"Balance must be greater than zero\\\");\\n        if (_msgSender() != owner()) {\\n            require(\\n                block.timestamp >= staker.startTime + _lpLockTime || block.number > _finishBlock,\\n                \\\"Staking: Too early for withdraw\\\"\\n            );\\n        }\\n        _lpTotalAmount -= amount;\\n        if (amount == staker.balance) {\\n            _numberOfStakers -= 1;\\n            staker.startBlock = 0;\\n            staker.startTime = 0;\\n            staker.balance = 0;\\n        } else {\\n            staker.balance -= amount;\\n        }\\n\\n        sendTokens(staker.stakerAddress, _stakingToken, amount);\\n        emit Withdrawed(amount, staker.stakerAddress);\\n    }\\n\\n    function _withdrawHarvest(Staker storage staker) internal {\\n        require(staker.startBlock != 0, \\\"Staking: You are not a staker\\\");\\n        uint256 reward = staker.rewards;\\n        if (reward > 0) {\\n            staker.rewards = 0;\\n            staker.startBlock = block.number;\\n            sendTokens(staker.stakerAddress, _rewardToken, reward);\\n        }\\n        emit Harvested(reward, staker.stakerAddress);\\n    }\\n\\n    modifier updateReward(address stakerAddress) {\\n        Staker storage staker = _stakers[stakerAddress];\\n        _rewardPerTokenStored = rewardPerToken();\\n        _lastUpdateBlock = block.number < _finishBlock ? block.number : _finishBlock;\\n        staker.rewards = earned(stakerAddress);\\n        staker.rewardPerTokenPaid = _rewardPerTokenStored;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Function is used to transfer native tokens from contract.\\n     *\\n     * @param to is address of recipient.\\n     * @param amount of native tokens to transfer.\\n     **/\\n    function sendTokens(address to, address token, uint256 amount) private returns (bool) {\\n        require(getTokenBalance(token) >= amount, \\\"Staking: not enough tokens\\\");\\n        if (token == address(0)) {\\n            (bool sent, ) = payable(to).call{value: amount}(\\\"\\\");\\n            require(sent, \\\"GameStake: failed to send Tokens\\\");\\n            return true;\\n        } else {\\n            IERC20(token).safeTransfer(_msgSender(), amount);\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xda0cf856860b93a7fc24746c34021b1cc07405dd7482d36bd6d7bd3baca4180e\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1085,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":1135,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_stakers","offset":0,"slot":"2","type":"t_mapping(t_address,t_struct(Staker)1178_storage)"},{"astId":1137,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_rewardToken","offset":0,"slot":"3","type":"t_address"},{"astId":1139,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_stakingToken","offset":0,"slot":"4","type":"t_address"},{"astId":1141,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_startsAt","offset":0,"slot":"5","type":"t_uint256"},{"astId":1143,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_durationInBlocks","offset":0,"slot":"6","type":"t_uint256"},{"astId":1145,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_finishBlock","offset":0,"slot":"7","type":"t_uint256"},{"astId":1147,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_lpLockTime","offset":0,"slot":"8","type":"t_uint256"},{"astId":1149,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_numberOfStakers","offset":0,"slot":"9","type":"t_uint256"},{"astId":1151,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_lpTotalAmount","offset":0,"slot":"10","type":"t_uint256"},{"astId":1153,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_lpTotalLimit","offset":0,"slot":"11","type":"t_uint256"},{"astId":1155,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_stakersLimit","offset":0,"slot":"12","type":"t_uint256"},{"astId":1157,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_maxStakePerStaker","offset":0,"slot":"13","type":"t_uint256"},{"astId":1159,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_rewardsPerBlock","offset":0,"slot":"14","type":"t_uint256"},{"astId":1161,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_rewardPerTokenStored","offset":0,"slot":"15","type":"t_uint256"},{"astId":1163,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_lastUpdateBlock","offset":0,"slot":"16","type":"t_uint256"},{"astId":1165,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"_isActive","offset":0,"slot":"17","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_struct(Staker)1178_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Staking.Staker)","numberOfBytes":"32","value":"t_struct(Staker)1178_storage"},"t_struct(Staker)1178_storage":{"encoding":"inplace","label":"struct Staking.Staker","members":[{"astId":1167,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"stakerAddress","offset":0,"slot":"0","type":"t_address"},{"astId":1169,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"balance","offset":0,"slot":"1","type":"t_uint256"},{"astId":1171,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"rewards","offset":0,"slot":"2","type":"t_uint256"},{"astId":1173,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"rewardPerTokenPaid","offset":0,"slot":"3","type":"t_uint256"},{"astId":1175,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"startBlock","offset":0,"slot":"4","type":"t_uint256"},{"astId":1177,"contract":"contracts/periphery/test/Staking.sol:Staking","label":"startTime","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"methods":{"withdraw(uint256)":{"notice":"Dev: withdraw both lp and reward tokens*"},"withdrawTokens(address,uint256)":{"notice":"Dev: owner or Creator can withdrawal Rewards tokens.*"}}}}}}}}